{"version":3,"file":"9611.bundle.bdc9ba96ba9f2c256cfc.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageScrollbar.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportOrientationMarkers.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/ViewportImageSliceLoadingIndicator.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/Overlays/CornerstoneOverlays.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/CinePlayer.tsx","webpack:///../../../extensions/cornerstone/src/components/CinePlayer/index.ts","webpack:///../../../extensions/cornerstone/src/components/OHIFViewportActionCorners.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colormap.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/Colorbar.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevel.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresetsContent.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingPresets.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingQuality.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShift.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeLighting.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeShade.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/VolumeRenderingOptions.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/WindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/WindowLevelActionMenu/getWindowLevelActionMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/ViewportSegmentationMenu.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/ViewportSegmentationMenuWrapper.tsx","webpack:///../../../extensions/cornerstone/src/components/ViewportDataOverlaySettingMenu/index.tsx","webpack:///../../../extensions/cornerstone/src/utils/ActiveViewportBehavior.tsx","webpack:///../../../extensions/cornerstone/src/Viewport/OHIFCornerstoneViewport.tsx","webpack:///../../../extensions/cornerstone/src/utils/presentations/getViewportPresentations.ts"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums, VolumeViewport3D, utilities as csUtils } from '@cornerstonejs/core';\r\nimport { ImageScrollbar } from '@ohif/ui';\r\n\r\nfunction CornerstoneImageScrollbar({\r\n  viewportData,\r\n  viewportId,\r\n  element,\r\n  imageSliceData,\r\n  setImageSliceData,\r\n  scrollbarHeight,\r\n  servicesManager,\r\n}: withAppTypes<{\r\n  element: HTMLElement;\r\n}>) {\r\n  const { cineService, cornerstoneViewportService } = servicesManager.services;\r\n\r\n  const onImageScrollbarChange = (imageIndex, viewportId) => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    const { isCineEnabled } = cineService.getState();\r\n\r\n    if (isCineEnabled) {\r\n      // on image scrollbar change, stop the CINE if it is playing\r\n      cineService.stopClip(element, { viewportId });\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n    }\r\n\r\n    csUtils.jumpToSlice(viewport.element, {\r\n      imageIndex,\r\n      debounceLoading: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    if (!viewport || viewport instanceof VolumeViewport3D) {\r\n      return;\r\n    }\r\n\r\n    const imageIndex = viewport.getCurrentImageIdIndex();\r\n    const numberOfSlices = viewport.getNumberOfSlices();\r\n\r\n    setImageSliceData({\r\n      imageIndex: imageIndex,\r\n      numberOfSlices,\r\n    });\r\n  }, [viewportId, viewportData]);\r\n\r\n  useEffect(() => {\r\n    if (!viewportData) {\r\n      return;\r\n    }\r\n    const { viewportType } = viewportData;\r\n    const eventId =\r\n      (viewportType === Enums.ViewportType.STACK && Enums.Events.STACK_VIEWPORT_SCROLL) ||\r\n      (viewportType === Enums.ViewportType.ORTHOGRAPHIC && Enums.Events.VOLUME_NEW_IMAGE) ||\r\n      Enums.Events.IMAGE_RENDERED;\r\n\r\n    const updateIndex = event => {\r\n      const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n      if (!viewport || viewport instanceof VolumeViewport3D) {\r\n        return;\r\n      }\r\n      const { imageIndex, newImageIdIndex = imageIndex } = event.detail;\r\n      const numberOfSlices = viewport.getNumberOfSlices();\r\n      // find the index of imageId in the imageIds\r\n      setImageSliceData({\r\n        imageIndex: newImageIdIndex,\r\n        numberOfSlices,\r\n      });\r\n    };\r\n\r\n    element.addEventListener(eventId, updateIndex);\r\n\r\n    return () => {\r\n      element.removeEventListener(eventId, updateIndex);\r\n    };\r\n  }, [viewportData, element]);\r\n\r\n  return (\r\n    <ImageScrollbar\r\n      onChange={evt => onImageScrollbarChange(evt, viewportId)}\r\n      max={imageSliceData.numberOfSlices ? imageSliceData.numberOfSlices - 1 : 0}\r\n      height={scrollbarHeight}\r\n      value={imageSliceData.imageIndex || 0}\r\n    />\r\n  );\r\n}\r\n\r\nCornerstoneImageScrollbar.propTypes = {\r\n  viewportData: PropTypes.object,\r\n  viewportId: PropTypes.string.isRequired,\r\n  element: PropTypes.instanceOf(Element),\r\n  scrollbarHeight: PropTypes.string,\r\n  imageSliceData: PropTypes.object.isRequired,\r\n  setImageSliceData: PropTypes.func.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CornerstoneImageScrollbar;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport classNames from 'classnames';\r\nimport { metaData, Enums, Types, getEnabledElement } from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/tools';\r\nimport { vec3 } from 'gl-matrix';\r\n\r\nimport './ViewportOrientationMarkers.css';\r\n\r\nconst { getOrientationStringLPS, invertOrientationStringLPS } = utilities.orientation;\r\n\r\nfunction ViewportOrientationMarkers({\r\n  element,\r\n  viewportData,\r\n  imageSliceData,\r\n  viewportId,\r\n  servicesManager,\r\n  orientationMarkers = ['top', 'left'],\r\n}: withAppTypes) {\r\n  // Rotation is in degrees\r\n  const [rotation, setRotation] = useState(0);\r\n  const [flipHorizontal, setFlipHorizontal] = useState(false);\r\n  const [flipVertical, setFlipVertical] = useState(false);\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  useEffect(() => {\r\n    const cameraModifiedListener = (evt: Types.EventTypes.CameraModifiedEvent) => {\r\n      const { previousCamera, camera } = evt.detail;\r\n\r\n      const { rotation } = camera;\r\n      if (rotation !== undefined) {\r\n        setRotation(rotation);\r\n      }\r\n\r\n      if (\r\n        camera.flipHorizontal !== undefined &&\r\n        previousCamera.flipHorizontal !== camera.flipHorizontal\r\n      ) {\r\n        setFlipHorizontal(camera.flipHorizontal);\r\n      }\r\n\r\n      if (\r\n        camera.flipVertical !== undefined &&\r\n        previousCamera.flipVertical !== camera.flipVertical\r\n      ) {\r\n        setFlipVertical(camera.flipVertical);\r\n      }\r\n    };\r\n\r\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.CAMERA_MODIFIED, cameraModifiedListener);\r\n    };\r\n  }, []);\r\n\r\n  const markers = useMemo(() => {\r\n    if (!viewportData) {\r\n      return '';\r\n    }\r\n\r\n    let rowCosines, columnCosines, isDefaultValueSetForRowCosine, isDefaultValueSetForColumnCosine;\r\n    if (viewportData.viewportType === 'stack') {\r\n      const imageIndex = imageSliceData.imageIndex;\r\n      const imageId = viewportData.data[0].imageIds?.[imageIndex];\r\n\r\n      // Workaround for below TODO stub\r\n      if (!imageId) {\r\n        return false;\r\n      }\r\n\r\n      ({\r\n        rowCosines,\r\n        columnCosines,\r\n        isDefaultValueSetForColumnCosine,\r\n        isDefaultValueSetForColumnCosine,\r\n      } = metaData.get('imagePlaneModule', imageId) || {});\r\n    } else {\r\n      if (!element || !getEnabledElement(element)) {\r\n        return '';\r\n      }\r\n\r\n      const { viewport } = getEnabledElement(element);\r\n      const { viewUp, viewPlaneNormal } = viewport.getCamera();\r\n\r\n      const viewRight = vec3.create();\r\n      vec3.cross(viewRight, viewUp, viewPlaneNormal);\r\n\r\n      columnCosines = [-viewUp[0], -viewUp[1], -viewUp[2]];\r\n      rowCosines = viewRight;\r\n    }\r\n\r\n    if (\r\n      !rowCosines ||\r\n      !columnCosines ||\r\n      rotation === undefined ||\r\n      isDefaultValueSetForRowCosine ||\r\n      isDefaultValueSetForColumnCosine\r\n    ) {\r\n      return '';\r\n    }\r\n\r\n    const markers = _getOrientationMarkers(\r\n      rowCosines,\r\n      columnCosines,\r\n      rotation,\r\n      flipVertical,\r\n      flipHorizontal\r\n    );\r\n\r\n    const ohifViewport = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (!ohifViewport) {\r\n      console.log('ViewportOrientationMarkers::No viewport');\r\n      return null;\r\n    }\r\n\r\n    return orientationMarkers.map((m, index) => (\r\n      <div\r\n        className={classNames(\r\n          'overlay-text',\r\n          `${m}-mid orientation-marker`,\r\n          'text-aqua-pale',\r\n          'text-[13px]',\r\n          'leading-5'\r\n        )}\r\n        key={`${m}-mid orientation-marker`}\r\n      >\r\n        <div className=\"orientation-marker-value\">{markers[m]}</div>\r\n      </div>\r\n    ));\r\n  }, [\r\n    viewportData,\r\n    imageSliceData,\r\n    rotation,\r\n    flipVertical,\r\n    flipHorizontal,\r\n    orientationMarkers,\r\n    element,\r\n  ]);\r\n\r\n  return <div className=\"ViewportOrientationMarkers select-none\">{markers}</div>;\r\n}\r\n\r\n/**\r\n *\r\n * Computes the orientation labels on a Cornerstone-enabled Viewport element\r\n * when the viewport settings change (e.g. when a horizontal flip or a rotation occurs)\r\n *\r\n * @param {*} rowCosines\r\n * @param {*} columnCosines\r\n * @param {*} rotation in degrees\r\n * @returns\r\n */\r\nfunction _getOrientationMarkers(rowCosines, columnCosines, rotation, flipVertical, flipHorizontal) {\r\n  const rowString = getOrientationStringLPS(rowCosines);\r\n  const columnString = getOrientationStringLPS(columnCosines);\r\n  const oppositeRowString = invertOrientationStringLPS(rowString);\r\n  const oppositeColumnString = invertOrientationStringLPS(columnString);\r\n\r\n  const markers = {\r\n    top: oppositeColumnString,\r\n    left: oppositeRowString,\r\n    right: rowString,\r\n    bottom: columnString,\r\n  };\r\n\r\n  // If any vertical or horizontal flips are applied, change the orientation strings ahead of\r\n  // the rotation applications\r\n  if (flipVertical) {\r\n    markers.top = invertOrientationStringLPS(markers.top);\r\n    markers.bottom = invertOrientationStringLPS(markers.bottom);\r\n  }\r\n\r\n  if (flipHorizontal) {\r\n    markers.left = invertOrientationStringLPS(markers.left);\r\n    markers.right = invertOrientationStringLPS(markers.right);\r\n  }\r\n\r\n  // Swap the labels accordingly if the viewport has been rotated\r\n  // This could be done in a more complex way for intermediate rotation values (e.g. 45 degrees)\r\n  if (rotation === 90 || rotation === -270) {\r\n    return {\r\n      top: markers.left,\r\n      left: invertOrientationStringLPS(markers.top),\r\n      right: invertOrientationStringLPS(markers.bottom),\r\n      bottom: markers.right, // left\r\n    };\r\n  } else if (rotation === -90 || rotation === 270) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.left),\r\n      left: markers.top,\r\n      bottom: markers.left,\r\n      right: markers.bottom,\r\n    };\r\n  } else if (rotation === 180 || rotation === -180) {\r\n    return {\r\n      top: invertOrientationStringLPS(markers.top),\r\n      left: invertOrientationStringLPS(markers.left),\r\n      bottom: invertOrientationStringLPS(markers.bottom),\r\n      right: invertOrientationStringLPS(markers.right),\r\n    };\r\n  }\r\n\r\n  return markers;\r\n}\r\n\r\nexport default ViewportOrientationMarkers;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Enums } from '@cornerstonejs/core';\r\n\r\nfunction ViewportImageSliceLoadingIndicator({ viewportData, element }) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const loadIndicatorRef = useRef(null);\r\n  const imageIdToBeLoaded = useRef(null);\r\n\r\n  const setLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    loadIndicatorRef.current = setTimeout(() => {\r\n      setLoading(true);\r\n    }, 50);\r\n  };\r\n\r\n  const setFinishLoadingState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const setErrorState = evt => {\r\n    clearTimeout(loadIndicatorRef.current);\r\n\r\n    if (imageIdToBeLoaded.current === evt.detail.imageId) {\r\n      setError(evt.detail.error);\r\n      imageIdToBeLoaded.current = null;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    element.addEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n    element.addEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    element.addEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n    return () => {\r\n      element.removeEventListener(Enums.Events.STACK_VIEWPORT_SCROLL, setLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, setFinishLoadingState);\r\n\r\n      element.removeEventListener(Enums.Events.IMAGE_LOAD_ERROR, setErrorState);\r\n    };\r\n  }, [element, viewportData]);\r\n\r\n  if (error) {\r\n    return (\r\n      <>\r\n        <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n          <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n            <p className=\"text-primary-light text-xl font-light\">\r\n              <h4>Error Loading Image</h4>\r\n              <p>An error has occurred.</p>\r\n              <p>{error}</p>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      // IMPORTANT: we need to use the pointer-events-none class to prevent the loading indicator from\r\n      // interacting with the mouse, since scrolling should propagate to the viewport underneath\r\n      <div className=\"pointer-events-none absolute top-0 left-0 h-full w-full bg-black opacity-50\">\r\n        <div className=\"transparent flex h-full w-full items-center justify-center\">\r\n          <p className=\"text-primary-light text-xl font-light\">Loading...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nViewportImageSliceLoadingIndicator.propTypes = {\r\n  error: PropTypes.object,\r\n  element: PropTypes.object,\r\n};\r\n\r\nexport default ViewportImageSliceLoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport ViewportImageScrollbar from './ViewportImageScrollbar';\r\nimport CustomizableViewportOverlay from './CustomizableViewportOverlay';\r\nimport ViewportOrientationMarkers from './ViewportOrientationMarkers';\r\nimport ViewportImageSliceLoadingIndicator from './ViewportImageSliceLoadingIndicator';\r\n\r\nfunction CornerstoneOverlays(props: withAppTypes) {\r\n  const { viewportId, element, scrollbarHeight, servicesManager } = props;\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [imageSliceData, setImageSliceData] = useState({\r\n    imageIndex: 0,\r\n    numberOfSlices: 0,\r\n  });\r\n  const [viewportData, setViewportData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportId !== viewportId) {\r\n          return;\r\n        }\r\n\r\n        setViewportData(props.viewportData);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  if (!element) {\r\n    return null;\r\n  }\r\n\r\n  if (viewportData) {\r\n    const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n    if (viewportInfo?.viewportOptions?.customViewportProps?.hideOverlays) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"noselect\">\r\n      <ViewportImageScrollbar\r\n        viewportId={viewportId}\r\n        viewportData={viewportData}\r\n        element={element}\r\n        imageSliceData={imageSliceData}\r\n        setImageSliceData={setImageSliceData}\r\n        scrollbarHeight={scrollbarHeight}\r\n        servicesManager={servicesManager}\r\n      />\r\n\r\n      <CustomizableViewportOverlay\r\n        imageSliceData={imageSliceData}\r\n        viewportData={viewportData}\r\n        viewportId={viewportId}\r\n        servicesManager={servicesManager}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportImageSliceLoadingIndicator\r\n        viewportData={viewportData}\r\n        element={element}\r\n      />\r\n\r\n      <ViewportOrientationMarkers\r\n        imageSliceData={imageSliceData}\r\n        element={element}\r\n        viewportData={viewportData}\r\n        servicesManager={servicesManager}\r\n        viewportId={viewportId}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CornerstoneOverlays;\r\n","import React, { useCallback, useEffect, useState, useRef } from 'react';\r\nimport { CinePlayer, useCine } from '@ohif/ui';\r\nimport { Enums, eventTarget, cache } from '@cornerstonejs/core';\r\nimport { useAppConfig } from '@state';\r\n\r\nfunction WrappedCinePlayer({\r\n  enabledVPElement,\r\n  viewportId,\r\n  servicesManager,\r\n}: withAppTypes<{\r\n  enabledVPElement: HTMLElement;\r\n  viewportId: string;\r\n}>) {\r\n  const { customizationService, displaySetService, viewportGridService } = servicesManager.services;\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [newStackFrameRate, setNewStackFrameRate] = useState(24);\r\n  const [dynamicInfo, setDynamicInfo] = useState(null);\r\n  const [appConfig] = useAppConfig();\r\n  const isMountedRef = useRef(null);\r\n\r\n  const cineHandler = () => {\r\n    if (!cines?.[viewportId] || !enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    const { isPlaying = false, frameRate = 24 } = cines[viewportId];\r\n    const validFrameRate = Math.max(frameRate, 1);\r\n\r\n    return isPlaying\r\n      ? cineService.playClip(enabledVPElement, { framesPerSecond: validFrameRate, viewportId })\r\n      : cineService.stopClip(enabledVPElement);\r\n  };\r\n\r\n  const newDisplaySetHandler = useCallback(() => {\r\n    if (!enabledVPElement || !isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    const { viewports } = viewportGridService.getState();\r\n    const { displaySetInstanceUIDs } = viewports.get(viewportId);\r\n    let frameRate = 24;\r\n    let isPlaying = cines[viewportId]?.isPlaying || false;\r\n    displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n      if (displaySet.FrameRate) {\r\n        // displaySet.FrameRate corresponds to DICOM tag (0018,1063) which is defined as the the frame time in milliseconds\r\n        // So a bit of math to get the actual frame rate.\r\n        frameRate = Math.round(1000 / displaySet.FrameRate);\r\n        isPlaying ||= !!appConfig.autoPlayCine;\r\n      }\r\n\r\n      // check if the displaySet is dynamic and set the dynamic info\r\n      if (displaySet.isDynamicVolume) {\r\n        const { dynamicVolumeInfo } = displaySet;\r\n        const numTimePoints = dynamicVolumeInfo.timePoints.length;\r\n        const label = dynamicVolumeInfo.splittingTag;\r\n        const timePointIndex = dynamicVolumeInfo.timePointIndex || 0;\r\n        setDynamicInfo({\r\n          volumeId: displaySet.displaySetInstanceUID,\r\n          timePointIndex,\r\n          numTimePoints,\r\n          label,\r\n        });\r\n      } else {\r\n        setDynamicInfo(null);\r\n      }\r\n    });\r\n\r\n    if (isPlaying) {\r\n      cineService.setIsCineEnabled(isPlaying);\r\n    }\r\n    cineService.setCine({ id: viewportId, isPlaying, frameRate });\r\n    setNewStackFrameRate(frameRate);\r\n  }, [displaySetService, viewportId, viewportGridService, cines, isCineEnabled, enabledVPElement]);\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n\r\n    newDisplaySetHandler();\r\n\r\n    return () => {\r\n      isMountedRef.current = false;\r\n    };\r\n  }, [isCineEnabled, newDisplaySetHandler]);\r\n\r\n  useEffect(() => {\r\n    if (!isCineEnabled) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n  }, [isCineEnabled, cineHandler, enabledVPElement]);\r\n\r\n  /**\r\n   * Use effect for handling new display set\r\n   */\r\n  useEffect(() => {\r\n    if (!enabledVPElement) {\r\n      return;\r\n    }\r\n\r\n    enabledVPElement.addEventListener(Enums.Events.VIEWPORT_NEW_IMAGE_SET, newDisplaySetHandler);\r\n    // this doesn't makes sense that we are listening to this event on viewport element\r\n    enabledVPElement.addEventListener(\r\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n      newDisplaySetHandler\r\n    );\r\n\r\n    return () => {\r\n      cineService.setCine({ id: viewportId, isPlaying: false });\r\n\r\n      enabledVPElement.removeEventListener(\r\n        Enums.Events.VIEWPORT_NEW_IMAGE_SET,\r\n        newDisplaySetHandler\r\n      );\r\n      enabledVPElement.removeEventListener(\r\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n        newDisplaySetHandler\r\n      );\r\n    };\r\n  }, [enabledVPElement, newDisplaySetHandler, viewportId]);\r\n\r\n  useEffect(() => {\r\n    if (!cines || !cines[viewportId] || !enabledVPElement || !isMountedRef.current) {\r\n      return;\r\n    }\r\n\r\n    cineHandler();\r\n\r\n    return () => {\r\n      cineService.stopClip(enabledVPElement, { viewportId });\r\n    };\r\n  }, [cines, viewportId, cineService, enabledVPElement, cineHandler]);\r\n\r\n  if (!isCineEnabled) {\r\n    return null;\r\n  }\r\n\r\n  const cine = cines[viewportId];\r\n  const isPlaying = cine?.isPlaying || false;\r\n\r\n  return (\r\n    <RenderCinePlayer\r\n      viewportId={viewportId}\r\n      cineService={cineService}\r\n      newStackFrameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      dynamicInfo={dynamicInfo}\r\n      customizationService={customizationService}\r\n    />\r\n  );\r\n}\r\n\r\nfunction RenderCinePlayer({\r\n  viewportId,\r\n  cineService,\r\n  newStackFrameRate,\r\n  isPlaying,\r\n  dynamicInfo: dynamicInfoProp,\r\n  customizationService,\r\n}) {\r\n  const { component: CinePlayerComponent = CinePlayer } =\r\n    customizationService.get('cinePlayer') ?? {};\r\n\r\n  const [dynamicInfo, setDynamicInfo] = useState(dynamicInfoProp);\r\n\r\n  useEffect(() => {\r\n    setDynamicInfo(dynamicInfoProp);\r\n  }, [dynamicInfoProp]);\r\n\r\n  /**\r\n   * Use effect for handling 4D time index changed\r\n   */\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const handleTimePointIndexChange = evt => {\r\n      const { volumeId, timePointIndex, numTimePoints, splittingTag } = evt.detail;\r\n      setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\r\n    };\r\n\r\n    eventTarget.addEventListener(\r\n      Enums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\r\n      handleTimePointIndexChange\r\n    );\r\n\r\n    return () => {\r\n      eventTarget.removeEventListener(\r\n        Enums.Events.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\r\n        handleTimePointIndexChange\r\n      );\r\n    };\r\n  }, [dynamicInfo]);\r\n\r\n  useEffect(() => {\r\n    if (!dynamicInfo) {\r\n      return;\r\n    }\r\n\r\n    const { volumeId, timePointIndex, numTimePoints, splittingTag } = dynamicInfo || {};\r\n    const volume = cache.getVolume(volumeId, true);\r\n    volume.timePointIndex = timePointIndex;\r\n\r\n    setDynamicInfo({ volumeId, timePointIndex, numTimePoints, label: splittingTag });\r\n  }, []);\r\n\r\n  const updateDynamicInfo = useCallback(props => {\r\n    const { volumeId, timePointIndex } = props;\r\n    const volume = cache.getVolume(volumeId, true);\r\n    volume.timePointIndex = timePointIndex;\r\n  }, []);\r\n\r\n  return (\r\n    <CinePlayerComponent\r\n      className=\"absolute left-1/2 bottom-3 -translate-x-1/2\"\r\n      frameRate={newStackFrameRate}\r\n      isPlaying={isPlaying}\r\n      onClose={() => {\r\n        // also stop the clip\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying: false,\r\n        });\r\n        cineService.setIsCineEnabled(false);\r\n        cineService.setViewportCineClosed(viewportId);\r\n      }}\r\n      onPlayPauseChange={isPlaying => {\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          isPlaying,\r\n        });\r\n      }}\r\n      onFrameRateChange={frameRate =>\r\n        cineService.setCine({\r\n          id: viewportId,\r\n          frameRate,\r\n        })\r\n      }\r\n      dynamicInfo={dynamicInfo}\r\n      updateDynamicInfo={updateDynamicInfo}\r\n    />\r\n  );\r\n}\r\n\r\nexport default WrappedCinePlayer;\r\n","import CinePlayer from './CinePlayer';\r\n\r\nexport default CinePlayer;\r\n","import React from 'react';\r\nimport { useViewportActionCornersContext } from '../contextProviders/ViewportActionCornersProvider';\r\nimport { ViewportActionCorners } from '@ohif/ui';\r\n\r\nexport type OHIFViewportActionCornersProps = {\r\n  viewportId: string;\r\n};\r\n\r\nfunction OHIFViewportActionCorners({ viewportId }: OHIFViewportActionCornersProps) {\r\n  const [viewportActionCornersState] = useViewportActionCornersContext();\r\n\r\n  if (!viewportActionCornersState[viewportId]) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ViewportActionCorners\r\n      cornerComponents={viewportActionCornersState[viewportId]}\r\n    ></ViewportActionCorners>\r\n  );\r\n}\r\n\r\nexport default OHIFViewportActionCorners;\r\n","import React, { ReactElement, useCallback, useEffect, useRef, useState, useMemo } from 'react';\r\nimport { AllInOneMenu, ButtonGroup, SwitchButton } from '@ohif/ui';\r\nimport { StackViewport, Types } from '@cornerstonejs/core';\r\nimport { ColormapProps } from '../../types/Colormap';\r\n\r\nexport function Colormap({\r\n  colormaps,\r\n  viewportId,\r\n  displaySets,\r\n  commandsManager,\r\n  servicesManager,\r\n}: ColormapProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n\r\n  const [activeDisplaySet, setActiveDisplaySet] = useState(displaySets[0]);\r\n\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [prePreviewColormap, setPrePreviewColormap] = useState(null);\r\n\r\n  const showPreviewRef = useRef(showPreview);\r\n  showPreviewRef.current = showPreview;\r\n  const prePreviewColormapRef = useRef(prePreviewColormap);\r\n  prePreviewColormapRef.current = prePreviewColormap;\r\n  const activeDisplaySetRef = useRef(activeDisplaySet);\r\n  activeDisplaySetRef.current = activeDisplaySet;\r\n\r\n  const onSetColorLUT = useCallback(\r\n    props => {\r\n      // TODO: Better way to check if it's a fusion\r\n      const oneOpacityColormaps = ['Grayscale', 'X Ray'];\r\n      const opacity =\r\n        displaySets.length > 1 && !oneOpacityColormaps.includes(props.colormap.name) ? 0.5 : 1;\r\n      commandsManager.run({\r\n        commandName: 'setViewportColormap',\r\n        commandOptions: {\r\n          ...props,\r\n          opacity,\r\n          immediate: true,\r\n        },\r\n        context: 'CORNERSTONE',\r\n      });\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const getViewportColormap = (viewportId, displaySet) => {\r\n    const { displaySetInstanceUID } = displaySet;\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    if (viewport instanceof StackViewport) {\r\n      const { colormap } = viewport.getProperties();\r\n      if (!colormap) {\r\n        return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\r\n      }\r\n      return colormap;\r\n    }\r\n    const actorEntries = viewport.getActors();\r\n    const actorEntry = actorEntries?.find(entry =>\r\n      entry.referencedId.includes(displaySetInstanceUID)\r\n    );\r\n    const { colormap } = (viewport as Types.IVolumeViewport).getProperties(actorEntry.referencedId);\r\n    if (!colormap) {\r\n      return colormaps.find(c => c.Name === 'Grayscale') || colormaps[0];\r\n    }\r\n    return colormap;\r\n  };\r\n\r\n  const buttons = useMemo(() => {\r\n    return displaySets.map((displaySet, index) => ({\r\n      children: displaySet.Modality,\r\n      key: index,\r\n      style: {\r\n        minWidth: `calc(100% / ${displaySets.length})`,\r\n        fontSize: '0.8rem',\r\n        textAlign: 'center',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      },\r\n    }));\r\n  }, [displaySets]);\r\n\r\n  useEffect(() => {\r\n    setActiveDisplaySet(displaySets[displaySets.length - 1]);\r\n  }, [displaySets]);\r\n\r\n  return (\r\n    <>\r\n      {buttons.length > 1 && (\r\n        <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n          <ButtonGroup\r\n            onActiveIndexChange={index => {\r\n              setActiveDisplaySet(displaySets[index]);\r\n              setPrePreviewColormap(null);\r\n            }}\r\n            activeIndex={\r\n              displaySets.findIndex(\r\n                ds => ds.displaySetInstanceUID === activeDisplaySetRef.current.displaySetInstanceUID\r\n              ) || 1\r\n            }\r\n            className=\"w-[70%] text-[10px]\"\r\n          >\r\n            {buttons.map(({ children, key, style }) => (\r\n              <div\r\n                key={key}\r\n                style={style}\r\n              >\r\n                {children}\r\n              </div>\r\n            ))}\r\n          </ButtonGroup>\r\n        </div>\r\n      )}\r\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n        <SwitchButton\r\n          label=\"Preview in viewport\"\r\n          checked={showPreview}\r\n          onChange={checked => {\r\n            setShowPreview(checked);\r\n          }}\r\n        />\r\n      </div>\r\n      <AllInOneMenu.DividerItem />\r\n      <AllInOneMenu.ItemPanel>\r\n        {colormaps.map((colormap, index) => (\r\n          <AllInOneMenu.Item\r\n            key={index}\r\n            label={colormap.description}\r\n            onClick={() => {\r\n              onSetColorLUT({\r\n                viewportId,\r\n                colormap,\r\n                displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\r\n              });\r\n              setPrePreviewColormap(null);\r\n            }}\r\n            onMouseEnter={() => {\r\n              if (showPreviewRef.current) {\r\n                setPrePreviewColormap(getViewportColormap(viewportId, activeDisplaySetRef.current));\r\n                onSetColorLUT({\r\n                  viewportId,\r\n                  colormap,\r\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\r\n                });\r\n              }\r\n            }}\r\n            onMouseLeave={() => {\r\n              if (showPreviewRef.current && prePreviewColormapRef.current) {\r\n                onSetColorLUT({\r\n                  viewportId,\r\n                  colormap: prePreviewColormapRef.current,\r\n                  displaySetInstanceUID: activeDisplaySetRef.current.displaySetInstanceUID,\r\n                });\r\n              }\r\n            }}\r\n          ></AllInOneMenu.Item>\r\n        ))}\r\n      </AllInOneMenu.ItemPanel>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\r\nimport { SwitchButton } from '@ohif/ui';\r\nimport { StackViewport, VolumeViewport } from '@cornerstonejs/core';\r\nimport { ColorbarProps } from '../../types/Colorbar';\r\nimport { utilities } from '@cornerstonejs/core';\r\n\r\nexport function setViewportColorbar(\r\n  viewportId,\r\n  displaySets,\r\n  commandsManager,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  colorbarOptions\r\n) {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n  const backgroundColor = viewportInfo.getViewportOptions().background;\r\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\r\n\r\n  if (isLight) {\r\n    colorbarOptions.ticks = {\r\n      position: 'left',\r\n      style: {\r\n        font: '12px Arial',\r\n        color: '#000000',\r\n        maxNumTicks: 8,\r\n        tickSize: 5,\r\n        tickWidth: 1,\r\n        labelMargin: 3,\r\n      },\r\n    };\r\n  }\r\n\r\n  const displaySetInstanceUIDs = [];\r\n\r\n  if (viewport instanceof StackViewport) {\r\n    displaySetInstanceUIDs.push(viewportId);\r\n  }\r\n\r\n  if (viewport instanceof VolumeViewport) {\r\n    displaySets.forEach(ds => {\r\n      displaySetInstanceUIDs.push(ds.displaySetInstanceUID);\r\n    });\r\n  }\r\n\r\n  commandsManager.run({\r\n    commandName: 'toggleViewportColorbar',\r\n    commandOptions: {\r\n      viewportId,\r\n      options: colorbarOptions,\r\n      displaySetInstanceUIDs,\r\n    },\r\n    context: 'CORNERSTONE',\r\n  });\r\n}\r\n\r\nexport function Colorbar({\r\n  viewportId,\r\n  displaySets,\r\n  commandsManager,\r\n  servicesManager,\r\n  colorbarProperties,\r\n}: withAppTypes<ColorbarProps>): ReactElement {\r\n  const { colorbarService } = servicesManager.services;\r\n  const {\r\n    width: colorbarWidth,\r\n    colorbarTickPosition,\r\n    colorbarContainerPosition,\r\n    colormaps,\r\n    colorbarInitialColormap,\r\n  } = colorbarProperties;\r\n  const [showColorbar, setShowColorbar] = useState(colorbarService.hasColorbar(viewportId));\r\n\r\n  const onSetColorbar = useCallback(() => {\r\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\r\n      viewportId,\r\n      colormaps,\r\n      ticks: {\r\n        position: colorbarTickPosition,\r\n      },\r\n      width: colorbarWidth,\r\n      position: colorbarContainerPosition,\r\n      activeColormapName: colorbarInitialColormap,\r\n    });\r\n  }, [commandsManager]);\r\n\r\n  useEffect(() => {\r\n    const updateColorbarState = () => {\r\n      setShowColorbar(colorbarService.hasColorbar(viewportId));\r\n    };\r\n\r\n    const { unsubscribe } = colorbarService.subscribe(\r\n      colorbarService.EVENTS.STATE_CHANGED,\r\n      updateColorbarState\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [viewportId]);\r\n\r\n  return (\r\n    <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n      <div className=\"mr-2 w-[28px]\"></div>\r\n      <SwitchButton\r\n        label=\"Display Color bar\"\r\n        checked={showColorbar}\r\n        onChange={() => {\r\n          onSetColorbar();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback } from 'react';\r\nimport { AllInOneMenu } from '@ohif/ui';\r\nimport { WindowLevelPreset } from '../../types/WindowLevel';\r\nimport { CommandsManager } from '@ohif/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport type WindowLevelProps = {\r\n  viewportId: string;\r\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\r\n  commandsManager: CommandsManager;\r\n};\r\n\r\nexport function WindowLevel({\r\n  viewportId,\r\n  commandsManager,\r\n  presets,\r\n}: WindowLevelProps): ReactElement {\r\n  const { t } = useTranslation('WindowLevelActionMenu');\r\n\r\n  const onSetWindowLevel = useCallback(\r\n    props => {\r\n      commandsManager.run({\r\n        commandName: 'setViewportWindowLevel',\r\n        commandOptions: {\r\n          ...props,\r\n          viewportId,\r\n        },\r\n        context: 'CORNERSTONE',\r\n      });\r\n    },\r\n    [commandsManager, viewportId]\r\n  );\r\n\r\n  return (\r\n    <AllInOneMenu.ItemPanel>\r\n      {presets.map((modalityPresets, modalityIndex) => (\r\n        <React.Fragment key={modalityIndex}>\r\n          {Object.entries(modalityPresets).map(([modality, presetsArray]) => (\r\n            <React.Fragment key={modality}>\r\n              <AllInOneMenu.HeaderItem>\r\n                {t('Modality Presets', { modality })}\r\n              </AllInOneMenu.HeaderItem>\r\n              {presetsArray.map((preset, index) => (\r\n                <AllInOneMenu.Item\r\n                  key={`${modality}-${index}`}\r\n                  label={preset.description}\r\n                  secondaryLabel={`${preset.window} / ${preset.level}`}\r\n                  onClick={() => onSetWindowLevel(preset)}\r\n                />\r\n              ))}\r\n            </React.Fragment>\r\n          ))}\r\n        </React.Fragment>\r\n      ))}\r\n    </AllInOneMenu.ItemPanel>\r\n  );\r\n}\r\n","import { Icon } from '@ohif/ui';\r\nimport { ButtonEnums } from '@ohif/ui';\r\nimport React, { ReactElement, useState, useCallback } from 'react';\r\nimport { Button, InputFilterText } from '@ohif/ui';\r\nimport { ViewportPreset, VolumeRenderingPresetsContentProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeRenderingPresetsContent({\r\n  presets,\r\n  viewportId,\r\n  commandsManager,\r\n  onClose,\r\n}: VolumeRenderingPresetsContentProps): ReactElement {\r\n  const [filteredPresets, setFilteredPresets] = useState(presets);\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [selectedPreset, setSelectedPreset] = useState<ViewportPreset | null>(null);\r\n\r\n  const handleSearchChange = useCallback(\r\n    (value: string) => {\r\n      setSearchValue(value);\r\n      const filtered = value\r\n        ? presets.filter(preset => preset.name.toLowerCase().includes(value.toLowerCase()))\r\n        : presets;\r\n      setFilteredPresets(filtered);\r\n    },\r\n    [presets]\r\n  );\r\n\r\n  const handleApply = useCallback(\r\n    props => {\r\n      commandsManager.runCommand('setViewportPreset', {\r\n        ...props,\r\n      });\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const formatLabel = (label: string, maxChars: number) => {\r\n    return label.length > maxChars ? `${label.slice(0, maxChars)}...` : label;\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex min-h-full w-full flex-col justify-between\">\r\n      <div className=\"border-secondary-light h-[433px] w-full overflow-hidden rounded border bg-black px-2.5\">\r\n        <div className=\"flex h-[46px] w-full items-center justify-start\">\r\n          <div className=\"h-[26px] w-[200px]\">\r\n            <InputFilterText\r\n              value={searchValue}\r\n              onDebounceChange={handleSearchChange}\r\n              placeholder={'Search all'}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"ohif-scrollbar overflow h-[385px] w-full overflow-y-auto\">\r\n          <div className=\"grid grid-cols-4 gap-3 pt-2 pr-3\">\r\n            {filteredPresets.map((preset, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"flex cursor-pointer flex-col items-start\"\r\n                onClick={() => {\r\n                  setSelectedPreset(preset);\r\n                  handleApply({ preset: preset.name, viewportId });\r\n                }}\r\n              >\r\n                <Icon\r\n                  name={preset.name}\r\n                  className={\r\n                    selectedPreset?.name === preset.name\r\n                      ? 'border-primary-light h-[75px] w-[95px] max-w-none rounded border-2'\r\n                      : 'hover:border-primary-light h-[75px] w-[95px] max-w-none rounded border-2 border-black'\r\n                  }\r\n                />\r\n                <label className=\"text-aqua-pale mt-2 text-left text-xs\">\r\n                  {formatLabel(preset.name, 11)}\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <footer className=\"flex h-[60px] w-full items-center justify-end\">\r\n        <div className=\"flex\">\r\n          <Button\r\n            name=\"Cancel\"\r\n            size={ButtonEnums.size.medium}\r\n            type={ButtonEnums.type.secondary}\r\n            onClick={onClose}\r\n          >\r\n            {' '}\r\n            Cancel{' '}\r\n          </Button>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n","import { AllInOneMenu, Icon } from '@ohif/ui';\r\nimport React, { ReactElement } from 'react';\r\nimport { VolumeRenderingPresetsProps } from '../../types/ViewportPresets';\r\nimport { VolumeRenderingPresetsContent } from './VolumeRenderingPresetsContent';\r\n\r\nexport function VolumeRenderingPresets({\r\n  viewportId,\r\n  servicesManager,\r\n  commandsManager,\r\n  volumeRenderingPresets,\r\n}: VolumeRenderingPresetsProps): ReactElement {\r\n  const { uiModalService } = servicesManager.services;\r\n\r\n  const onClickPresets = () => {\r\n    uiModalService.show({\r\n      content: VolumeRenderingPresetsContent,\r\n      title: 'Rendering Presets',\r\n      movable: true,\r\n      contentProps: {\r\n        onClose: uiModalService.hide,\r\n        presets: volumeRenderingPresets,\r\n        viewportId,\r\n        commandsManager,\r\n      },\r\n      containerDimensions: 'h-[543px] w-[460px]',\r\n      contentDimensions: 'h-[493px] w-[460px]  pl-[12px] pr-[12px]',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AllInOneMenu.Item\r\n      label=\"Rendering Presets\"\r\n      icon={<Icon name=\"VolumeRendering\" />}\r\n      rightIcon={<Icon name=\"action-new-dialog\" />}\r\n      onClick={onClickPresets}\r\n    />\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useState, useEffect } from 'react';\r\nimport { VolumeRenderingQualityProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeRenderingQuality({\r\n  volumeRenderingQualityRange,\r\n  commandsManager,\r\n  servicesManager,\r\n  viewportId,\r\n}: VolumeRenderingQualityProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const { min, max, step } = volumeRenderingQualityRange;\r\n  const [quality, setQuality] = useState(null);\r\n\r\n  const onChange = useCallback(\r\n    (value: number) => {\r\n      commandsManager.runCommand('setVolumeRenderingQulaity', {\r\n        viewportId,\r\n        volumeQuality: value,\r\n      });\r\n      setQuality(value);\r\n    },\r\n    [commandsManager, viewportId]\r\n  );\r\n\r\n  const calculateBackground = value => {\r\n    const percentage = ((value - 0) / (1 - 0)) * 100;\r\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const { actor } = viewport.getActors()[0];\r\n    const mapper = actor.getMapper();\r\n    const image = mapper.getInputData();\r\n    const spacing = image.getSpacing();\r\n    const sampleDistance = mapper.getSampleDistance();\r\n    const averageSpacing = spacing.reduce((a, b) => a + b) / 3.0;\r\n    if (sampleDistance === averageSpacing) {\r\n      setQuality(1);\r\n    } else {\r\n      setQuality(Math.sqrt(averageSpacing / (sampleDistance * 0.5)));\r\n    }\r\n  }, [cornerstoneViewportService, viewportId]);\r\n  return (\r\n    <>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block text-white\"\r\n          htmlFor=\"volume\"\r\n        >\r\n          Quality\r\n        </label>\r\n        {quality !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={quality}\r\n            id=\"volume\"\r\n            max={max}\r\n            min={min}\r\n            type=\"range\"\r\n            step={step}\r\n            onChange={e => onChange(parseInt(e.target.value, 10))}\r\n            style={{\r\n              background: calculateBackground((quality - min) / (max - min)),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState, useRef } from 'react';\r\nimport { VolumeShiftProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeShift({\r\n  viewportId,\r\n  commandsManager,\r\n  servicesManager,\r\n}: VolumeShiftProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [minShift, setMinShift] = useState<number | null>(null);\r\n  const [maxShift, setMaxShift] = useState<number | null>(null);\r\n  const [shift, setShift] = useState<number | null>(\r\n    cornerstoneViewportService.getCornerstoneViewport(viewportId)?.shiftedBy || 0\r\n  );\r\n  const [step, setStep] = useState<number | null>(null);\r\n  const [isBlocking, setIsBlocking] = useState(false);\r\n\r\n  const prevShiftRef = useRef<number>(shift);\r\n\r\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n  const { actor } = viewport.getActors()[0];\r\n  const ofun = actor.getProperty().getScalarOpacity(0);\r\n\r\n  useEffect(() => {\r\n    if (isBlocking) {\r\n      return;\r\n    }\r\n    const range = ofun.getRange();\r\n\r\n    const transferFunctionWidth = range[1] - range[0];\r\n\r\n    const minShift = -transferFunctionWidth;\r\n    const maxShift = transferFunctionWidth;\r\n\r\n    setMinShift(minShift);\r\n    setMaxShift(maxShift);\r\n    setStep(Math.pow(10, Math.floor(Math.log10(transferFunctionWidth / 500))));\r\n  }, [cornerstoneViewportService, viewportId, actor, ofun, isBlocking]);\r\n\r\n  const onChangeRange = useCallback(\r\n    newShift => {\r\n      const shiftDifference = newShift - prevShiftRef.current;\r\n      prevShiftRef.current = newShift;\r\n      viewport.shiftedBy = newShift;\r\n      commandsManager.runCommand('shiftVolumeOpacityPoints', {\r\n        viewportId,\r\n        shift: shiftDifference,\r\n      });\r\n    },\r\n    [commandsManager, viewportId, viewport]\r\n  );\r\n\r\n  const calculateBackground = value => {\r\n    const percentage = ((value - 0) / (1 - 0)) * 100;\r\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"shift\"\r\n        >\r\n          Shift\r\n        </label>\r\n        {step !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={shift}\r\n            onChange={e => {\r\n              const shiftValue = parseInt(e.target.value, 10);\r\n              setShift(shiftValue);\r\n              onChangeRange(shiftValue);\r\n            }}\r\n            id=\"shift\"\r\n            onMouseDown={() => setIsBlocking(true)}\r\n            onMouseUp={() => setIsBlocking(false)}\r\n            max={maxShift}\r\n            min={minShift}\r\n            type=\"range\"\r\n            step={step}\r\n            style={{\r\n              background: calculateBackground((shift - minShift) / (maxShift - minShift)),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useState, useEffect, useCallback } from 'react';\r\nimport { VolumeLightingProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeLighting({\r\n  servicesManager,\r\n  commandsManager,\r\n  viewportId,\r\n}: VolumeLightingProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [ambient, setAmbient] = useState(null);\r\n  const [diffuse, setDiffuse] = useState(null);\r\n  const [specular, setSpecular] = useState(null);\r\n\r\n  const onAmbientChange = useCallback(() => {\r\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { ambient } });\r\n  }, [ambient, commandsManager, viewportId]);\r\n\r\n  const onDiffuseChange = useCallback(() => {\r\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { diffuse } });\r\n  }, [diffuse, commandsManager, viewportId]);\r\n\r\n  const onSpecularChange = useCallback(() => {\r\n    commandsManager.runCommand('setVolumeLighting', { viewportId, options: { specular } });\r\n  }, [specular, commandsManager, viewportId]);\r\n\r\n  const calculateBackground = value => {\r\n    const percentage = ((value - 0) / (1 - 0)) * 100;\r\n    return `linear-gradient(to right, #5acce6 0%, #5acce6 ${percentage}%, #3a3f99 ${percentage}%, #3a3f99 100%)`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const { actor } = viewport.getActors()[0];\r\n    const ambient = actor.getProperty().getAmbient();\r\n    const diffuse = actor.getProperty().getDiffuse();\r\n    const specular = actor.getProperty().getSpecular();\r\n    setAmbient(ambient);\r\n    setDiffuse(diffuse);\r\n    setSpecular(specular);\r\n  }, [viewportId, cornerstoneViewportService]);\r\n  return (\r\n    <>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"ambient\"\r\n        >\r\n          Ambient\r\n        </label>\r\n        {ambient !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={ambient}\r\n            onChange={e => {\r\n              setAmbient(e.target.value);\r\n              onAmbientChange();\r\n            }}\r\n            id=\"ambient\"\r\n            max={1}\r\n            min={0}\r\n            type=\"range\"\r\n            step={0.1}\r\n            style={{\r\n              background: calculateBackground(ambient),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"diffuse\"\r\n        >\r\n          Diffuse\r\n        </label>\r\n        {diffuse !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={diffuse}\r\n            onChange={e => {\r\n              setDiffuse(e.target.value);\r\n              onDiffuseChange();\r\n            }}\r\n            id=\"diffuse\"\r\n            max={1}\r\n            min={0}\r\n            type=\"range\"\r\n            step={0.1}\r\n            style={{\r\n              background: calculateBackground(diffuse),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"all-in-one-menu-item flex  w-full flex-row !items-center justify-between gap-[10px]\">\r\n        <label\r\n          className=\"block  text-white\"\r\n          htmlFor=\"specular\"\r\n        >\r\n          Specular\r\n        </label>\r\n        {specular !== null && (\r\n          <input\r\n            className=\"bg-inputfield-main h-2 w-[120px] cursor-pointer appearance-none rounded-lg\"\r\n            value={specular}\r\n            onChange={e => {\r\n              setSpecular(e.target.value);\r\n              onSpecularChange();\r\n            }}\r\n            id=\"specular\"\r\n            max={1}\r\n            min={0}\r\n            type=\"range\"\r\n            step={0.1}\r\n            style={{\r\n              background: calculateBackground(specular),\r\n              '--thumb-inner-color': '#5acce6',\r\n              '--thumb-outer-color': '#090c29',\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\r\nimport { SwitchButton } from '@ohif/ui';\r\nimport { VolumeShadeProps } from '../../types/ViewportPresets';\r\n\r\nexport function VolumeShade({\r\n  commandsManager,\r\n  viewportId,\r\n  servicesManager,\r\n}: VolumeShadeProps): ReactElement {\r\n  const { cornerstoneViewportService } = servicesManager.services;\r\n  const [shade, setShade] = useState(true);\r\n  const [key, setKey] = useState(0);\r\n\r\n  const onShadeChange = useCallback(\r\n    (checked: boolean) => {\r\n      commandsManager.runCommand('setVolumeLighting', { viewportId, options: { shade: checked } });\r\n    },\r\n    [commandsManager, viewportId]\r\n  );\r\n  useEffect(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    const { actor } = viewport.getActors()[0];\r\n    const shade = actor.getProperty().getShade();\r\n    setShade(shade);\r\n    setKey(key + 1);\r\n  }, [viewportId, cornerstoneViewportService]);\r\n\r\n  return (\r\n    <SwitchButton\r\n      key={key}\r\n      label=\"Shade\"\r\n      checked={shade}\r\n      onChange={() => {\r\n        setShade(!shade);\r\n        onShadeChange(!shade);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport { AllInOneMenu } from '@ohif/ui';\r\nimport { VolumeRenderingOptionsProps } from '../../types/ViewportPresets';\r\nimport { VolumeRenderingQuality } from './VolumeRenderingQuality';\r\nimport { VolumeShift } from './VolumeShift';\r\nimport { VolumeLighting } from './VolumeLighting';\r\nimport { VolumeShade } from './VolumeShade';\r\nexport function VolumeRenderingOptions({\r\n  viewportId,\r\n  commandsManager,\r\n  volumeRenderingQualityRange,\r\n  servicesManager,\r\n}: VolumeRenderingOptionsProps): ReactElement {\r\n  return (\r\n    <AllInOneMenu.ItemPanel>\r\n      <VolumeRenderingQuality\r\n        viewportId={viewportId}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        volumeRenderingQualityRange={volumeRenderingQualityRange}\r\n      />\r\n\r\n      <VolumeShift\r\n        viewportId={viewportId}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n      />\r\n      <div className=\"all-in-one-menu-item mt-2 flex !h-[20px] w-full justify-start\">\r\n        <div className=\"text-aqua-pale text-[13px]\">LIGHTING</div>\r\n      </div>\r\n      <div className=\"bg-primary-dark mt-1 mb-1 h-[2px] w-full\"></div>\r\n      <div className=\"all-in-one-menu-item flex w-full justify-center\">\r\n        <VolumeShade\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          viewportId={viewportId}\r\n        />\r\n      </div>\r\n      <VolumeLighting\r\n        viewportId={viewportId}\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n      />\r\n    </AllInOneMenu.ItemPanel>\r\n  );\r\n}\r\n","import React, { ReactElement, useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport classNames from 'classnames';\r\nimport { AllInOneMenu, useViewportGrid } from '@ohif/ui';\r\nimport { Colormap } from './Colormap';\r\nimport { Colorbar } from './Colorbar';\r\nimport { setViewportColorbar } from './Colorbar';\r\nimport { WindowLevelPreset } from '../../types/WindowLevel';\r\nimport { ColorbarProperties } from '../../types/Colorbar';\r\nimport { VolumeRenderingQualityRange } from '../../types/ViewportPresets';\r\nimport { WindowLevel } from './WindowLevel';\r\nimport { VolumeRenderingPresets } from './VolumeRenderingPresets';\r\nimport { VolumeRenderingOptions } from './VolumeRenderingOptions';\r\nimport { ViewportPreset } from '../../types/ViewportPresets';\r\nimport { VolumeViewport3D } from '@cornerstonejs/core';\r\nimport { utilities } from '@cornerstonejs/core';\r\n\r\nexport const nonWLModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE'];\r\n\r\nexport type WindowLevelActionMenuProps = {\r\n  viewportId: string;\r\n  element: HTMLElement;\r\n  presets: Array<Record<string, Array<WindowLevelPreset>>>;\r\n  colorbarProperties: ColorbarProperties;\r\n  displaySets: Array<any>;\r\n  volumeRenderingPresets: Array<ViewportPreset>;\r\n  volumeRenderingQualityRange: VolumeRenderingQualityRange;\r\n};\r\n\r\nexport function WindowLevelActionMenu({\r\n  viewportId,\r\n  element,\r\n  presets,\r\n  verticalDirection,\r\n  horizontalDirection,\r\n  commandsManager,\r\n  servicesManager,\r\n  colorbarProperties,\r\n  displaySets,\r\n  volumeRenderingPresets,\r\n  volumeRenderingQualityRange,\r\n}: withAppTypes<WindowLevelActionMenuProps>): ReactElement {\r\n  const {\r\n    colormaps,\r\n    colorbarContainerPosition,\r\n    colorbarInitialColormap,\r\n    colorbarTickPosition,\r\n    width: colorbarWidth,\r\n  } = colorbarProperties;\r\n  const { colorbarService, cornerstoneViewportService } = servicesManager.services;\r\n  const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n  const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n  const backgroundColor = viewportInfo.getViewportOptions().background;\r\n  const isLight = backgroundColor ? utilities.isEqual(backgroundColor, [1, 1, 1]) : false;\r\n\r\n  const { t } = useTranslation('WindowLevelActionMenu');\r\n\r\n  const [viewportGrid] = useViewportGrid();\r\n  const { activeViewportId } = viewportGrid;\r\n\r\n  const [vpHeight, setVpHeight] = useState(element?.clientHeight);\r\n  const [menuKey, setMenuKey] = useState(0);\r\n  const [is3DVolume, setIs3DVolume] = useState(false);\r\n\r\n  const onSetColorbar = useCallback(() => {\r\n    setViewportColorbar(viewportId, displaySets, commandsManager, servicesManager, {\r\n      colormaps,\r\n      ticks: {\r\n        position: colorbarTickPosition,\r\n      },\r\n      width: colorbarWidth,\r\n      position: colorbarContainerPosition,\r\n      activeColormapName: colorbarInitialColormap,\r\n    });\r\n  }, [commandsManager]);\r\n\r\n  useEffect(() => {\r\n    const newVpHeight = element?.clientHeight;\r\n    if (vpHeight !== newVpHeight) {\r\n      setVpHeight(newVpHeight);\r\n    }\r\n  }, [element, vpHeight]);\r\n\r\n  useEffect(() => {\r\n    if (!colorbarService.hasColorbar(viewportId)) {\r\n      return;\r\n    }\r\n    window.setTimeout(() => {\r\n      colorbarService.removeColorbar(viewportId);\r\n      onSetColorbar();\r\n    }, 0);\r\n  }, [viewportId, displaySets, viewport]);\r\n\r\n  useEffect(() => {\r\n    setMenuKey(menuKey + 1);\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n    if (viewport instanceof VolumeViewport3D) {\r\n      setIs3DVolume(true);\r\n    } else {\r\n      setIs3DVolume(false);\r\n    }\r\n  }, [\r\n    displaySets,\r\n    viewportId,\r\n    presets,\r\n    volumeRenderingQualityRange,\r\n    volumeRenderingPresets,\r\n    colorbarProperties,\r\n    activeViewportId,\r\n    viewportGrid,\r\n  ]);\r\n\r\n  return (\r\n    <AllInOneMenu.IconMenu\r\n      icon=\"viewport-window-level\"\r\n      verticalDirection={verticalDirection}\r\n      horizontalDirection={horizontalDirection}\r\n      iconClassName={classNames(\r\n        // Visible on hover and for the active viewport\r\n        activeViewportId === viewportId ? 'visible' : 'invisible group-hover/pane:visible',\r\n        'flex shrink-0 cursor-pointer rounded active:text-white text-primary-light',\r\n        isLight ? ' hover:bg-secondary-dark' : 'hover:bg-secondary-light/60'\r\n      )}\r\n      menuStyle={{ maxHeight: vpHeight - 32, minWidth: 218 }}\r\n      onVisibilityChange={() => {\r\n        setVpHeight(element.clientHeight);\r\n      }}\r\n      menuKey={menuKey}\r\n    >\r\n      <AllInOneMenu.ItemPanel>\r\n        {!is3DVolume && (\r\n          <Colorbar\r\n            viewportId={viewportId}\r\n            displaySets={displaySets.filter(ds => !nonWLModalities.includes(ds.Modality))}\r\n            commandsManager={commandsManager}\r\n            servicesManager={servicesManager}\r\n            colorbarProperties={colorbarProperties}\r\n          />\r\n        )}\r\n\r\n        {colormaps && !is3DVolume && (\r\n          <AllInOneMenu.SubMenu\r\n            key=\"colorLUTPresets\"\r\n            itemLabel=\"Color LUT\"\r\n            itemIcon=\"icon-color-lut\"\r\n          >\r\n            <Colormap\r\n              colormaps={colormaps}\r\n              viewportId={viewportId}\r\n              displaySets={displaySets.filter(ds => !nonWLModalities.includes(ds.Modality))}\r\n              commandsManager={commandsManager}\r\n              servicesManager={servicesManager}\r\n            />\r\n          </AllInOneMenu.SubMenu>\r\n        )}\r\n\r\n        {presets && presets.length > 0 && !is3DVolume && (\r\n          <AllInOneMenu.SubMenu\r\n            key=\"windowLevelPresets\"\r\n            itemLabel={t('Modality Window Presets')}\r\n            itemIcon=\"viewport-window-level\"\r\n          >\r\n            <WindowLevel\r\n              viewportId={viewportId}\r\n              commandsManager={commandsManager}\r\n              presets={presets}\r\n            />\r\n          </AllInOneMenu.SubMenu>\r\n        )}\r\n\r\n        {volumeRenderingPresets && is3DVolume && (\r\n          <VolumeRenderingPresets\r\n            servicesManager={servicesManager}\r\n            viewportId={viewportId}\r\n            commandsManager={commandsManager}\r\n            volumeRenderingPresets={volumeRenderingPresets}\r\n          />\r\n        )}\r\n\r\n        {volumeRenderingQualityRange && is3DVolume && (\r\n          <AllInOneMenu.SubMenu itemLabel=\"Rendering Options\">\r\n            <VolumeRenderingOptions\r\n              viewportId={viewportId}\r\n              commandsManager={commandsManager}\r\n              volumeRenderingQualityRange={volumeRenderingQualityRange}\r\n              servicesManager={servicesManager}\r\n            />\r\n          </AllInOneMenu.SubMenu>\r\n        )}\r\n      </AllInOneMenu.ItemPanel>\r\n    </AllInOneMenu.IconMenu>\r\n  );\r\n}\r\n","import React, { ReactNode } from 'react';\r\nimport { nonWLModalities, WindowLevelActionMenu } from './WindowLevelActionMenu';\r\n\r\nexport function getWindowLevelActionMenu({\r\n  viewportId,\r\n  element,\r\n  displaySets,\r\n  servicesManager,\r\n  commandsManager,\r\n  verticalDirection,\r\n  horizontalDirection,\r\n}: withAppTypes<{\r\n  viewportId: string;\r\n  element: HTMLElement;\r\n  displaySets: AppTypes.DisplaySet[];\r\n}>): ReactNode {\r\n  const { customizationService } = servicesManager.services;\r\n\r\n  const { presets } = customizationService.get('cornerstone.windowLevelPresets');\r\n  const colorbarProperties = customizationService.get('cornerstone.colorbar');\r\n  const { volumeRenderingPresets, volumeRenderingQualityRange } = customizationService.get(\r\n    'cornerstone.3dVolumeRendering'\r\n  );\r\n\r\n  const displaySetPresets = displaySets\r\n    .filter(displaySet => presets[displaySet.Modality])\r\n    .map(displaySet => {\r\n      return { [displaySet.Modality]: presets[displaySet.Modality] };\r\n    });\r\n\r\n  const modalities = displaySets\r\n    .map(displaySet => displaySet.Modality)\r\n    .filter(modality => !nonWLModalities.includes(modality));\r\n\r\n  if (modalities.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <WindowLevelActionMenu\r\n      viewportId={viewportId}\r\n      element={element}\r\n      presets={displaySetPresets}\r\n      verticalDirection={verticalDirection}\r\n      horizontalDirection={horizontalDirection}\r\n      commandsManager={commandsManager}\r\n      servicesManager={servicesManager}\r\n      colorbarProperties={colorbarProperties}\r\n      displaySets={displaySets}\r\n      volumeRenderingPresets={volumeRenderingPresets}\r\n      volumeRenderingQualityRange={volumeRenderingQualityRange}\r\n    />\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, Icons, Separator } from '@ohif/ui-next';\r\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\r\n\r\nfunction ViewportSegmentationMenu({\r\n  viewportId,\r\n  servicesManager,\r\n}: withAppTypes<{ viewportId: string }>) {\r\n  const { segmentationService } = servicesManager.services;\r\n  const [activeSegmentations, setActiveSegmentations] = useState([]);\r\n  const [availableSegmentations, setAvailableSegmentations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const updateSegmentations = () => {\r\n      const active = segmentationService.getSegmentationRepresentations(viewportId);\r\n      setActiveSegmentations(active);\r\n\r\n      const all = segmentationService.getSegmentations();\r\n      const available = all.filter(\r\n        seg => !active.some(activeSeg => activeSeg.segmentationId === seg.segmentationId)\r\n      );\r\n      setAvailableSegmentations(available);\r\n    };\r\n\r\n    updateSegmentations();\r\n\r\n    const subscriptions = [\r\n      segmentationService.EVENTS.SEGMENTATION_MODIFIED,\r\n      segmentationService.EVENTS.SEGMENTATION_REMOVED,\r\n      segmentationService.EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\r\n    ].map(event => segmentationService.subscribe(event, updateSegmentations));\r\n\r\n    return () => {\r\n      subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    };\r\n  }, [segmentationService, viewportId]);\r\n\r\n  const toggleSegmentationRepresentationVisibility = (\r\n    segmentationId,\r\n    type = SegmentationRepresentations.Labelmap\r\n  ) => {\r\n    segmentationService.toggleSegmentationRepresentationVisibility(viewportId, {\r\n      segmentationId,\r\n      type,\r\n    });\r\n  };\r\n\r\n  const addSegmentationToViewport = segmentationId => {\r\n    segmentationService.addSegmentationRepresentation(viewportId, { segmentationId });\r\n  };\r\n\r\n  const removeSegmentationFromViewport = segmentationId => {\r\n    segmentationService.removeSegmentationRepresentations(viewportId, {\r\n      segmentationId,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-muted flex h-full w-[262px] flex-col rounded p-3\">\r\n      <span className=\"text-muted-foreground mb-2 text-xs font-semibold\">Current Viewport</span>\r\n      <ul className=\"space-y-1\">\r\n        {activeSegmentations.map(segmentation => (\r\n          <li\r\n            key={segmentation.id}\r\n            className=\"flex items-center text-sm\"\r\n          >\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              className=\"text-muted-foreground mr-2\"\r\n              onClick={() => removeSegmentationFromViewport(segmentation.segmentationId)}\r\n            >\r\n              <Icons.Minus className=\"h-6 w-6\" />\r\n            </Button>\r\n            <span className=\"text-foreground flex-grow\">{segmentation.label}</span>\r\n            {segmentation.visible ? (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                className=\"text-muted-foreground\"\r\n                onClick={() =>\r\n                  toggleSegmentationRepresentationVisibility(\r\n                    segmentation.segmentationId,\r\n                    segmentation.type\r\n                  )\r\n                }\r\n              >\r\n                <Icons.Hide className=\"h-6 w-6\" />\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                className=\"text-muted-foreground\"\r\n                onClick={() =>\r\n                  toggleSegmentationRepresentationVisibility(\r\n                    segmentation.segmentationId,\r\n                    segmentation.type\r\n                  )\r\n                }\r\n              >\r\n                <Icons.Show className=\"h-6 w-6\" />\r\n              </Button>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {availableSegmentations.length > 0 && (\r\n        <>\r\n          <Separator className=\"bg-input mb-3\" />\r\n          <span className=\"text-muted-foreground mb-2 text-xs font-semibold\">Available</span>\r\n          <ul className=\"space-y-1\">\r\n            {availableSegmentations.map(({segmentationId, label}) => (\r\n              <li\r\n                key={segmentationId}\r\n                className=\"flex items-center text-sm\"\r\n              >\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"icon\"\r\n                  className=\"text-muted-foreground mr-2\"\r\n                  onClick={() => addSegmentationToViewport(segmentationId)}\r\n                >\r\n                  <Icons.Plus className=\"h-6 w-6\" />\r\n                </Button>\r\n                <span className=\"text-foreground/60\">{label}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ViewportSegmentationMenu;\r\n","import React, { ReactNode, useEffect, useState } from 'react';\r\nimport { Button, Icons, Popover, PopoverContent, PopoverTrigger } from '@ohif/ui-next';\r\nimport ViewportSegmentationMenu from './ViewportSegmentationMenu';\r\nimport classNames from 'classnames';\r\nimport { useSegmentations } from '../../hooks/useSegmentations';\r\n\r\nexport function ViewportSegmentationMenuWrapper({\r\n  viewportId,\r\n  displaySets,\r\n  servicesManager,\r\n  commandsManager,\r\n  location,\r\n}: withAppTypes<{\r\n  viewportId: string;\r\n  element: HTMLElement;\r\n}>): ReactNode {\r\n  const { viewportActionCornersService, viewportGridService } = servicesManager.services;\r\n\r\n  const segmentations = useSegmentations({ servicesManager });\r\n\r\n  const activeViewportId = viewportGridService.getActiveViewportId();\r\n  const isActiveViewport = viewportId === activeViewportId;\r\n\r\n  const { align, side } = getAlignAndSide(viewportActionCornersService, location);\r\n\r\n  if (!segmentations?.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger\r\n        asChild\r\n        className=\"flex items-center justify-center\"\r\n      >\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"icon\"\r\n        >\r\n          <Icons.ViewportViews\r\n            className={classNames(\r\n              'text-highlight',\r\n              isActiveViewport ? 'visible' : 'invisible group-hover/pane:visible'\r\n            )}\r\n          />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent\r\n        className=\"border-none bg-transparent p-0 shadow-none\"\r\n        side={side}\r\n        align={align}\r\n        alignOffset={-15}\r\n        sideOffset={5}\r\n      >\r\n        <ViewportSegmentationMenu\r\n          className=\"w-full\"\r\n          viewportId={viewportId}\r\n          displaySets={displaySets}\r\n          servicesManager={servicesManager}\r\n          commandsManager={commandsManager}\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nconst getAlignAndSide = (viewportActionCornersService, location) => {\r\n  const ViewportActionCornersLocations = viewportActionCornersService.LOCATIONS;\r\n\r\n  switch (location) {\r\n    case ViewportActionCornersLocations.topLeft:\r\n      return { align: 'start', side: 'bottom' };\r\n    case ViewportActionCornersLocations.topRight:\r\n      return { align: 'end', side: 'bottom' };\r\n    case ViewportActionCornersLocations.bottomLeft:\r\n      return { align: 'start', side: 'top' };\r\n    case ViewportActionCornersLocations.bottomRight:\r\n      return { align: 'end', side: 'top' };\r\n    default:\r\n      console.debug('Unknown location, defaulting to bottom-start');\r\n      return { align: 'start', side: 'bottom' };\r\n  }\r\n};\r\n","import React, { ReactNode } from 'react';\r\nimport { ViewportSegmentationMenuWrapper } from './ViewportSegmentationMenuWrapper';\r\n\r\nexport function getViewportDataOverlaySettingsMenu(\r\n  props: withAppTypes<{\r\n    viewportId: string;\r\n    element: HTMLElement;\r\n  }>\r\n): ReactNode {\r\n  return <ViewportSegmentationMenuWrapper {...props} />;\r\n}\r\n","import { useEffect, useState, memo } from 'react';\r\n\r\nconst MODALITIES_REQUIRING_CINE_AUTO_MOUNT = ['OT', 'US'];\r\n\r\nconst ActiveViewportBehavior = memo(\r\n  ({ servicesManager, viewportId }: withAppTypes<{ viewportId: string }>) => {\r\n    const { displaySetService, cineService, viewportGridService, customizationService } =\r\n      servicesManager.services;\r\n\r\n    const [activeViewportId, setActiveViewportId] = useState(viewportId);\r\n\r\n    useEffect(() => {\r\n      const subscription = viewportGridService.subscribe(\r\n        viewportGridService.EVENTS.ACTIVE_VIEWPORT_ID_CHANGED,\r\n        ({ viewportId }) => setActiveViewportId(viewportId)\r\n      );\r\n\r\n      return () => subscription.unsubscribe();\r\n    }, [viewportId, viewportGridService]);\r\n\r\n    useEffect(() => {\r\n      if (cineService.isViewportCineClosed(activeViewportId)) {\r\n        return;\r\n      }\r\n\r\n      const displaySetInstanceUIDs =\r\n        viewportGridService.getDisplaySetsUIDsForViewport(activeViewportId);\r\n\r\n      if (!displaySetInstanceUIDs) {\r\n        return;\r\n      }\r\n\r\n      const displaySets = displaySetInstanceUIDs.map(uid =>\r\n        displaySetService.getDisplaySetByUID(uid)\r\n      );\r\n\r\n      if (!displaySets.length) {\r\n        return;\r\n      }\r\n\r\n      const modalities = displaySets.map(displaySet => displaySet?.Modality);\r\n\r\n      const { modalities: sourceModalities } = customizationService.getModeCustomization(\r\n        'autoCineModalities',\r\n        {\r\n          id: 'autoCineModalities',\r\n          modalities: MODALITIES_REQUIRING_CINE_AUTO_MOUNT,\r\n        }\r\n      );\r\n\r\n      const requiresCine = modalities.some(modality => sourceModalities.includes(modality));\r\n\r\n      if (requiresCine && !cineService.getState().isCineEnabled) {\r\n        cineService.setIsCineEnabled(true);\r\n      }\r\n    }, [\r\n      activeViewportId,\r\n      cineService,\r\n      viewportGridService,\r\n      displaySetService,\r\n      customizationService,\r\n    ]);\r\n\r\n    return null;\r\n  },\r\n  arePropsEqual\r\n);\r\n\r\nActiveViewportBehavior.displayName = 'ActiveViewportBehavior';\r\n\r\nfunction arePropsEqual(prevProps, nextProps) {\r\n  return (\r\n    prevProps.viewportId === nextProps.viewportId &&\r\n    prevProps.servicesManager === nextProps.servicesManager\r\n  );\r\n}\r\n\r\nexport default ActiveViewportBehavior;\r\n","import React, { useEffect, useRef, useCallback, useState } from 'react';\r\nimport { useResizeDetector } from 'react-resize-detector';\r\nimport * as cs3DTools from '@cornerstonejs/tools';\r\nimport { Enums, eventTarget, getEnabledElement } from '@cornerstonejs/core';\r\nimport { MeasurementService } from '@ohif/core';\r\nimport { AllInOneMenu, Notification, useViewportDialog } from '@ohif/ui';\r\nimport type { Types as csTypes } from '@cornerstonejs/core';\r\n\r\nimport { setEnabledElement } from '../state';\r\n\r\nimport './OHIFCornerstoneViewport.css';\r\nimport CornerstoneOverlays from './Overlays/CornerstoneOverlays';\r\nimport CinePlayer from '../components/CinePlayer';\r\nimport type { Types } from '@ohif/core';\r\n\r\nimport OHIFViewportActionCorners from '../components/OHIFViewportActionCorners';\r\nimport { getWindowLevelActionMenu } from '../components/WindowLevelActionMenu/getWindowLevelActionMenu';\r\nimport { useAppConfig } from '@state';\r\nimport { getViewportDataOverlaySettingsMenu } from '../components/ViewportDataOverlaySettingMenu';\r\nimport { getViewportPresentations } from '../utils/presentations/getViewportPresentations';\r\nimport { useSynchronizersStore } from '../stores/useSynchronizersStore';\r\nimport ActiveViewportBehavior from '../utils/ActiveViewportBehavior';\r\n\r\nconst STACK = 'stack';\r\n\r\n/**\r\n * Caches the jump to measurement operation, so that if display set is shown,\r\n * it can jump to the measurement.\r\n */\r\nlet cacheJumpToMeasurementEvent;\r\n\r\n// Todo: This should be done with expose of internal API similar to react-vtkjs-viewport\r\n// Then we don't need to worry about the re-renders if the props change.\r\nconst OHIFCornerstoneViewport = React.memo(\r\n  (\r\n    props: withAppTypes<{\r\n      viewportId: string;\r\n      displaySets: AppTypes.DisplaySet[];\r\n      viewportOptions: AppTypes.ViewportGrid.GridViewportOptions;\r\n      initialImageIndex: number;\r\n    }>\r\n  ) => {\r\n    const {\r\n      displaySets,\r\n      dataSource,\r\n      viewportOptions,\r\n      displaySetOptions,\r\n      servicesManager,\r\n      commandsManager,\r\n      onElementEnabled,\r\n      // eslint-disable-next-line react/prop-types\r\n      onElementDisabled,\r\n      isJumpToMeasurementDisabled = false,\r\n      // Note: you SHOULD NOT use the initialImageIdOrIndex for manipulation\r\n      // of the imageData in the OHIFCornerstoneViewport. This prop is used\r\n      // to set the initial state of the viewport's first image to render\r\n      // eslint-disable-next-line react/prop-types\r\n      initialImageIndex,\r\n      // if the viewport is part of a hanging protocol layout\r\n      // we should not really rely on the old synchronizers and\r\n      // you see below we only rehydrate the synchronizers if the viewport\r\n      // is not part of the hanging protocol layout. HPs should\r\n      // define their own synchronizers. Since the synchronizers are\r\n      // viewportId dependent and\r\n      // eslint-disable-next-line react/prop-types\r\n      isHangingProtocolLayout,\r\n    } = props;\r\n    const viewportId = viewportOptions.viewportId;\r\n\r\n    if (!viewportId) {\r\n      throw new Error('Viewport ID is required');\r\n    }\r\n\r\n    // Make sure displaySetOptions has one object per displaySet\r\n    while (displaySetOptions.length < displaySets.length) {\r\n      displaySetOptions.push({});\r\n    }\r\n\r\n    // Since we only have support for dynamic data in volume viewports, we should\r\n    // handle this case here and set the viewportType to volume if any of the\r\n    // displaySets are dynamic volumes\r\n    viewportOptions.viewportType = displaySets.some(\r\n      ds => ds.isDynamicVolume && ds.isReconstructable\r\n    )\r\n      ? 'volume'\r\n      : viewportOptions.viewportType;\r\n\r\n    const [scrollbarHeight, setScrollbarHeight] = useState('100px');\r\n    const [enabledVPElement, setEnabledVPElement] = useState(null);\r\n    const elementRef = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n    const [appConfig] = useAppConfig();\r\n\r\n    const {\r\n      displaySetService,\r\n      toolbarService,\r\n      toolGroupService,\r\n      syncGroupService,\r\n      cornerstoneViewportService,\r\n      segmentationService,\r\n      cornerstoneCacheService,\r\n      viewportActionCornersService,\r\n    } = servicesManager.services;\r\n\r\n    const [viewportDialogState] = useViewportDialog();\r\n    // useCallback for scroll bar height calculation\r\n    const setImageScrollBarHeight = useCallback(() => {\r\n      const scrollbarHeight = `${elementRef.current.clientHeight - 40}px`;\r\n      setScrollbarHeight(scrollbarHeight);\r\n    }, [elementRef]);\r\n\r\n    // useCallback for onResize\r\n    const onResize = useCallback(() => {\r\n      if (elementRef.current) {\r\n        cornerstoneViewportService.resize();\r\n        setImageScrollBarHeight();\r\n      }\r\n    }, [elementRef]);\r\n\r\n    const cleanUpServices = useCallback(\r\n      viewportInfo => {\r\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n        const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n        toolGroupService.removeViewportFromToolGroup(viewportId, renderingEngineId);\r\n        syncGroupService.removeViewportFromSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n        segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n        viewportActionCornersService.clear(viewportId);\r\n      },\r\n      [\r\n        viewportId,\r\n        segmentationService,\r\n        syncGroupService,\r\n        toolGroupService,\r\n        viewportActionCornersService,\r\n      ]\r\n    );\r\n\r\n    const elementEnabledHandler = useCallback(\r\n      evt => {\r\n        // check this is this element reference and return early if doesn't match\r\n        if (evt.detail.element !== elementRef.current) {\r\n          return;\r\n        }\r\n\r\n        const { viewportId, element } = evt.detail;\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n        setEnabledElement(viewportId, element);\r\n        setEnabledVPElement(element);\r\n\r\n        const renderingEngineId = viewportInfo.getRenderingEngineId();\r\n        const toolGroupId = viewportInfo.getToolGroupId();\r\n        const syncGroups = viewportInfo.getSyncGroups();\r\n\r\n        toolGroupService.addViewportToToolGroup(viewportId, renderingEngineId, toolGroupId);\r\n\r\n        syncGroupService.addViewportToSyncGroup(viewportId, renderingEngineId, syncGroups);\r\n\r\n        // we don't need reactivity here so just use state\r\n        const { synchronizersStore } = useSynchronizersStore.getState();\r\n        if (synchronizersStore?.[viewportId]?.length && !isHangingProtocolLayout) {\r\n          // If the viewport used to have a synchronizer, re apply it again\r\n          _rehydrateSynchronizers(viewportId, syncGroupService);\r\n        }\r\n\r\n        if (onElementEnabled && typeof onElementEnabled === 'function') {\r\n          onElementEnabled(evt);\r\n        }\r\n      },\r\n      [viewportId, onElementEnabled, toolGroupService]\r\n    );\r\n\r\n    // disable the element upon unmounting\r\n    useEffect(() => {\r\n      cornerstoneViewportService.enableViewport(viewportId, elementRef.current);\r\n\r\n      eventTarget.addEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n\r\n      setImageScrollBarHeight();\r\n\r\n      return () => {\r\n        const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n        if (!viewportInfo) {\r\n          return;\r\n        }\r\n\r\n        cornerstoneViewportService.storePresentation({ viewportId });\r\n\r\n        // This should be done after the store presentation since synchronizers\r\n        // will get cleaned up and they need the viewportInfo to be present\r\n        cleanUpServices(viewportInfo);\r\n\r\n        if (onElementDisabled && typeof onElementDisabled === 'function') {\r\n          onElementDisabled(viewportInfo);\r\n        }\r\n\r\n        cornerstoneViewportService.disableElement(viewportId);\r\n\r\n        eventTarget.removeEventListener(Enums.Events.ELEMENT_ENABLED, elementEnabledHandler);\r\n      };\r\n    }, []);\r\n\r\n    // subscribe to displaySet metadata invalidation (updates)\r\n    // Currently, if the metadata changes we need to re-render the display set\r\n    // for it to take effect in the viewport. As we deal with scaling in the loading,\r\n    // we need to remove the old volume from the cache, and let the\r\n    // viewport to re-add it which will use the new metadata. Otherwise, the\r\n    // viewport will use the cached volume and the new metadata will not be used.\r\n    // Note: this approach does not actually end of sending network requests\r\n    // and it uses the network cache\r\n    useEffect(() => {\r\n      const { unsubscribe } = displaySetService.subscribe(\r\n        displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n        async ({\r\n          displaySetInstanceUID: invalidatedDisplaySetInstanceUID,\r\n          invalidateData,\r\n        }: Types.DisplaySetSeriesMetadataInvalidatedEvent) => {\r\n          if (!invalidateData) {\r\n            return;\r\n          }\r\n\r\n          const viewportInfo = cornerstoneViewportService.getViewportInfo(viewportId);\r\n\r\n          if (viewportInfo.hasDisplaySet(invalidatedDisplaySetInstanceUID)) {\r\n            const viewportData = viewportInfo.getViewportData();\r\n            const newViewportData = await cornerstoneCacheService.invalidateViewportData(\r\n              viewportData,\r\n              invalidatedDisplaySetInstanceUID,\r\n              dataSource,\r\n              displaySetService\r\n            );\r\n\r\n            const keepCamera = true;\r\n            cornerstoneViewportService.updateViewport(viewportId, newViewportData, keepCamera);\r\n          }\r\n        }\r\n      );\r\n      return () => {\r\n        unsubscribe();\r\n      };\r\n    }, [viewportId]);\r\n\r\n    useEffect(() => {\r\n      // handle the default viewportType to be stack\r\n      if (!viewportOptions.viewportType) {\r\n        viewportOptions.viewportType = STACK;\r\n      }\r\n\r\n      const loadViewportData = async () => {\r\n        const viewportData = await cornerstoneCacheService.createViewportData(\r\n          displaySets,\r\n          viewportOptions,\r\n          dataSource,\r\n          initialImageIndex\r\n        );\r\n\r\n        const presentations = getViewportPresentations(viewportId, viewportOptions);\r\n\r\n        let measurement;\r\n        if (cacheJumpToMeasurementEvent?.viewportId === viewportId) {\r\n          measurement = cacheJumpToMeasurementEvent.measurement;\r\n          // Delete the position presentation so that viewport navigates direct\r\n          presentations.positionPresentation = null;\r\n          cacheJumpToMeasurementEvent = null;\r\n        }\r\n\r\n        // Note: This is a hack to get the grid to re-render the OHIFCornerstoneViewport component\r\n        // Used for segmentation hydration right now, since the logic to decide whether\r\n        // a viewport needs to render a segmentation lives inside the CornerstoneViewportService\r\n        // so we need to re-render (force update via change of the needsRerendering) so that React\r\n        // does the diffing and decides we should render this again (although the id and element has not changed)\r\n        // so that the CornerstoneViewportService can decide whether to render the segmentation or not. Not that we reached here we can turn it off.\r\n        if (viewportOptions.needsRerendering) {\r\n          viewportOptions.needsRerendering = false;\r\n        }\r\n\r\n        cornerstoneViewportService.setViewportData(\r\n          viewportId,\r\n          viewportData,\r\n          viewportOptions,\r\n          displaySetOptions,\r\n          presentations\r\n        );\r\n\r\n        if (measurement) {\r\n          cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n        }\r\n      };\r\n\r\n      loadViewportData();\r\n    }, [viewportOptions, displaySets, dataSource]);\r\n\r\n    /**\r\n     * There are two scenarios for jump to click\r\n     * 1. Current viewports contain the displaySet that the annotation was drawn on\r\n     * 2. Current viewports don't contain the displaySet that the annotation was drawn on\r\n     * and we need to change the viewports displaySet for jumping.\r\n     * Since measurement_jump happens via events and listeners, the former case is handled\r\n     * by the measurement_jump direct callback, but the latter case is handled first by\r\n     * the viewportGrid to set the correct displaySet on the viewport, AND THEN we check\r\n     * the cache for jumping to see if there is any jump queued, then we jump to the correct slice.\r\n     */\r\n    useEffect(() => {\r\n      if (isJumpToMeasurementDisabled) {\r\n        return;\r\n      }\r\n\r\n      const unsubscribeFromJumpToMeasurementEvents = _subscribeToJumpToMeasurementEvents(\r\n        elementRef,\r\n        viewportId,\r\n        servicesManager\r\n      );\r\n\r\n      _checkForCachedJumpToMeasurementEvents(elementRef, viewportId, displaySets, servicesManager);\r\n\r\n      return () => {\r\n        unsubscribeFromJumpToMeasurementEvents();\r\n      };\r\n    }, [displaySets, elementRef, viewportId, isJumpToMeasurementDisabled, servicesManager]);\r\n\r\n    // Set up the window level action menu in the viewport action corners.\r\n    useEffect(() => {\r\n      // Doing an === check here because the default config value when not set is true\r\n      if (appConfig.addWindowLevelActionMenu === false) {\r\n        return;\r\n      }\r\n\r\n      const location = viewportActionCornersService.LOCATIONS.topRight;\r\n\r\n      // TODO: In the future we should consider using the customization service\r\n      // to determine if and in which corner various action components should go.\r\n      viewportActionCornersService.addComponent({\r\n        viewportId,\r\n        id: 'windowLevelActionMenu',\r\n        component: getWindowLevelActionMenu({\r\n          viewportId,\r\n          element: elementRef.current,\r\n          displaySets,\r\n          servicesManager,\r\n          commandsManager,\r\n          location,\r\n          verticalDirection: AllInOneMenu.VerticalDirection.TopToBottom,\r\n          horizontalDirection: AllInOneMenu.HorizontalDirection.RightToLeft,\r\n        }),\r\n        location,\r\n      });\r\n\r\n      viewportActionCornersService.addComponent({\r\n        viewportId,\r\n        id: 'segmentation',\r\n        component: getViewportDataOverlaySettingsMenu({\r\n          viewportId,\r\n          element: elementRef.current,\r\n          displaySets,\r\n          servicesManager,\r\n          commandsManager,\r\n          location,\r\n        }),\r\n        location,\r\n      });\r\n    }, [\r\n      displaySets,\r\n      viewportId,\r\n      viewportActionCornersService,\r\n      servicesManager,\r\n      commandsManager,\r\n      appConfig,\r\n    ]);\r\n\r\n    const { ref: resizeRef } = useResizeDetector({\r\n      onResize,\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"viewport-wrapper\">\r\n          <div\r\n            className=\"cornerstone-viewport-element\"\r\n            style={{ height: '100%', width: '100%' }}\r\n            onContextMenu={e => e.preventDefault()}\r\n            onMouseDown={e => e.preventDefault()}\r\n            ref={el => {\r\n              resizeRef.current = el;\r\n              elementRef.current = el;\r\n            }}\r\n          ></div>\r\n          <CornerstoneOverlays\r\n            viewportId={viewportId}\r\n            toolBarService={toolbarService}\r\n            element={elementRef.current}\r\n            scrollbarHeight={scrollbarHeight}\r\n            servicesManager={servicesManager}\r\n          />\r\n          <CinePlayer\r\n            enabledVPElement={enabledVPElement}\r\n            viewportId={viewportId}\r\n            servicesManager={servicesManager}\r\n          />\r\n          <ActiveViewportBehavior\r\n            viewportId={viewportId}\r\n            servicesManager={servicesManager}\r\n          />\r\n        </div>\r\n        {/* top offset of 24px to account for ViewportActionCorners. */}\r\n        <div className=\"absolute top-[24px] w-full\">\r\n          {viewportDialogState.viewportId === viewportId && (\r\n            <Notification\r\n              id=\"viewport-notification\"\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n              onKeyPress={viewportDialogState.onKeyPress}\r\n            />\r\n          )}\r\n        </div>\r\n        {/* The OHIFViewportActionCorners follows the viewport in the DOM so that it is naturally at a higher z-index.*/}\r\n        <OHIFViewportActionCorners viewportId={viewportId} />\r\n      </React.Fragment>\r\n    );\r\n  },\r\n  areEqual\r\n);\r\n\r\nfunction _subscribeToJumpToMeasurementEvents(elementRef, viewportId, servicesManager) {\r\n  const { measurementService, cornerstoneViewportService } = servicesManager.services;\r\n\r\n  const { unsubscribe } = measurementService.subscribe(\r\n    MeasurementService.EVENTS.JUMP_TO_MEASUREMENT_VIEWPORT,\r\n    props => {\r\n      cacheJumpToMeasurementEvent = props;\r\n      const { viewportId: jumpId, measurement, isConsumed } = props;\r\n      if (!measurement || isConsumed) {\r\n        return;\r\n      }\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport === undefined) {\r\n        // Decide on which viewport should handle this\r\n        cacheJumpToMeasurementEvent.cornerstoneViewport =\r\n          cornerstoneViewportService.getViewportIdToJump(jumpId, {\r\n            displaySetInstanceUID: measurement.displaySetInstanceUID,\r\n            ...measurement.metadata,\r\n            referencedImageId:\r\n              measurement.referencedImageId || measurement.metadata?.referencedImageId,\r\n          });\r\n      }\r\n      if (cacheJumpToMeasurementEvent.cornerstoneViewport !== viewportId) {\r\n        return;\r\n      }\r\n      _jumpToMeasurement(measurement, elementRef, viewportId, servicesManager);\r\n    }\r\n  );\r\n\r\n  return unsubscribe;\r\n}\r\n\r\n// Check if there is a queued jumpToMeasurement event\r\nfunction _checkForCachedJumpToMeasurementEvents(\r\n  elementRef,\r\n  viewportId,\r\n  displaySets,\r\n  servicesManager\r\n) {\r\n  if (!cacheJumpToMeasurementEvent) {\r\n    return;\r\n  }\r\n  if (cacheJumpToMeasurementEvent.isConsumed) {\r\n    cacheJumpToMeasurementEvent = null;\r\n    return;\r\n  }\r\n  const displaysUIDs = displaySets.map(displaySet => displaySet.displaySetInstanceUID);\r\n  if (!displaysUIDs?.length) {\r\n    return;\r\n  }\r\n\r\n  // Jump to measurement if the measurement exists\r\n  const { measurement } = cacheJumpToMeasurementEvent;\r\n  if (measurement && elementRef) {\r\n    if (displaysUIDs.includes(measurement?.displaySetInstanceUID)) {\r\n      _jumpToMeasurement(measurement, elementRef, viewportId, servicesManager);\r\n    }\r\n  }\r\n}\r\n\r\nfunction _jumpToMeasurement(measurement, targetElementRef, viewportId, servicesManager) {\r\n  const { viewportGridService } = servicesManager.services;\r\n\r\n  const targetElement = targetElementRef.current;\r\n\r\n  // Todo: setCornerstoneMeasurementActive should be handled by the toolGroupManager\r\n  //  to set it properly\r\n  // setCornerstoneMeasurementActive(measurement);\r\n\r\n  viewportGridService.setActiveViewportId(viewportId);\r\n\r\n  const enabledElement = getEnabledElement(targetElement);\r\n\r\n  if (enabledElement) {\r\n    // See how the jumpToSlice() of Cornerstone3D deals with imageIdx param.\r\n    const viewport = enabledElement.viewport as csTypes.IStackViewport | csTypes.IVolumeViewport;\r\n\r\n    const { metadata } = measurement;\r\n    if (!viewport.isReferenceViewable(metadata, { withNavigation: true, withOrientation: true })) {\r\n      console.log(\"Reference isn't viewable, postponing until updated\");\r\n      return;\r\n    }\r\n\r\n    viewport.setViewReference(metadata);\r\n\r\n    cs3DTools.annotation.selection.setAnnotationSelected(measurement.uid);\r\n    // Jump to measurement consumed, remove.\r\n    cacheJumpToMeasurementEvent?.consume?.();\r\n    cacheJumpToMeasurementEvent = null;\r\n  }\r\n}\r\n\r\nfunction _rehydrateSynchronizers(viewportId: string, syncGroupService: any) {\r\n  const { synchronizersStore } = useSynchronizersStore.getState();\r\n  const synchronizers = synchronizersStore[viewportId];\r\n\r\n  if (!synchronizers) {\r\n    return;\r\n  }\r\n\r\n  synchronizers.forEach(synchronizerObj => {\r\n    if (!synchronizerObj.id) {\r\n      return;\r\n    }\r\n\r\n    const { id, sourceViewports, targetViewports } = synchronizerObj;\r\n\r\n    const synchronizer = syncGroupService.getSynchronizer(id);\r\n\r\n    if (!synchronizer) {\r\n      return;\r\n    }\r\n\r\n    const sourceViewportInfo = sourceViewports.find(\r\n      sourceViewport => sourceViewport.viewportId === viewportId\r\n    );\r\n\r\n    const targetViewportInfo = targetViewports.find(\r\n      targetViewport => targetViewport.viewportId === viewportId\r\n    );\r\n\r\n    const isSourceViewportInSynchronizer = synchronizer\r\n      .getSourceViewports()\r\n      .find(sourceViewport => sourceViewport.viewportId === viewportId);\r\n\r\n    const isTargetViewportInSynchronizer = synchronizer\r\n      .getTargetViewports()\r\n      .find(targetViewport => targetViewport.viewportId === viewportId);\r\n\r\n    // if the viewport was previously a source viewport, add it again\r\n    if (sourceViewportInfo && !isSourceViewportInSynchronizer) {\r\n      synchronizer.addSource({\r\n        viewportId: sourceViewportInfo.viewportId,\r\n        renderingEngineId: sourceViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n\r\n    // if the viewport was previously a target viewport, add it again\r\n    if (targetViewportInfo && !isTargetViewportInSynchronizer) {\r\n      synchronizer.addTarget({\r\n        viewportId: targetViewportInfo.viewportId,\r\n        renderingEngineId: targetViewportInfo.renderingEngineId,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// Component displayName\r\nOHIFCornerstoneViewport.displayName = 'OHIFCornerstoneViewport';\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  if (nextProps.needsRerendering) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: needsRerendering');\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.displaySets.length !== nextProps.displaySets.length) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: displaySets length change');\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.orientation !== nextProps.viewportOptions.orientation) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: orientation change');\r\n    return false;\r\n  }\r\n\r\n  if (prevProps.viewportOptions.toolGroupId !== nextProps.viewportOptions.toolGroupId) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: toolGroupId change');\r\n    return false;\r\n  }\r\n\r\n  if (\r\n    nextProps.viewportOptions.viewportType &&\r\n    prevProps.viewportOptions.viewportType !== nextProps.viewportOptions.viewportType\r\n  ) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: viewportType change');\r\n    return false;\r\n  }\r\n\r\n  if (nextProps.viewportOptions.needsRerendering) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: viewportOptions.needsRerendering');\r\n    return false;\r\n  }\r\n\r\n  const prevDisplaySets = prevProps.displaySets;\r\n  const nextDisplaySets = nextProps.displaySets;\r\n\r\n  if (prevDisplaySets.length !== nextDisplaySets.length) {\r\n    console.debug('OHIFCornerstoneViewport: Rerender caused by: displaySets length mismatch');\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < prevDisplaySets.length; i++) {\r\n    const prevDisplaySet = prevDisplaySets[i];\r\n\r\n    const foundDisplaySet = nextDisplaySets.find(\r\n      nextDisplaySet =>\r\n        nextDisplaySet.displaySetInstanceUID === prevDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (!foundDisplaySet) {\r\n      console.debug('OHIFCornerstoneViewport: Rerender caused by: displaySet not found');\r\n      return false;\r\n    }\r\n\r\n    // check they contain the same image\r\n    if (foundDisplaySet.images?.length !== prevDisplaySet.images?.length) {\r\n      console.debug('OHIFCornerstoneViewport: Rerender caused by: images length mismatch');\r\n      return false;\r\n    }\r\n\r\n    // check if their imageIds are the same\r\n    if (foundDisplaySet.images?.length) {\r\n      for (let j = 0; j < foundDisplaySet.images.length; j++) {\r\n        if (foundDisplaySet.images[j].imageId !== prevDisplaySet.images[j].imageId) {\r\n          console.debug('OHIFCornerstoneViewport: Rerender caused by: imageId mismatch');\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Helper function to check if display sets have changed\r\nfunction haveDisplaySetsChanged(prevDisplaySets, currentDisplaySets) {\r\n  if (prevDisplaySets.length !== currentDisplaySets.length) {\r\n    return true;\r\n  }\r\n\r\n  return currentDisplaySets.some((currentDS, index) => {\r\n    const prevDS = prevDisplaySets[index];\r\n    return currentDS.displaySetInstanceUID !== prevDS.displaySetInstanceUID;\r\n  });\r\n}\r\n\r\nexport default OHIFCornerstoneViewport;\r\n","import { usePositionPresentationStore } from '../../stores/usePositionPresentationStore';\r\nimport { useLutPresentationStore } from '../../stores/useLutPresentationStore';\r\nimport { useSegmentationPresentationStore } from '../../stores/useSegmentationPresentationStore';\r\n\r\nexport function getViewportPresentations(\r\n  viewportId: string,\r\n  viewportOptions: AppTypes.ViewportGrid.GridViewportOptions\r\n) {\r\n  const { lutPresentationStore } = useLutPresentationStore.getState();\r\n  const { positionPresentationStore } = usePositionPresentationStore.getState();\r\n  const { segmentationPresentationStore } = useSegmentationPresentationStore.getState();\r\n\r\n  // NOTE: this is the new viewport state, we should not get the presentationIds from the cornerstoneViewportService\r\n  // since that has the old viewport state\r\n  const { presentationIds } = viewportOptions;\r\n\r\n  if (!presentationIds) {\r\n    return {\r\n      positionPresentation: null,\r\n      lutPresentation: null,\r\n      segmentationPresentation: null,\r\n    };\r\n  }\r\n\r\n  const { lutPresentationId, positionPresentationId, segmentationPresentationId } = presentationIds;\r\n\r\n  return {\r\n    positionPresentation: positionPresentationStore[positionPresentationId],\r\n    lutPresentation: lutPresentationStore[lutPresentationId],\r\n    segmentationPresentation: segmentationPresentationStore[segmentationPresentationId],\r\n  };\r\n}\r\n"],"names":["CornerstoneImageScrollbar","viewportData","viewportId","element","imageSliceData","setImageSliceData","scrollbarHeight","servicesManager","cineService","cornerstoneViewportService","services","useEffect","viewport","getCornerstoneViewport","VolumeViewport3D","imageIndex","getCurrentImageIdIndex","numberOfSlices","getNumberOfSlices","viewportType","eventId","Enums","STACK","STACK_VIEWPORT_SCROLL","ORTHOGRAPHIC","VOLUME_NEW_IMAGE","IMAGE_RENDERED","updateIndex","event","newImageIdIndex","detail","addEventListener","removeEventListener","React","ImageScrollbar","onChange","evt","onImageScrollbarChange","isCineEnabled","getState","stopClip","setCine","id","isPlaying","csUtils","debounceLoading","max","height","value","propTypes","PropTypes","isRequired","Element","getOrientationStringLPS","invertOrientationStringLPS","utilities","orientationMarkers","rotation","setRotation","useState","flipHorizontal","setFlipHorizontal","flipVertical","setFlipVertical","cameraModifiedListener","previousCamera","camera","undefined","CAMERA_MODIFIED","markers","useMemo","rowCosines","columnCosines","isDefaultValueSetForColumnCosine","imageId","data","imageIds","metaData","getEnabledElement","viewUp","viewPlaneNormal","getCamera","viewRight","vec3","rowString","columnString","oppositeRowString","top","left","right","bottom","_getOrientationMarkers","getViewportInfo","map","m","index","className","classNames","key","console","log","ViewportImageSliceLoadingIndicator","loading","setLoading","error","setError","loadIndicatorRef","useRef","imageIdToBeLoaded","setLoadingState","clearTimeout","current","setTimeout","setFinishLoadingState","setErrorState","IMAGE_LOAD_ERROR","STACK_NEW_IMAGE","props","setViewportData","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","viewportInfo","viewportOptions","customViewportProps","hideOverlays","ViewportImageScrollbar","CustomizableViewportOverlay","ViewportOrientationMarkers","RenderCinePlayer","newStackFrameRate","dynamicInfo","dynamicInfoProp","customizationService","component","CinePlayerComponent","CinePlayer","get","setDynamicInfo","handleTimePointIndexChange","volumeId","timePointIndex","numTimePoints","splittingTag","label","eventTarget","DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED","cache","getVolume","updateDynamicInfo","useCallback","frameRate","onClose","setIsCineEnabled","setViewportCineClosed","onPlayPauseChange","onFrameRateChange","enabledVPElement","displaySetService","viewportGridService","cines","useCine","setNewStackFrameRate","appConfig","useAppConfig","isMountedRef","cineHandler","validFrameRate","Math","playClip","framesPerSecond","newDisplaySetHandler","viewports","displaySetInstanceUIDs","forEach","displaySetInstanceUID","displaySet","getDisplaySetByUID","FrameRate","round","autoPlayCine","isDynamicVolume","dynamicVolumeInfo","timePoints","length","VIEWPORT_NEW_IMAGE_SET","VOLUME_VIEWPORT_NEW_VOLUME","cine","viewportActionCornersState","useViewportActionCornersContext","ViewportActionCorners","cornerComponents","Colormap","colormaps","displaySets","commandsManager","activeDisplaySet","setActiveDisplaySet","showPreview","setShowPreview","prePreviewColormap","setPrePreviewColormap","showPreviewRef","prePreviewColormapRef","activeDisplaySetRef","onSetColorLUT","opacity","includes","colormap","name","run","commandName","commandOptions","immediate","context","buttons","children","Modality","style","minWidth","fontSize","textAlign","display","justifyContent","alignItems","ButtonGroup","onActiveIndexChange","activeIndex","findIndex","ds","SwitchButton","checked","AllInOneMenu","description","onClick","onMouseEnter","getViewportColormap","StackViewport","getProperties","find","c","Name","actorEntries","getActors","actorEntry","entry","referencedId","onMouseLeave","setViewportColorbar","colorbarOptions","backgroundColor","getViewportOptions","background","ticks","position","font","color","maxNumTicks","tickSize","tickWidth","labelMargin","push","VolumeViewport","options","Colorbar","colorbarProperties","colorbarService","width","colorbarWidth","colorbarTickPosition","colorbarContainerPosition","colorbarInitialColormap","showColorbar","setShowColorbar","hasColorbar","onSetColorbar","activeColormapName","STATE_CHANGED","updateColorbarState","WindowLevel","presets","t","useTranslation","onSetWindowLevel","modalityPresets","modalityIndex","Object","entries","modality","presetsArray","preset","secondaryLabel","window","level","VolumeRenderingPresetsContent","filteredPresets","setFilteredPresets","searchValue","setSearchValue","selectedPreset","setSelectedPreset","handleSearchChange","filtered","filter","toLowerCase","handleApply","runCommand","InputFilterText","onDebounceChange","placeholder","Icon","maxChars","slice","formatLabel","Button","size","ButtonEnums","medium","type","secondary","VolumeRenderingPresets","volumeRenderingPresets","uiModalService","icon","rightIcon","onClickPresets","show","content","title","movable","contentProps","hide","containerDimensions","contentDimensions","VolumeRenderingQuality","volumeRenderingQualityRange","min","step","quality","setQuality","volumeQuality","actor","mapper","getMapper","spacing","getInputData","getSpacing","sampleDistance","getSampleDistance","averageSpacing","reduce","a","b","sqrt","htmlFor","e","parseInt","target","percentage","calculateBackground","VolumeShift","minShift","setMinShift","maxShift","setMaxShift","shift","setShift","shiftedBy","setStep","isBlocking","setIsBlocking","prevShiftRef","ofun","getProperty","getScalarOpacity","range","getRange","transferFunctionWidth","pow","floor","log10","onChangeRange","newShift","shiftDifference","shiftValue","onMouseDown","onMouseUp","VolumeLighting","ambient","setAmbient","diffuse","setDiffuse","specular","setSpecular","onAmbientChange","onDiffuseChange","onSpecularChange","getAmbient","getDiffuse","getSpecular","VolumeShade","shade","setShade","setKey","onShadeChange","getShade","VolumeRenderingOptions","nonWLModalities","WindowLevelActionMenu","verticalDirection","horizontalDirection","isLight","viewportGrid","useViewportGrid","activeViewportId","vpHeight","setVpHeight","clientHeight","menuKey","setMenuKey","is3DVolume","setIs3DVolume","newVpHeight","removeColorbar","iconClassName","menuStyle","maxHeight","onVisibilityChange","itemLabel","itemIcon","getWindowLevelActionMenu","displaySetPresets","segmentationService","activeSegmentations","setActiveSegmentations","availableSegmentations","setAvailableSegmentations","updateSegmentations","active","getSegmentationRepresentations","available","getSegmentations","seg","some","activeSeg","segmentationId","subscriptions","SEGMENTATION_MODIFIED","SEGMENTATION_REMOVED","SEGMENTATION_REPRESENTATION_MODIFIED","subscription","toggleSegmentationRepresentationVisibility","SegmentationRepresentations","Labelmap","segmentation","variant","removeSegmentationFromViewport","removeSegmentationRepresentations","Icons","Minus","visible","Hide","Show","Separator","addSegmentationRepresentation","addSegmentationToViewport","Plus","ViewportSegmentationMenuWrapper","location","viewportActionCornersService","segmentations","useSegmentations","isActiveViewport","getActiveViewportId","align","side","getAlignAndSide","Popover","PopoverTrigger","asChild","ViewportViews","PopoverContent","alignOffset","sideOffset","ViewportSegmentationMenu","ViewportActionCornersLocations","LOCATIONS","topLeft","topRight","bottomLeft","bottomRight","debug","getViewportDataOverlaySettingsMenu","MODALITIES_REQUIRING_CINE_AUTO_MOUNT","ActiveViewportBehavior","memo","setActiveViewportId","ACTIVE_VIEWPORT_ID_CHANGED","isViewportCineClosed","getDisplaySetsUIDsForViewport","uid","modalities","sourceModalities","getModeCustomization","arePropsEqual","prevProps","nextProps","displayName","cacheJumpToMeasurementEvent","OHIFCornerstoneViewport","dataSource","displaySetOptions","onElementEnabled","onElementDisabled","isJumpToMeasurementDisabled","initialImageIndex","isHangingProtocolLayout","Error","isReconstructable","setScrollbarHeight","setEnabledVPElement","elementRef","toolbarService","toolGroupService","syncGroupService","cornerstoneCacheService","viewportDialogState","useViewportDialog","setImageScrollBarHeight","onResize","resize","cleanUpServices","renderingEngineId","getRenderingEngineId","syncGroups","getSyncGroups","removeViewportFromToolGroup","removeViewportFromSyncGroup","clearSegmentationRepresentations","clear","elementEnabledHandler","setEnabledElement","toolGroupId","getToolGroupId","addViewportToToolGroup","addViewportToSyncGroup","synchronizersStore","useSynchronizersStore","synchronizers","synchronizerObj","sourceViewports","targetViewports","synchronizer","getSynchronizer","sourceViewportInfo","sourceViewport","targetViewportInfo","targetViewport","isSourceViewportInSynchronizer","getSourceViewports","isTargetViewportInSynchronizer","getTargetViewports","addSource","addTarget","_rehydrateSynchronizers","enableViewport","ELEMENT_ENABLED","storePresentation","disableElement","DISPLAY_SET_SERIES_METADATA_INVALIDATED","async","invalidatedDisplaySetInstanceUID","invalidateData","hasDisplaySet","getViewportData","newViewportData","invalidateViewportData","keepCamera","updateViewport","createViewportData","presentations","lutPresentationStore","useLutPresentationStore","positionPresentationStore","usePositionPresentationStore","segmentationPresentationStore","useSegmentationPresentationStore","presentationIds","positionPresentation","lutPresentation","segmentationPresentation","lutPresentationId","positionPresentationId","segmentationPresentationId","getViewportPresentations","measurement","needsRerendering","cs3DTools","loadViewportData","unsubscribeFromJumpToMeasurementEvents","measurementService","MeasurementService","JUMP_TO_MEASUREMENT_VIEWPORT","jumpId","isConsumed","cornerstoneViewport","getViewportIdToJump","metadata","referencedImageId","_jumpToMeasurement","_subscribeToJumpToMeasurementEvents","displaysUIDs","_checkForCachedJumpToMeasurementEvents","addWindowLevelActionMenu","addComponent","TopToBottom","RightToLeft","ref","resizeRef","useResizeDetector","onContextMenu","preventDefault","el","CornerstoneOverlays","toolBarService","Notification","message","actions","onSubmit","onOutsideClick","onKeyPress","OHIFViewportActionCorners","areEqual","targetElementRef","targetElement","enabledElement","isReferenceViewable","withNavigation","withOrientation","setViewReference","consume","orientation","prevDisplaySets","nextDisplaySets","i","prevDisplaySet","foundDisplaySet","nextDisplaySet","images","j"],"sourceRoot":""}