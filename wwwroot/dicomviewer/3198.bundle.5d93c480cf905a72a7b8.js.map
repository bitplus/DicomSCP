{"version":3,"file":"3198.bundle.5d93c480cf905a72a7b8.js","mappings":"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","sources":["webpack:///../../../extensions/tmtv/src/id.js","webpack:///../../../extensions/tmtv/src/utils/hpViewports.ts","webpack:///../../../extensions/tmtv/src/getHangingProtocolModule.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelPetSUV.tsx","webpack:///../../../extensions/tmtv/src/utils/handleROIThresholding.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/index.ts","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/PanelROIThresholdExport.tsx","webpack:///../../../extensions/tmtv/src/Panels/PanelTMTV.tsx","webpack:///../../../extensions/tmtv/src/getPanelModule.tsx","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/constants/supportedTools.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/RectangleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/CircleROIStartEndThreshold.js","webpack:///../../../extensions/tmtv/src/utils/measurementServiceMappings/measurementServiceMappingsFactory.js","webpack:///../../../extensions/tmtv/src/init.js","webpack:///../../../extensions/tmtv/src/utils/getThresholdValue.ts","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/dicomRTAnnotationExport.js","webpack:///../../../extensions/tmtv/src/utils/dicomRTAnnotationExport/RTStructureSet/index.js","webpack:///../../../extensions/tmtv/src/commandsModule.ts","webpack:///../../../extensions/tmtv/src/utils/createAndDownloadTMTVReport.js","webpack:///../../../extensions/tmtv/src/Panels/PanelROIThresholdSegmentation/ROIThresholdConfiguration.tsx","webpack:///../../../extensions/tmtv/src/Panels/RectangleROIOptions.tsx","webpack:///../../../extensions/tmtv/src/index.tsx","webpack:///../../../extensions/tmtv/src/getToolbarModule.tsx"],"sourcesContent":["import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n","// Common sync group configurations\r\nconst cameraPositionSync = (id: string) => ({\r\n  type: 'cameraPosition',\r\n  id,\r\n  source: true,\r\n  target: true,\r\n});\r\n\r\nconst hydrateSegSync = {\r\n  type: 'hydrateseg',\r\n  id: 'sameFORId',\r\n  source: true,\r\n  target: true,\r\n  options: {\r\n    matchingRules: ['sameFOR'],\r\n  },\r\n};\r\n\r\nconst ctAXIAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ctAXIAL',\r\n    viewportType: 'volume',\r\n    orientation: 'axial',\r\n    toolGroupId: 'ctToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      cameraPositionSync('axialSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ctSAGITTAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ctSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    toolGroupId: 'ctToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('sagittalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ctCORONAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ctCORONAL',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    toolGroupId: 'ctToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('coronalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptAXIAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ptAXIAL',\r\n    viewportType: 'volume',\r\n    background: [1, 1, 1],\r\n    orientation: 'axial',\r\n    toolGroupId: 'ptToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      cameraPositionSync('axialSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptSAGITTAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ptSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'ptToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('sagittalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst ptCORONAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'ptCORONAL',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'ptToolGroup',\r\n    syncGroups: [\r\n      cameraPositionSync('coronalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionAXIAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionAXIAL',\r\n    viewportType: 'volume',\r\n    orientation: 'axial',\r\n    toolGroupId: 'fusionToolGroup',\r\n    initialImageOptions: {\r\n      // index: 5,\r\n      preset: 'first', // 'first', 'last', 'middle'\r\n    },\r\n    syncGroups: [\r\n      cameraPositionSync('axialSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.8 },\r\n            { value: 1, opacity: 0.9 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionSAGITTAL = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionSAGITTAL',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    toolGroupId: 'fusionToolGroup',\r\n    // initialImageOptions: {\r\n    //   index: 180,\r\n    //   preset: 'middle', // 'first', 'last', 'middle'\r\n    // },\r\n    syncGroups: [\r\n      cameraPositionSync('sagittalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.8 },\r\n            { value: 1, opacity: 0.9 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst fusionCORONAL = {\r\n  viewportOptions: {\r\n    viewportId: 'fusionCoronal',\r\n    viewportType: 'volume',\r\n    orientation: 'coronal',\r\n    toolGroupId: 'fusionToolGroup',\r\n    // initialImageOptions: {\r\n    //   index: 180,\r\n    //   preset: 'middle', // 'first', 'last', 'middle'\r\n    // },\r\n    syncGroups: [\r\n      cameraPositionSync('coronalSync'),\r\n      {\r\n        type: 'voi',\r\n        id: 'ctWLSync',\r\n        source: false,\r\n        target: true,\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'fusionWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: false,\r\n        target: true,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n  },\r\n  displaySets: [\r\n    {\r\n      id: 'ctDisplaySet',\r\n    },\r\n    {\r\n      id: 'ptDisplaySet',\r\n      options: {\r\n        colormap: {\r\n          name: 'hsv',\r\n          opacity: [\r\n            { value: 0, opacity: 0 },\r\n            { value: 0.1, opacity: 0.8 },\r\n            { value: 1, opacity: 0.9 },\r\n          ],\r\n        },\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nconst mipSAGITTAL: AppTypes.HangingProtocol.Viewport = {\r\n  viewportOptions: {\r\n    viewportId: 'mipSagittal',\r\n    viewportType: 'volume',\r\n    orientation: 'sagittal',\r\n    background: [1, 1, 1],\r\n    toolGroupId: 'mipToolGroup',\r\n    syncGroups: [\r\n      {\r\n        type: 'voi',\r\n        id: 'ptWLSync',\r\n        source: true,\r\n        target: true,\r\n        options: {\r\n          syncColormap: true,\r\n        },\r\n      },\r\n      {\r\n        type: 'voi',\r\n        id: 'ptFusionWLSync',\r\n        source: true,\r\n        target: false,\r\n        options: {\r\n          syncColormap: false,\r\n          syncInvertState: false,\r\n        },\r\n      },\r\n      hydrateSegSync,\r\n    ],\r\n\r\n    // Custom props can be used to set custom properties which extensions\r\n    // can react on.\r\n    customViewportProps: {\r\n      // We use viewportDisplay to filter the viewports which are displayed\r\n      // in mip and we set the scrollbar according to their rotation index\r\n      // in the cornerstone extension.\r\n      hideOverlays: true,\r\n    },\r\n  },\r\n  displaySets: [\r\n    {\r\n      options: {\r\n        blendMode: 'MIP',\r\n        slabThickness: 'fullVolume',\r\n        voi: {\r\n          custom: 'getPTVOIRange',\r\n        },\r\n        voiInverted: true,\r\n      },\r\n      id: 'ptDisplaySet',\r\n    },\r\n  ],\r\n};\r\n\r\nexport {\r\n  ctAXIAL,\r\n  ctSAGITTAL,\r\n  ctCORONAL,\r\n  ptAXIAL,\r\n  ptSAGITTAL,\r\n  ptCORONAL,\r\n  fusionAXIAL,\r\n  fusionSAGITTAL,\r\n  fusionCORONAL,\r\n  mipSAGITTAL,\r\n};\r\n","import {\r\n  ctAXIAL,\r\n  ctCORONAL,\r\n  ctSAGITTAL,\r\n  fusionAXIAL,\r\n  fusionCORONAL,\r\n  fusionSAGITTAL,\r\n  mipSAGITTAL,\r\n  ptAXIAL,\r\n  ptCORONAL,\r\n  ptSAGITTAL,\r\n} from './utils/hpViewports';\r\n\r\n/**\r\n * represents a 3x4 viewport layout configuration. The layout displays CT axial, sagittal, and coronal\r\n * images in the first row, PT axial, sagittal, and coronal images in the second row, and fusion axial,\r\n * sagittal, and coronal images in the third row. The fourth column is fully spanned by a MIP sagittal\r\n * image, covering all three rows. It has synchronizers for windowLevel for all CT and PT images, and\r\n * also camera synchronizer for each orientation\r\n */\r\nconst stage1: AppTypes.HangingProtocol.ProtocolStage = {\r\n  name: 'default',\r\n  id: 'default',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 3,\r\n      columns: 4,\r\n      layoutOptions: [\r\n        {\r\n          x: 0,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 1 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 2 / 3,\r\n          width: 1 / 4,\r\n          height: 1 / 3,\r\n        },\r\n        {\r\n          x: 3 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  viewports: [\r\n    ctAXIAL,\r\n    ctSAGITTAL,\r\n    ctCORONAL,\r\n    ptAXIAL,\r\n    ptSAGITTAL,\r\n    ptCORONAL,\r\n    fusionAXIAL,\r\n    fusionSAGITTAL,\r\n    fusionCORONAL,\r\n    mipSAGITTAL,\r\n  ],\r\n  createdDate: '2021-02-23T18:32:42.850Z',\r\n};\r\n\r\n/**\r\n * The layout displays CT axial image in the top-left viewport, fusion axial image\r\n * in the top-right viewport, PT axial image in the bottom-left viewport, and MIP\r\n * sagittal image in the bottom-right viewport. The layout follows a simple grid\r\n * pattern with 2 rows and 2 columns. It includes synchronizers as well.\r\n */\r\nconst stage2 = {\r\n  name: 'Fusion 2x2',\r\n  id: 'Fusion-2x2',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 2,\r\n    },\r\n  },\r\n  viewports: [ctAXIAL, fusionAXIAL, ptAXIAL, mipSAGITTAL],\r\n};\r\n\r\n/**\r\n * The top row displays CT images in axial, sagittal, and coronal orientations from\r\n * left to right, respectively. The bottom row displays PT images in axial, sagittal,\r\n * and coronal orientations from left to right, respectively.\r\n * The layout follows a simple grid pattern with 2 rows and 3 columns.\r\n * It includes synchronizers as well.\r\n */\r\nconst stage3: AppTypes.HangingProtocol.ProtocolStage = {\r\n  name: '2x3-layout',\r\n  id: '2x3-layout',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 3,\r\n    },\r\n  },\r\n  viewports: [ctAXIAL, ctSAGITTAL, ctCORONAL, ptAXIAL, ptSAGITTAL, ptCORONAL],\r\n};\r\n\r\n/**\r\n * In this layout, the top row displays PT images in coronal, sagittal, and axial\r\n * orientations from left to right, respectively, followed by a MIP sagittal image\r\n * that spans both rows on the rightmost side. The bottom row displays fusion images\r\n * in coronal, sagittal, and axial orientations from left to right, respectively.\r\n * There is no viewport in the bottom row's rightmost position, as the MIP sagittal viewport\r\n * from the top row spans the full height of both rows.\r\n * It includes synchronizers as well.\r\n */\r\nconst stage4: AppTypes.HangingProtocol.ProtocolStage = {\r\n  name: '2x4-layout',\r\n  id: '2x4-layout',\r\n  viewportStructure: {\r\n    layoutType: 'grid',\r\n    properties: {\r\n      rows: 2,\r\n      columns: 4,\r\n      layoutOptions: [\r\n        {\r\n          x: 0,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 3 / 4,\r\n          y: 0,\r\n          width: 1 / 4,\r\n          height: 1,\r\n        },\r\n        {\r\n          x: 0,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 1 / 4,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n        {\r\n          x: 2 / 4,\r\n          y: 1 / 2,\r\n          width: 1 / 4,\r\n          height: 1 / 2,\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  viewports: [\r\n    ptCORONAL,\r\n    ptSAGITTAL,\r\n    ptAXIAL,\r\n    mipSAGITTAL,\r\n    fusionCORONAL,\r\n    fusionSAGITTAL,\r\n    fusionAXIAL,\r\n  ],\r\n};\r\n\r\n/**\r\n * This layout displays three fusion viewports: axial, sagittal, and coronal.\r\n * It follows a simple grid pattern with 1 row and 3 columns.\r\n */\r\n// const stage0: AppTypes.HangingProtocol.ProtocolStage = {\r\n//   name: 'Fusion 1x3',\r\n//   viewportStructure: {\r\n//     layoutType: 'grid',\r\n//     properties: {\r\n//       rows: 1,\r\n//       columns: 3,\r\n//     },\r\n//   },\r\n//   viewports: [fusionAXIAL, fusionSAGITTAL, fusionCORONAL],\r\n// };\r\n\r\nconst ptCT: AppTypes.HangingProtocol.Protocol = {\r\n  id: '@ohif/extension-tmtv.hangingProtocolModule.ptCT',\r\n  locked: true,\r\n  name: 'Default',\r\n  createdDate: '2021-02-23T19:22:08.894Z',\r\n  modifiedDate: '2022-10-04T19:22:08.894Z',\r\n  availableTo: {},\r\n  editableBy: {},\r\n  imageLoadStrategy: 'interleaveTopToBottom', // \"default\" , \"interleaveTopToBottom\",  \"interleaveCenter\"\r\n  protocolMatchingRules: [\r\n    {\r\n      attribute: 'ModalitiesInStudy',\r\n      constraint: {\r\n        contains: ['CT', 'PT'],\r\n      },\r\n    },\r\n    {\r\n      attribute: 'StudyDescription',\r\n      constraint: {\r\n        contains: 'PETCT',\r\n      },\r\n    },\r\n    {\r\n      attribute: 'StudyDescription',\r\n      constraint: {\r\n        contains: 'PET/CT',\r\n      },\r\n    },\r\n  ],\r\n  displaySetSelectors: {\r\n    ctDisplaySet: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: {\r\n              value: 'CT',\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'CT',\r\n          },\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'CT WB',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    ptDisplaySet: {\r\n      seriesMatchingRules: [\r\n        {\r\n          attribute: 'Modality',\r\n          constraint: {\r\n            equals: 'PT',\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'isReconstructable',\r\n          constraint: {\r\n            equals: {\r\n              value: true,\r\n            },\r\n          },\r\n          required: true,\r\n        },\r\n        {\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            contains: 'Corrected',\r\n          },\r\n        },\r\n        {\r\n          weight: 2,\r\n          attribute: 'SeriesDescription',\r\n          constraint: {\r\n            doesNotContain: {\r\n              value: 'Uncorrected',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  stages: [stage1, stage2, stage3, stage4],\r\n  numberOfPriorsReferenced: -1,\r\n};\r\n\r\nfunction getHangingProtocolModule() {\r\n  return [\r\n    {\r\n      name: ptCT.id,\r\n      protocol: ptCT,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getHangingProtocolModule;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { PanelSection, Input, Button } from '@ohif/ui';\r\nimport { DicomMetadataStore } from '@ohif/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Separator } from '@ohif/ui-next';\r\n\r\nconst DEFAULT_MEATADATA = {\r\n  PatientWeight: null,\r\n  PatientSex: null,\r\n  SeriesTime: null,\r\n  RadiopharmaceuticalInformationSequence: {\r\n    RadionuclideTotalDose: null,\r\n    RadionuclideHalfLife: null,\r\n    RadiopharmaceuticalStartTime: null,\r\n  },\r\n};\r\n\r\n/*\r\n * PETSUV panel enables the user to modify the patient related information, such as\r\n * patient sex, patientWeight. This is allowed since\r\n * sometimes these metadata are missing or wrong. By changing them\r\n * @param param0\r\n * @returns\r\n */\r\nexport default function PanelPetSUV({ servicesManager, commandsManager }: withAppTypes) {\r\n  const { t } = useTranslation('PanelSUV');\r\n  const { displaySetService, toolGroupService, toolbarService, hangingProtocolService } =\r\n    servicesManager.services;\r\n  const [metadata, setMetadata] = useState(DEFAULT_MEATADATA);\r\n  const [ptDisplaySet, setPtDisplaySet] = useState(null);\r\n\r\n  const handleMetadataChange = metadata => {\r\n    setMetadata(prevState => {\r\n      const newState = { ...prevState };\r\n      Object.keys(metadata).forEach(key => {\r\n        if (typeof metadata[key] === 'object') {\r\n          newState[key] = {\r\n            ...prevState[key],\r\n            ...metadata[key],\r\n          };\r\n        } else {\r\n          newState[key] = metadata[key];\r\n        }\r\n      });\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const getMatchingPTDisplaySet = viewportMatchDetails => {\r\n    const ptDisplaySet = commandsManager.runCommand('getMatchingPTDisplaySet', {\r\n      viewportMatchDetails,\r\n    });\r\n\r\n    if (!ptDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const metadata = commandsManager.runCommand('getPTMetadata', {\r\n      ptDisplaySet,\r\n    });\r\n\r\n    return {\r\n      ptDisplaySet,\r\n      metadata,\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    const displaySets = displaySetService.getActiveDisplaySets();\r\n    const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n    if (!displaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\r\n\r\n    if (!displaySetInfo) {\r\n      return;\r\n    }\r\n\r\n    const { ptDisplaySet, metadata } = displaySetInfo;\r\n    setPtDisplaySet(ptDisplaySet);\r\n    setMetadata(metadata);\r\n  }, []);\r\n\r\n  // get the patientMetadata from the StudyInstanceUIDs and update the state\r\n  useEffect(() => {\r\n    const { unsubscribe } = hangingProtocolService.subscribe(\r\n      hangingProtocolService.EVENTS.PROTOCOL_CHANGED,\r\n      ({ viewportMatchDetails }) => {\r\n        const displaySetInfo = getMatchingPTDisplaySet(viewportMatchDetails);\r\n\r\n        if (!displaySetInfo) {\r\n          return;\r\n        }\r\n        const { ptDisplaySet, metadata } = displaySetInfo;\r\n        setPtDisplaySet(ptDisplaySet);\r\n        setMetadata(metadata);\r\n      }\r\n    );\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  function updateMetadata() {\r\n    if (!ptDisplaySet) {\r\n      throw new Error('No ptDisplaySet found');\r\n    }\r\n\r\n    // metadata should be dcmjs naturalized\r\n    DicomMetadataStore.updateMetadataForSeries(\r\n      ptDisplaySet.StudyInstanceUID,\r\n      ptDisplaySet.SeriesInstanceUID,\r\n      metadata\r\n    );\r\n\r\n    // update the displaySets\r\n    displaySetService.setDisplaySetMetadataInvalidated(ptDisplaySet.displaySetInstanceUID);\r\n\r\n    // Crosshair position depends on the metadata values such as the positioning interaction\r\n    // between series, so when the metadata is updated, the crosshairs need to be reset.\r\n    setTimeout(() => {\r\n      commandsManager.runCommand('resetCrosshairs');\r\n    }, 0);\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\r\n        <div className=\"flex min-h-0 flex-1 flex-col bg-black text-[13px] font-[300]\">\r\n          <PanelSection title={t('Patient Information')}>\r\n            <div className=\"flex flex-col\">\r\n              <div className=\"bg-primary-dark flex flex-col gap-4 p-2\">\r\n                <Input\r\n                  containerClassName={'!flex-row !justify-between items-center'}\r\n                  label={t('Patient Sex')}\r\n                  labelClassName=\"text-[13px] font-inter text-white\"\r\n                  className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                  value={metadata.PatientSex || ''}\r\n                  onChange={e => {\r\n                    handleMetadataChange({\r\n                      PatientSex: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n                <Input\r\n                  containerClassName={'!flex-row !justify-between items-center'}\r\n                  label={t('Weight')}\r\n                  labelChildren={<span className=\"text-aqua-pale\"> kg</span>}\r\n                  labelClassName=\"text-[13px] font-inter text-white\"\r\n                  className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                  value={metadata.PatientWeight || ''}\r\n                  onChange={e => {\r\n                    handleMetadataChange({\r\n                      PatientWeight: e.target.value,\r\n                    });\r\n                  }}\r\n                  id=\"weight-input\"\r\n                />\r\n                <Input\r\n                  containerClassName={'!flex-row !justify-between items-center'}\r\n                  label={t('Total Dose')}\r\n                  labelChildren={<span className=\"text-aqua-pale\"> bq</span>}\r\n                  labelClassName=\"text-[13px] font-inter text-white\"\r\n                  className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                  value={\r\n                    metadata.RadiopharmaceuticalInformationSequence.RadionuclideTotalDose || ''\r\n                  }\r\n                  onChange={e => {\r\n                    handleMetadataChange({\r\n                      RadiopharmaceuticalInformationSequence: {\r\n                        RadionuclideTotalDose: e.target.value,\r\n                      },\r\n                    });\r\n                  }}\r\n                />\r\n                <Input\r\n                  containerClassName={'!flex-row !justify-between items-center'}\r\n                  label={t('Half Life')}\r\n                  labelChildren={<span className=\"text-aqua-pale\"> s</span>}\r\n                  labelClassName=\"text-[13px] font-inter text-white\"\r\n                  className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                  value={metadata.RadiopharmaceuticalInformationSequence.RadionuclideHalfLife || ''}\r\n                  onChange={e => {\r\n                    handleMetadataChange({\r\n                      RadiopharmaceuticalInformationSequence: {\r\n                        RadionuclideHalfLife: e.target.value,\r\n                      },\r\n                    });\r\n                  }}\r\n                />\r\n                <Input\r\n                  containerClassName={'!flex-row !justify-between items-center'}\r\n                  label={t('Injection Time')}\r\n                  labelChildren={<span className=\"text-aqua-pale\"> s</span>}\r\n                  labelClassName=\"text-[13px] font-inter text-white\"\r\n                  className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                  value={\r\n                    metadata.RadiopharmaceuticalInformationSequence.RadiopharmaceuticalStartTime ||\r\n                    ''\r\n                  }\r\n                  onChange={e => {\r\n                    handleMetadataChange({\r\n                      RadiopharmaceuticalInformationSequence: {\r\n                        RadiopharmaceuticalStartTime: e.target.value,\r\n                      },\r\n                    });\r\n                  }}\r\n                />\r\n                <Input\r\n                  containerClassName={'!flex-row !justify-between items-center'}\r\n                  label={t('Acquisition Time')}\r\n                  labelChildren={<span className=\"text-aqua-pale\"> s</span>}\r\n                  labelClassName=\"text-[13px] font-inter text-white\"\r\n                  className=\"!m-0 !h-[26px] !w-[117px]\"\r\n                  value={metadata.SeriesTime || ''}\r\n                  onChange={() => {}}\r\n                />\r\n                <Button\r\n                  className=\"!h-[26px] !w-[115px] self-end !p-0\"\r\n                  onClick={updateMetadata}\r\n                >\r\n                  Reload Data\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </PanelSection>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nPanelPetSUV.propTypes = {\r\n  servicesManager: PropTypes.shape({\r\n    services: PropTypes.shape({\r\n      measurementService: PropTypes.shape({\r\n        getMeasurements: PropTypes.func.isRequired,\r\n        subscribe: PropTypes.func.isRequired,\r\n        EVENTS: PropTypes.object.isRequired,\r\n        VALUE_TYPES: PropTypes.object.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n};\r\n","import { Segment, Segmentation } from '@cornerstonejs/tools/types';\r\nimport { triggerEvent, eventTarget, Enums } from '@cornerstonejs/core';\r\n\r\nexport const handleROIThresholding = async ({\r\n  segmentationId,\r\n  commandsManager,\r\n  segmentationService,\r\n}: withAppTypes<{\r\n  segmentationId: string;\r\n}>) => {\r\n  const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\r\n    progress: 0,\r\n    type: 'Calculate Lesion Stats',\r\n    id: segmentationId,\r\n  });\r\n\r\n  // re-calculating the cached stats for the active segmentation\r\n  const updatedPerSegmentCachedStats = {};\r\n  for (const [segmentIndex, segment] of Object.entries(segmentation.segments)) {\r\n    if (!segment) {\r\n      continue;\r\n    }\r\n\r\n    const numericSegmentIndex = Number(segmentIndex);\r\n\r\n    const lesionStats = await commandsManager.run('getLesionStats', {\r\n      segmentationId,\r\n      segmentIndex: numericSegmentIndex,\r\n    });\r\n\r\n    const suvPeak = await commandsManager.run('calculateSuvPeak', {\r\n      segmentationId,\r\n      segmentIndex: numericSegmentIndex,\r\n    });\r\n\r\n    const lesionGlyoclysisStats = lesionStats.volume * lesionStats.meanValue;\r\n\r\n    // update segDetails with the suv peak for the active segmentation\r\n    const cachedStats = {\r\n      lesionStats,\r\n      suvPeak,\r\n      lesionGlyoclysisStats,\r\n    };\r\n\r\n    const updatedSegment: Segment = {\r\n      ...segment,\r\n      cachedStats: {\r\n        ...segment.cachedStats,\r\n        ...cachedStats,\r\n      },\r\n    };\r\n\r\n    updatedPerSegmentCachedStats[numericSegmentIndex] = cachedStats;\r\n\r\n    segmentation.segments[segmentIndex] = updatedSegment;\r\n  }\r\n\r\n  // all available segmentations\r\n  const segmentations = segmentationService.getSegmentations();\r\n  const tmtv = await commandsManager.run('calculateTMTV', { segmentations });\r\n\r\n  triggerEvent(eventTarget, Enums.Events.WEB_WORKER_PROGRESS, {\r\n    progress: 100,\r\n    type: 'Calculate Lesion Stats',\r\n    id: segmentationId,\r\n  });\r\n\r\n  // add the tmtv to all the segment cachedStats, although it is a global\r\n  // value but we don't have any other way to display it for now\r\n  // Update all segmentations with the calculated TMTV\r\n  segmentations.forEach(segmentation => {\r\n    segmentation.cachedStats = {\r\n      ...segmentation.cachedStats,\r\n      tmtv,\r\n    };\r\n\r\n    // Update each segment within the segmentation\r\n    Object.keys(segmentation.segments).forEach(segmentIndex => {\r\n      segmentation.segments[segmentIndex].cachedStats = {\r\n        ...segmentation.segments[segmentIndex].cachedStats,\r\n        tmtv,\r\n      };\r\n    });\r\n\r\n    // Update the segmentation object\r\n    const updatedSegmentation: Segmentation = {\r\n      ...segmentation,\r\n      segments: {\r\n        ...segmentation.segments,\r\n      },\r\n    };\r\n\r\n    segmentationService.addOrUpdateSegmentation(updatedSegmentation);\r\n  });\r\n};\r\n","import PanelROIThresholdExport from './PanelROIThresholdExport';\r\n\r\nexport default PanelROIThresholdExport;\r\n","import React, { useEffect } from 'react';\r\nimport { useActiveViewportSegmentationRepresentations } from '@ohif/extension-cornerstone';\r\nimport { handleROIThresholding } from '../../utils/handleROIThresholding';\r\nimport { debounce } from '@ohif/core/src/utils';\r\n\r\nexport default function PanelRoiThresholdSegmentation({\r\n  servicesManager,\r\n  commandsManager,\r\n}: withAppTypes) {\r\n  const { segmentationService } = servicesManager.services;\r\n  const { segmentationsWithRepresentations: segmentationsInfo } =\r\n    useActiveViewportSegmentationRepresentations({ servicesManager });\r\n\r\n  useEffect(() => {\r\n    const segmentationIds = segmentationsInfo.map(\r\n      segmentationInfo => segmentationInfo.segmentation.segmentationId\r\n    );\r\n\r\n    const initialRun = async () => {\r\n      for (const segmentationId of segmentationIds) {\r\n        await handleROIThresholding({\r\n          segmentationId,\r\n          commandsManager,\r\n          segmentationService,\r\n        });\r\n      }\r\n    };\r\n\r\n    initialRun();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const debouncedHandleROIThresholding = debounce(async eventDetail => {\r\n      const { segmentationId } = eventDetail;\r\n      await handleROIThresholding({\r\n        segmentationId,\r\n        commandsManager,\r\n        segmentationService,\r\n      });\r\n    }, 100);\r\n\r\n    const dataModifiedCallback = eventDetail => {\r\n      debouncedHandleROIThresholding(eventDetail);\r\n    };\r\n\r\n    const dataModifiedSubscription = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_DATA_MODIFIED,\r\n      dataModifiedCallback\r\n    );\r\n\r\n    return () => {\r\n      dataModifiedSubscription.unsubscribe();\r\n    };\r\n  }, [commandsManager, segmentationService]);\r\n\r\n  // Find the first segmentation with a TMTV value since all of them have the same value\r\n  const tmtvSegmentation = segmentationsInfo.find(\r\n    info => info.segmentation.cachedStats?.tmtv !== undefined\r\n  );\r\n  const tmtvValue = tmtvSegmentation?.segmentation.cachedStats?.tmtv;\r\n\r\n  return (\r\n    <div className=\"mt-2 mb-10 flex flex-col\">\r\n      <div className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\">\r\n        {tmtvValue !== null && tmtvValue !== undefined ? (\r\n          <div className=\"bg-secondary-dark flex items-baseline justify-between px-2 py-1\">\r\n            <span className=\"text-base font-bold uppercase tracking-widest text-white\">\r\n              {'TMTV:'}\r\n            </span>\r\n            <div className=\"text-white\">{`${tmtvValue.toFixed(3)} mL`}</div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  PanelSegmentation,\r\n  useActiveViewportSegmentationRepresentations,\r\n} from '@ohif/extension-cornerstone';\r\nimport { Button, Icons } from '@ohif/ui-next';\r\n\r\nexport default function PanelTMTV({\r\n  servicesManager,\r\n  commandsManager,\r\n  extensionManager,\r\n  configuration,\r\n}: withAppTypes) {\r\n  return (\r\n    <>\r\n      <PanelSegmentation\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        configuration={configuration}\r\n      >\r\n        <ExportCSV\r\n          servicesManager={servicesManager}\r\n          commandsManager={commandsManager}\r\n        />\r\n      </PanelSegmentation>\r\n    </>\r\n  );\r\n}\r\n\r\nconst ExportCSV = ({ servicesManager, commandsManager }: withAppTypes) => {\r\n  const { segmentationsWithRepresentations: representations } =\r\n    useActiveViewportSegmentationRepresentations({ servicesManager });\r\n\r\n  const tmtv = representations[0]?.segmentation.cachedStats?.tmtv;\r\n\r\n  const segmentations = representations.map(representation => representation.segmentation);\r\n\r\n  if (!segmentations.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-8 w-full items-center rounded pr-0.5\">\r\n      <Button\r\n        size=\"sm\"\r\n        variant=\"ghost\"\r\n        className=\"pl-1.5\"\r\n        onClick={() => {\r\n          commandsManager.runCommand('exportTMTVReportCSV', {\r\n            segmentations,\r\n            tmtv,\r\n            config: {},\r\n          });\r\n        }}\r\n      >\r\n        <Icons.Download />\r\n        <span className=\"pl-1\">CSV</span>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { PanelPetSUV, PanelROIThresholdExport } from './Panels';\r\nimport { Toolbox } from '@ohif/ui-next';\r\nimport PanelTMTV from './Panels/PanelTMTV';\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }) {\r\n  const wrappedPanelPetSuv = () => {\r\n    return (\r\n      <PanelPetSUV\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedROIThresholdToolbox = () => {\r\n    return (\r\n      <Toolbox\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n        buttonSectionId=\"ROIThresholdToolbox\"\r\n        title=\"Threshold Tools\"\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedROIThresholdExport = () => {\r\n    return (\r\n      <PanelROIThresholdExport\r\n        commandsManager={commandsManager}\r\n        servicesManager={servicesManager}\r\n      />\r\n    );\r\n  };\r\n\r\n  const wrappedPanelTMTV = () => {\r\n    return (\r\n      <>\r\n        <Toolbox\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n          extensionManager={extensionManager}\r\n          buttonSectionId=\"ROIThresholdToolbox\"\r\n          title=\"Threshold Tools\"\r\n        />\r\n        <PanelTMTV\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n        <PanelROIThresholdExport\r\n          commandsManager={commandsManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'petSUV',\r\n      iconName: 'tab-patient-info',\r\n      iconLabel: 'Patient Info',\r\n      label: 'Patient Info',\r\n      component: wrappedPanelPetSuv,\r\n    },\r\n    {\r\n      name: 'tmtv',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      component: wrappedPanelTMTV,\r\n    },\r\n    {\r\n      name: 'tmtvBox',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation Toolbox',\r\n      component: wrappedROIThresholdToolbox,\r\n    },\r\n    {\r\n      name: 'tmtvExport',\r\n      iconName: 'tab-segmentation',\r\n      iconLabel: 'Segmentation',\r\n      label: 'Segmentation Export',\r\n      component: wrappedROIThresholdExport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","export default ['RectangleROIStartEndThreshold'];\r\n","import SUPPORTED_TOOLS from './constants/supportedTools';\r\nimport { getSOPInstanceAttributes } from '@ohif/extension-cornerstone';\r\n\r\nconst RectangleROIStartEndThreshold = {\r\n  toAnnotation: (measurement, definition) => {},\r\n\r\n  /**\r\n   * Maps cornerstone annotation event data to measurement service format.\r\n   *\r\n   * @param {Object} cornerstone Cornerstone event data\r\n   * @return {Measurement} Measurement instance\r\n   */\r\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\r\n    const { annotation, viewportId } = csToolsEventDetail;\r\n    const { metadata, data, annotationUID } = annotation;\r\n\r\n    if (!metadata || !data) {\r\n      console.warn('Length tool: Missing metadata or data');\r\n      return null;\r\n    }\r\n\r\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\r\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\r\n\r\n    if (!validToolType) {\r\n      throw new Error('Tool not supported');\r\n    }\r\n\r\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\r\n      referencedImageId,\r\n      cornerstoneViewportService,\r\n      viewportId\r\n    );\r\n\r\n    let displaySet;\r\n\r\n    if (SOPInstanceUID) {\r\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\r\n        SOPInstanceUID,\r\n        SeriesInstanceUID\r\n      );\r\n    } else {\r\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\r\n    }\r\n\r\n    return {\r\n      uid: annotationUID,\r\n      SOPInstanceUID,\r\n      FrameOfReferenceUID,\r\n      // points,\r\n      metadata,\r\n      referenceSeriesUID: SeriesInstanceUID,\r\n      referenceStudyUID: StudyInstanceUID,\r\n      toolName: metadata.toolName,\r\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n      label: metadata.label,\r\n      data: data.cachedStats,\r\n      type: 'RectangleROIStartEndThreshold',\r\n    };\r\n  },\r\n};\r\n\r\nexport default RectangleROIStartEndThreshold;\r\n","import SUPPORTED_TOOLS from './constants/supportedTools';\r\nimport { getSOPInstanceAttributes } from '@ohif/extension-cornerstone';\r\n\r\nconst CircleROIStartEndThreshold = {\r\n  toAnnotation: (measurement, definition) => {},\r\n\r\n  /**\r\n   * Maps cornerstone annotation event data to measurement service format.\r\n   *\r\n   * @param {Object} cornerstone Cornerstone event data\r\n   * @return {Measurement} Measurement instance\r\n   */\r\n  toMeasurement: (csToolsEventDetail, displaySetService, cornerstoneViewportService) => {\r\n    const { annotation, viewportId } = csToolsEventDetail;\r\n    const { metadata, data, annotationUID } = annotation;\r\n\r\n    if (!metadata || !data) {\r\n      console.warn('Length tool: Missing metadata or data');\r\n      return null;\r\n    }\r\n\r\n    const { toolName, referencedImageId, FrameOfReferenceUID } = metadata;\r\n    const validToolType = SUPPORTED_TOOLS.includes(toolName);\r\n\r\n    if (!validToolType) {\r\n      throw new Error('Tool not supported');\r\n    }\r\n\r\n    const { SOPInstanceUID, SeriesInstanceUID, StudyInstanceUID } = getSOPInstanceAttributes(\r\n      referencedImageId,\r\n      cornerstoneViewportService,\r\n      viewportId\r\n    );\r\n\r\n    let displaySet;\r\n\r\n    if (SOPInstanceUID) {\r\n      displaySet = displaySetService.getDisplaySetForSOPInstanceUID(\r\n        SOPInstanceUID,\r\n        SeriesInstanceUID\r\n      );\r\n    } else {\r\n      displaySet = displaySetService.getDisplaySetsForSeries(SeriesInstanceUID);\r\n    }\r\n\r\n    const { cachedStats } = data;\r\n\r\n    return {\r\n      uid: annotationUID,\r\n      SOPInstanceUID,\r\n      FrameOfReferenceUID,\r\n      // points,\r\n      metadata,\r\n      referenceSeriesUID: SeriesInstanceUID,\r\n      referenceStudyUID: StudyInstanceUID,\r\n      toolName: metadata.toolName,\r\n      displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n      label: metadata.label,\r\n      // displayText: displayText,\r\n      data: data.cachedStats,\r\n      type: 'CircleROIStartEndThreshold',\r\n      // getReport,\r\n    };\r\n  },\r\n};\r\n\r\nexport default CircleROIStartEndThreshold;\r\n","import RectangleROIStartEndThreshold from './RectangleROIStartEndThreshold';\r\nimport CircleROIStartEndThreshold from './CircleROIStartEndThreshold';\r\n\r\nconst measurementServiceMappingsFactory = (\r\n  measurementService,\r\n  displaySetService,\r\n  cornerstoneViewportService\r\n) => {\r\n  return {\r\n    RectangleROIStartEndThreshold: {\r\n      toAnnotation: RectangleROIStartEndThreshold.toAnnotation,\r\n      toMeasurement: csToolsAnnotation =>\r\n        RectangleROIStartEndThreshold.toMeasurement(\r\n          csToolsAnnotation,\r\n          displaySetService,\r\n          cornerstoneViewportService\r\n        ),\r\n      matchingCriteria: [\r\n        {\r\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\r\n        },\r\n      ],\r\n    },\r\n    CircleROIStartEndThreshold: {\r\n      toAnnotation: CircleROIStartEndThreshold.toAnnotation,\r\n      toMeasurement: csToolsAnnotation =>\r\n        CircleROIStartEndThreshold.toMeasurement(\r\n          csToolsAnnotation,\r\n          displaySetService,\r\n          cornerstoneViewportService\r\n        ),\r\n      matchingCriteria: [\r\n        {\r\n          valueType: measurementService.VALUE_TYPES.ROI_THRESHOLD_MANUAL,\r\n        },\r\n      ],\r\n    },\r\n  };\r\n};\r\n\r\nexport default measurementServiceMappingsFactory;\r\n","import {\r\n  addTool,\r\n  RectangleROIStartEndThresholdTool,\r\n  CircleROIStartEndThresholdTool,\r\n} from '@cornerstonejs/tools';\r\nimport { Enums as CSExtensionEnums } from '@ohif/extension-cornerstone';\r\n\r\nimport measurementServiceMappingsFactory from './utils/measurementServiceMappings/measurementServiceMappingsFactory';\r\n\r\nconst { CORNERSTONE_3D_TOOLS_SOURCE_NAME, CORNERSTONE_3D_TOOLS_SOURCE_VERSION } = CSExtensionEnums;\r\n\r\n/**\r\n *\r\n * @param {Object} servicesManager\r\n * @param {Object} configuration\r\n * @param {Object|Array} configuration.csToolsConfig\r\n */\r\nexport default function init({ servicesManager }) {\r\n  const { measurementService, displaySetService, cornerstoneViewportService } =\r\n    servicesManager.services;\r\n\r\n  addTool(RectangleROIStartEndThresholdTool);\r\n  addTool(CircleROIStartEndThresholdTool);\r\n\r\n  const { RectangleROIStartEndThreshold, CircleROIStartEndThreshold } =\r\n    measurementServiceMappingsFactory(\r\n      measurementService,\r\n      displaySetService,\r\n      cornerstoneViewportService\r\n    );\r\n\r\n  const csTools3DVer1MeasurementSource = measurementService.getSource(\r\n    CORNERSTONE_3D_TOOLS_SOURCE_NAME,\r\n    CORNERSTONE_3D_TOOLS_SOURCE_VERSION\r\n  );\r\n\r\n  measurementService.addMapping(\r\n    csTools3DVer1MeasurementSource,\r\n    'RectangleROIStartEndThreshold',\r\n    RectangleROIStartEndThreshold.matchingCriteria,\r\n    RectangleROIStartEndThreshold.toAnnotation,\r\n    RectangleROIStartEndThreshold.toMeasurement\r\n  );\r\n\r\n  measurementService.addMapping(\r\n    csTools3DVer1MeasurementSource,\r\n    'CircleROIStartEndThreshold',\r\n    CircleROIStartEndThreshold.matchingCriteria,\r\n    CircleROIStartEndThreshold.toAnnotation,\r\n    CircleROIStartEndThreshold.toMeasurement\r\n  );\r\n}\r\n","import * as csTools from '@cornerstonejs/tools';\r\n\r\nfunction getRoiStats(referencedVolume, annotations) {\r\n  // roiStats\r\n  const { imageData } = referencedVolume;\r\n  const values = imageData.getPointData().getScalars().getData();\r\n\r\n  // Todo: add support for other strategies\r\n  const { fn, baseValue } = _getStrategyFn('max');\r\n  let value = baseValue;\r\n\r\n  const boundsIJK = csTools.utilities.rectangleROITool.getBoundsIJKFromRectangleAnnotations(\r\n    annotations,\r\n    referencedVolume\r\n  );\r\n\r\n  const [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\r\n\r\n  for (let i = iMin; i <= iMax; i++) {\r\n    for (let j = jMin; j <= jMax; j++) {\r\n      for (let k = kMin; k <= kMax; k++) {\r\n        const offset = imageData.computeOffsetIndex([i, j, k]);\r\n        value = fn(values[offset], value);\r\n      }\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nfunction getThresholdValues(\r\n  annotationUIDs,\r\n  referencedVolumes,\r\n  config\r\n): { ptLower: number; ptUpper: number; ctLower: number; ctUpper: number } {\r\n  if (config.strategy === 'range') {\r\n    return {\r\n      ptLower: Number(config.ptLower),\r\n      ptUpper: Number(config.ptUpper),\r\n      ctLower: Number(config.ctLower),\r\n      ctUpper: Number(config.ctUpper),\r\n    };\r\n  }\r\n\r\n  const { weight } = config;\r\n  const annotations = annotationUIDs.map(annotationUID =>\r\n    csTools.annotation.state.getAnnotation(annotationUID)\r\n  );\r\n\r\n  const ptValue = getRoiStats(referencedVolumes[0], annotations);\r\n\r\n  return {\r\n    ctLower: -Infinity,\r\n    ctUpper: +Infinity,\r\n    ptLower: weight * ptValue,\r\n    ptUpper: +Infinity,\r\n  };\r\n}\r\n\r\nfunction _getStrategyFn(statistic): {\r\n  fn: (a: number, b: number) => number;\r\n  baseValue: number;\r\n} {\r\n  const baseValue = -Infinity;\r\n  const fn = (number, maxValue) => {\r\n    if (number > maxValue) {\r\n      maxValue = number;\r\n    }\r\n    return maxValue;\r\n  };\r\n  return { fn, baseValue };\r\n}\r\n\r\nexport default getThresholdValues;\r\n","import dcmjs from 'dcmjs';\r\nimport { classes, DicomMetadataStore } from '@ohif/core';\r\nimport { adaptersRT } from '@cornerstonejs/adapters';\r\n\r\nconst { datasetToBlob } = dcmjs.data;\r\nconst metadataProvider = classes.MetadataProvider;\r\n\r\nexport default function dicomRTAnnotationExport(annotations) {\r\n  const dataset = adaptersRT.Cornerstone3D.RTSS.generateRTSSFromAnnotations(\r\n    annotations,\r\n    metadataProvider,\r\n    DicomMetadataStore\r\n  );\r\n  const reportBlob = datasetToBlob(dataset);\r\n\r\n  //Create a URL for the binary.\r\n  var objectUrl = URL.createObjectURL(reportBlob);\r\n  window.location.assign(objectUrl);\r\n}\r\n","import dicomRTAnnotationExport from './dicomRTAnnotationExport';\r\n\r\nexport default dicomRTAnnotationExport;\r\n","import OHIF from '@ohif/core';\r\nimport * as cs from '@cornerstonejs/core';\r\nimport * as csTools from '@cornerstonejs/tools';\r\nimport { classes } from '@ohif/core';\r\nimport getThresholdValues from './utils/getThresholdValue';\r\nimport createAndDownloadTMTVReport from './utils/createAndDownloadTMTVReport';\r\n\r\nimport dicomRTAnnotationExport from './utils/dicomRTAnnotationExport/RTStructureSet';\r\n\r\nimport { getWebWorkerManager } from '@cornerstonejs/core';\r\nimport { Enums } from '@cornerstonejs/tools';\r\n\r\nconst { SegmentationRepresentations } = Enums;\r\n\r\nconst metadataProvider = classes.MetadataProvider;\r\nconst ROI_THRESHOLD_MANUAL_TOOL_IDS = [\r\n  'RectangleROIStartEndThreshold',\r\n  'RectangleROIThreshold',\r\n  'CircleROIStartEndThreshold',\r\n];\r\n\r\nconst workerManager = getWebWorkerManager();\r\n\r\nconst options = {\r\n  maxWorkerInstances: 1,\r\n  autoTerminateOnIdle: {\r\n    enabled: true,\r\n    idleTimeThreshold: 3000,\r\n  },\r\n};\r\n\r\n// Register the task\r\nconst workerFn = () => {\r\n  return new Worker(new URL('./utils/calculateSUVPeakWorker.js', import.meta.url), {\r\n    name: 'suv-peak-worker', // name used by the browser to name the worker\r\n  });\r\n};\r\n\r\nfunction getVolumesFromSegmentation(segmentationId) {\r\n  const csSegmentation = csTools.segmentation.state.getSegmentation(segmentationId);\r\n  const labelmapData = csSegmentation.representationData[\r\n    SegmentationRepresentations.Labelmap\r\n  ] as csTools.Types.LabelmapToolOperationDataVolume;\r\n\r\n  const { volumeId, referencedVolumeId } = labelmapData;\r\n  const labelmapVolume = cs.cache.getVolume(volumeId);\r\n  const referencedVolume = cs.cache.getVolume(referencedVolumeId);\r\n\r\n  return { labelmapVolume, referencedVolume };\r\n}\r\n\r\nfunction getLabelmapVolumeFromSegmentation(segmentation) {\r\n  const { representationData } = segmentation;\r\n  const { volumeId } = representationData[\r\n    SegmentationRepresentations.Labelmap\r\n  ] as csTools.Types.LabelmapToolOperationDataVolume;\r\n\r\n  return cs.cache.getVolume(volumeId);\r\n}\r\n\r\nconst commandsModule = ({ servicesManager, commandsManager, extensionManager }: withAppTypes) => {\r\n  const {\r\n    viewportGridService,\r\n    uiNotificationService,\r\n    displaySetService,\r\n    hangingProtocolService,\r\n    toolGroupService,\r\n    cornerstoneViewportService,\r\n    segmentationService,\r\n  } = servicesManager.services;\r\n\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  const { getEnabledElement } = utilityModule.exports;\r\n\r\n  function _getActiveViewportsEnabledElement() {\r\n    const { activeViewportId } = viewportGridService.getState();\r\n    const { element } = getEnabledElement(activeViewportId) || {};\r\n    const enabledElement = cs.getEnabledElement(element);\r\n    return enabledElement;\r\n  }\r\n\r\n  function _getAnnotationsSelectedByToolNames(toolNames) {\r\n    return toolNames.reduce((allAnnotationUIDs, toolName) => {\r\n      const annotationUIDs =\r\n        csTools.annotation.selection.getAnnotationsSelectedByToolName(toolName);\r\n\r\n      return allAnnotationUIDs.concat(annotationUIDs);\r\n    }, []);\r\n  }\r\n\r\n  const actions = {\r\n    getMatchingPTDisplaySet: ({ viewportMatchDetails }) => {\r\n      // Todo: this is assuming that the hanging protocol has successfully matched\r\n      // the correct PT. For future, we should have a way to filter out the PTs\r\n      // that are in the viewer layout (but then we have the problem of the attenuation\r\n      // corrected PT vs the non-attenuation correct PT)\r\n\r\n      let ptDisplaySet = null;\r\n      for (const [viewportId, viewportDetails] of viewportMatchDetails) {\r\n        const { displaySetsInfo } = viewportDetails;\r\n        const displaySets = displaySetsInfo.map(({ displaySetInstanceUID }) =>\r\n          displaySetService.getDisplaySetByUID(displaySetInstanceUID)\r\n        );\r\n\r\n        if (!displaySets || displaySets.length === 0) {\r\n          continue;\r\n        }\r\n\r\n        ptDisplaySet = displaySets.find(displaySet => displaySet.Modality === 'PT');\r\n        if (ptDisplaySet) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return ptDisplaySet;\r\n    },\r\n    getPTMetadata: ({ ptDisplaySet }) => {\r\n      const dataSource = extensionManager.getDataSources()[0];\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(ptDisplaySet);\r\n\r\n      const firstImageId = imageIds[0];\r\n      const instance = metadataProvider.get('instance', firstImageId);\r\n      if (instance.Modality !== 'PT') {\r\n        return;\r\n      }\r\n\r\n      const metadata = {\r\n        SeriesTime: instance.SeriesTime,\r\n        Modality: instance.Modality,\r\n        PatientSex: instance.PatientSex,\r\n        PatientWeight: instance.PatientWeight,\r\n        RadiopharmaceuticalInformationSequence: {\r\n          RadionuclideTotalDose:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideTotalDose,\r\n          RadionuclideHalfLife:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadionuclideHalfLife,\r\n          RadiopharmaceuticalStartTime:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartTime,\r\n          RadiopharmaceuticalStartDateTime:\r\n            instance.RadiopharmaceuticalInformationSequence[0].RadiopharmaceuticalStartDateTime,\r\n        },\r\n      };\r\n\r\n      return metadata;\r\n    },\r\n    createNewLabelmapFromPT: async ({ label }) => {\r\n      // Create a segmentation of the same resolution as the source data\r\n      // using volumeLoader.createAndCacheDerivedVolume.\r\n\r\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n\r\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\r\n        viewportMatchDetails,\r\n      });\r\n\r\n      let withPTViewportId = null;\r\n\r\n      for (const [viewportId, { displaySetsInfo }] of viewportMatchDetails.entries()) {\r\n        const isPT = displaySetsInfo.some(\r\n          ({ displaySetInstanceUID }) =>\r\n            displaySetInstanceUID === ptDisplaySet.displaySetInstanceUID\r\n        );\r\n\r\n        if (isPT) {\r\n          withPTViewportId = viewportId;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!ptDisplaySet) {\r\n        uiNotificationService.error('No matching PT display set found');\r\n        return;\r\n      }\r\n\r\n      const currentSegmentations =\r\n        segmentationService.getSegmentationRepresentations(withPTViewportId);\r\n\r\n      const displaySet = displaySetService.getDisplaySetByUID(ptDisplaySet.displaySetInstanceUID);\r\n\r\n      const segmentationId = await segmentationService.createLabelmapForDisplaySet(displaySet, {\r\n        label: `Segmentation ${currentSegmentations.length + 1}`,\r\n        segments: { 1: { label: 'Segment 1', active: true } },\r\n      });\r\n\r\n      segmentationService.addSegmentationRepresentation(withPTViewportId, {\r\n        segmentationId,\r\n      });\r\n\r\n      return segmentationId;\r\n    },\r\n    thresholdSegmentationByRectangleROITool: ({ segmentationId, config, segmentIndex }) => {\r\n      const segmentation = csTools.segmentation.state.getSegmentation(segmentationId);\r\n\r\n      const { representationData } = segmentation;\r\n      const { displaySetMatchDetails: matchDetails } = hangingProtocolService.getMatchDetails();\r\n      const volumeLoaderScheme = 'cornerstoneStreamingImageVolume'; // Loader id which defines which volume loader to use\r\n\r\n      const ctDisplaySet = matchDetails.get('ctDisplaySet');\r\n      const ctVolumeId = `${volumeLoaderScheme}:${ctDisplaySet.displaySetInstanceUID}`; // VolumeId with loader id + volume id\r\n\r\n      const { volumeId: segVolumeId } = representationData[\r\n        SegmentationRepresentations.Labelmap\r\n      ] as csTools.Types.LabelmapToolOperationDataVolume;\r\n      const { referencedVolumeId } = cs.cache.getVolume(segVolumeId);\r\n\r\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(ROI_THRESHOLD_MANUAL_TOOL_IDS);\r\n\r\n      if (annotationUIDs.length === 0) {\r\n        uiNotificationService.show({\r\n          title: 'Commands Module',\r\n          message: 'No ROIThreshold Tool is Selected',\r\n          type: 'error',\r\n        });\r\n        return;\r\n      }\r\n\r\n      const labelmapVolume = cs.cache.getVolume(segmentationId);\r\n      let referencedVolume = cs.cache.getVolume(referencedVolumeId);\r\n      const ctReferencedVolume = cs.cache.getVolume(ctVolumeId);\r\n\r\n      // check if viewport is\r\n\r\n      if (!referencedVolume) {\r\n        throw new Error('No Reference volume found');\r\n      }\r\n\r\n      if (!labelmapVolume) {\r\n        throw new Error('No Reference labelmap found');\r\n      }\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUIDs[0]);\r\n\r\n      const {\r\n        metadata: {\r\n          enabledElement: { viewport },\r\n        },\r\n      } = annotation;\r\n\r\n      const showingReferenceVolume = viewport.hasVolumeId(referencedVolumeId);\r\n\r\n      if (!showingReferenceVolume) {\r\n        // if the reference volume is not being displayed, we can't\r\n        // rely on it for thresholding, we have couple of options here\r\n        // 1. We choose whatever volume is being displayed\r\n        // 2. We check if it is a fusion viewport, we pick the volume\r\n        // that matches the size and dimensions of the labelmap. This might\r\n        // happen if the 4D PT is converted to a computed volume and displayed\r\n        // and wants to threshold the labelmap\r\n        // 3. We throw an error\r\n        const displaySetInstanceUIDs = viewportGridService.getDisplaySetsUIDsForViewport(\r\n          viewport.id\r\n        );\r\n\r\n        displaySetInstanceUIDs.forEach(displaySetInstanceUID => {\r\n          const volume = cs.cache\r\n            .getVolumes()\r\n            .find(volume => volume.volumeId.includes(displaySetInstanceUID));\r\n\r\n          if (\r\n            cs.utilities.isEqual(volume.dimensions, labelmapVolume.dimensions) &&\r\n            cs.utilities.isEqual(volume.spacing, labelmapVolume.spacing)\r\n          ) {\r\n            referencedVolume = volume;\r\n          }\r\n        });\r\n      }\r\n\r\n      const { ptLower, ptUpper, ctLower, ctUpper } = getThresholdValues(\r\n        annotationUIDs,\r\n        [referencedVolume, ctReferencedVolume],\r\n        config\r\n      );\r\n\r\n      return csTools.utilities.segmentation.rectangleROIThresholdVolumeByRange(\r\n        annotationUIDs,\r\n        labelmapVolume,\r\n        [\r\n          { volume: referencedVolume, lower: ptLower, upper: ptUpper },\r\n          { volume: ctReferencedVolume, lower: ctLower, upper: ctUpper },\r\n        ],\r\n        { overwrite: true, segmentIndex }\r\n      );\r\n    },\r\n    calculateSuvPeak: async ({ segmentationId, segmentIndex }) => {\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      const { representationData } = segmentation;\r\n      const { volumeId, referencedVolumeId } = representationData[\r\n        SegmentationRepresentations.Labelmap\r\n      ] as csTools.Types.LabelmapToolOperationDataVolume;\r\n\r\n      const labelmap = cs.cache.getVolume(volumeId);\r\n      const referencedVolume = cs.cache.getVolume(referencedVolumeId);\r\n\r\n      // if we put it in the top, it will appear in other modes\r\n      workerManager.registerWorker('suv-peak-worker', workerFn, options);\r\n\r\n      const annotationUIDs = _getAnnotationsSelectedByToolNames(ROI_THRESHOLD_MANUAL_TOOL_IDS);\r\n\r\n      const annotations = annotationUIDs.map(annotationUID =>\r\n        csTools.annotation.state.getAnnotation(annotationUID)\r\n      );\r\n\r\n      const labelmapProps = {\r\n        dimensions: labelmap.dimensions,\r\n        origin: labelmap.origin,\r\n        direction: labelmap.direction,\r\n        spacing: labelmap.spacing,\r\n        metadata: labelmap.metadata,\r\n        scalarData: labelmap.voxelManager.getCompleteScalarDataArray(),\r\n      };\r\n\r\n      const referenceVolumeProps = {\r\n        dimensions: referencedVolume.dimensions,\r\n        origin: referencedVolume.origin,\r\n        direction: referencedVolume.direction,\r\n        spacing: referencedVolume.spacing,\r\n        metadata: referencedVolume.metadata,\r\n        scalarData: referencedVolume.voxelManager.getCompleteScalarDataArray(),\r\n      };\r\n\r\n      // metadata in annotations has enabledElement which is not serializable\r\n      // we need to remove it\r\n      // Todo: we should probably have a sanitization function for this\r\n      const annotationsToSend = annotations.map(annotation => {\r\n        return {\r\n          ...annotation,\r\n          metadata: {\r\n            ...annotation.metadata,\r\n            enabledElement: {\r\n              ...annotation.metadata.enabledElement,\r\n              viewport: null,\r\n              renderingEngine: null,\r\n              element: null,\r\n            },\r\n          },\r\n        };\r\n      });\r\n\r\n      const suvPeak =\r\n        (await workerManager.executeTask('suv-peak-worker', 'calculateSuvPeak', {\r\n          labelmapProps,\r\n          referenceVolumeProps,\r\n          annotations: annotationsToSend,\r\n          segmentIndex,\r\n        })) || {};\r\n\r\n      return {\r\n        suvPeak: suvPeak.mean,\r\n        suvMax: suvPeak.max,\r\n        suvMaxIJK: suvPeak.maxIJK,\r\n        suvMaxLPS: suvPeak.maxLPS,\r\n      };\r\n    },\r\n    getLesionStats: ({ segmentationId, segmentIndex = 1 }) => {\r\n      const { labelmapVolume, referencedVolume } = getVolumesFromSegmentation(segmentationId);\r\n      const { voxelManager: segVoxelManager, imageData, spacing } = labelmapVolume;\r\n      const { voxelManager: refVoxelManager } = referencedVolume;\r\n\r\n      let segmentationMax = -Infinity;\r\n      let segmentationMin = Infinity;\r\n      const segmentationValues = [];\r\n      let voxelCount = 0;\r\n\r\n      const callback = ({ value, index }) => {\r\n        if (value === segmentIndex) {\r\n          const refValue = refVoxelManager.getAtIndex(index) as number;\r\n          segmentationValues.push(refValue);\r\n          if (refValue > segmentationMax) {\r\n            segmentationMax = refValue;\r\n          }\r\n          if (refValue < segmentationMin) {\r\n            segmentationMin = refValue;\r\n          }\r\n          voxelCount++;\r\n        }\r\n      };\r\n\r\n      segVoxelManager.forEach(callback, { imageData });\r\n      const mean = segmentationValues.reduce((a, b) => a + b, 0) / voxelCount;\r\n      const stats = {\r\n        minValue: segmentationMin,\r\n        maxValue: segmentationMax,\r\n        meanValue: mean,\r\n        stdValue: Math.sqrt(\r\n          segmentationValues.map(k => (k - mean) ** 2).reduce((acc, curr) => acc + curr, 0) /\r\n            voxelCount\r\n        ),\r\n        volume: voxelCount * spacing[0] * spacing[1] * spacing[2] * 1e-3,\r\n      };\r\n\r\n      return stats;\r\n    },\r\n    calculateLesionGlycolysis: ({ lesionStats }) => {\r\n      const { meanValue, volume } = lesionStats;\r\n\r\n      return {\r\n        lesionGlyoclysisStats: volume * meanValue,\r\n      };\r\n    },\r\n    calculateTMTV: async ({ segmentations }) => {\r\n      const labelmapProps = segmentations.map(segmentation => {\r\n        const labelmap = getLabelmapVolumeFromSegmentation(segmentation);\r\n        return {\r\n          dimensions: labelmap.dimensions,\r\n          spacing: labelmap.spacing,\r\n          scalarData: labelmap.voxelManager.getCompleteScalarDataArray(),\r\n          origin: labelmap.origin,\r\n          direction: labelmap.direction,\r\n        };\r\n      });\r\n\r\n      if (!labelmapProps.length) {\r\n        return;\r\n      }\r\n\r\n      return await workerManager.executeTask('suv-peak-worker', 'calculateTMTV', labelmapProps);\r\n    },\r\n    exportTMTVReportCSV: async ({ segmentations, tmtv, config, options }) => {\r\n      const segReport = commandsManager.runCommand('getSegmentationCSVReport', {\r\n        segmentations,\r\n      });\r\n\r\n      const tlg = await actions.getTotalLesionGlycolysis({ segmentations });\r\n      const additionalReportRows = [\r\n        { key: 'Total Lesion Glycolysis', value: { tlg: tlg.toFixed(4) } },\r\n        { key: 'Threshold Configuration', value: { ...config } },\r\n      ];\r\n\r\n      if (tmtv !== undefined) {\r\n        additionalReportRows.unshift({\r\n          key: 'Total Metabolic Tumor Volume',\r\n          value: { tmtv },\r\n        });\r\n      }\r\n\r\n      createAndDownloadTMTVReport(segReport, additionalReportRows, options);\r\n    },\r\n    getTotalLesionGlycolysis: async ({ segmentations }) => {\r\n      const labelmapProps = segmentations.map(segmentation => {\r\n        const labelmap = getLabelmapVolumeFromSegmentation(segmentation);\r\n        return {\r\n          dimensions: labelmap.dimensions,\r\n          spacing: labelmap.spacing,\r\n          scalarData: labelmap.voxelManager.getCompleteScalarDataArray(),\r\n          origin: labelmap.origin,\r\n          direction: labelmap.direction,\r\n        };\r\n      });\r\n\r\n      const { referencedVolume: ptVolume } = getVolumesFromSegmentation(\r\n        segmentations[0].segmentationId\r\n      );\r\n\r\n      const ptVolumeProps = {\r\n        dimensions: ptVolume.dimensions,\r\n        spacing: ptVolume.spacing,\r\n        scalarData: ptVolume.voxelManager.getCompleteScalarDataArray(),\r\n        origin: ptVolume.origin,\r\n        direction: ptVolume.direction,\r\n      };\r\n\r\n      return await workerManager.executeTask('suv-peak-worker', 'getTotalLesionGlycolysis', {\r\n        labelmapProps,\r\n        referenceVolumeProps: ptVolumeProps,\r\n      });\r\n    },\r\n    setStartSliceForROIThresholdTool: () => {\r\n      const { viewport } = _getActiveViewportsEnabledElement();\r\n      const { focalPoint } = viewport.getCamera();\r\n\r\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      const annotationUID = selectedAnnotationUIDs[0];\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\r\n\r\n      // set the current focal point\r\n      annotation.data.startCoordinate = focalPoint;\r\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\r\n      // and re-calculate the projection points\r\n      annotation.invalidated = true;\r\n      viewport.render();\r\n    },\r\n    setEndSliceForROIThresholdTool: () => {\r\n      const { viewport } = _getActiveViewportsEnabledElement();\r\n\r\n      const selectedAnnotationUIDs = _getAnnotationsSelectedByToolNames(\r\n        ROI_THRESHOLD_MANUAL_TOOL_IDS\r\n      );\r\n\r\n      const annotationUID = selectedAnnotationUIDs[0];\r\n\r\n      const annotation = csTools.annotation.state.getAnnotation(annotationUID);\r\n\r\n      // get the current focal point\r\n      const focalPointToEnd = viewport.getCamera().focalPoint;\r\n      annotation.data.endCoordinate = focalPointToEnd;\r\n\r\n      // IMPORTANT: invalidate the toolData for the cached stat to get updated\r\n      // and re-calculate the projection points\r\n      annotation.invalidated = true;\r\n\r\n      viewport.render();\r\n    },\r\n    createTMTVRTReport: () => {\r\n      // get all Rectangle ROI annotation\r\n      const stateManager = csTools.annotation.state.getAnnotationManager();\r\n\r\n      const annotations = [];\r\n\r\n      Object.keys(stateManager.annotations).forEach(frameOfReferenceUID => {\r\n        const forAnnotations = stateManager.annotations[frameOfReferenceUID];\r\n        const ROIAnnotations = ROI_THRESHOLD_MANUAL_TOOL_IDS.reduce(\r\n          (annotations, toolName) => [...annotations, ...(forAnnotations[toolName] ?? [])],\r\n          []\r\n        );\r\n\r\n        annotations.push(...ROIAnnotations);\r\n      });\r\n\r\n      commandsManager.runCommand('exportRTReportForAnnotations', {\r\n        annotations,\r\n      });\r\n    },\r\n    getSegmentationCSVReport: ({ segmentations }) => {\r\n      if (!segmentations || !segmentations.length) {\r\n        segmentations = segmentationService.getSegmentations();\r\n      }\r\n\r\n      const report = {};\r\n\r\n      for (const segmentation of segmentations) {\r\n        const { label, segmentationId, representationData } =\r\n          segmentation as csTools.Types.Segmentation;\r\n        const id = segmentationId;\r\n\r\n        const segReport = { id, label };\r\n\r\n        if (!representationData) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const { cachedStats } = segmentation.segments[1] || {}; // Assuming we want stats from the first segment\r\n\r\n        if (cachedStats) {\r\n          Object.entries(cachedStats).forEach(([key, value]) => {\r\n            if (typeof value !== 'object') {\r\n              segReport[key] = value;\r\n            } else {\r\n              Object.entries(value).forEach(([subKey, subValue]) => {\r\n                const newKey = `${key}_${subKey}`;\r\n                segReport[newKey] = subValue;\r\n              });\r\n            }\r\n          });\r\n        }\r\n\r\n        const labelmapVolume =\r\n          segmentation.representationData[SegmentationRepresentations.Labelmap];\r\n\r\n        if (!labelmapVolume) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const referencedVolumeId = labelmapVolume.referencedVolumeId;\r\n\r\n        const referencedVolume = cs.cache.getVolume(referencedVolumeId);\r\n\r\n        if (!referencedVolume) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        if (!referencedVolume.imageIds || !referencedVolume.imageIds.length) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        const firstImageId = referencedVolume.imageIds[0];\r\n        const instance = OHIF.classes.MetadataProvider.get('instance', firstImageId);\r\n\r\n        if (!instance) {\r\n          report[id] = segReport;\r\n          continue;\r\n        }\r\n\r\n        report[id] = {\r\n          ...segReport,\r\n          PatientID: instance.PatientID ?? '000000',\r\n          PatientName: instance.PatientName.Alphabetic,\r\n          StudyInstanceUID: instance.StudyInstanceUID,\r\n          SeriesInstanceUID: instance.SeriesInstanceUID,\r\n          StudyDate: instance.StudyDate,\r\n        };\r\n      }\r\n\r\n      return report;\r\n    },\r\n    exportRTReportForAnnotations: ({ annotations }) => {\r\n      dicomRTAnnotationExport(annotations);\r\n    },\r\n    setFusionPTColormap: ({ toolGroupId, colormap }) => {\r\n      const toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n      if (!toolGroup) {\r\n        return;\r\n      }\r\n\r\n      const { viewportMatchDetails } = hangingProtocolService.getMatchDetails();\r\n\r\n      const ptDisplaySet = actions.getMatchingPTDisplaySet({\r\n        viewportMatchDetails,\r\n      });\r\n\r\n      if (!ptDisplaySet) {\r\n        return;\r\n      }\r\n\r\n      const fusionViewportIds = toolGroup.getViewportIds();\r\n\r\n      const viewports = [];\r\n      fusionViewportIds.forEach(viewportId => {\r\n        commandsManager.runCommand('setViewportColormap', {\r\n          viewportId,\r\n          displaySetInstanceUID: ptDisplaySet.displaySetInstanceUID,\r\n          colormap: {\r\n            name: colormap,\r\n          },\r\n        });\r\n\r\n        viewports.push(cornerstoneViewportService.getCornerstoneViewport(viewportId));\r\n      });\r\n\r\n      viewports.forEach(viewport => {\r\n        viewport.render();\r\n      });\r\n    },\r\n  };\r\n\r\n  const definitions = {\r\n    setEndSliceForROIThresholdTool: {\r\n      commandFn: actions.setEndSliceForROIThresholdTool,\r\n    },\r\n    setStartSliceForROIThresholdTool: {\r\n      commandFn: actions.setStartSliceForROIThresholdTool,\r\n    },\r\n    getMatchingPTDisplaySet: {\r\n      commandFn: actions.getMatchingPTDisplaySet,\r\n    },\r\n    getPTMetadata: {\r\n      commandFn: actions.getPTMetadata,\r\n    },\r\n    createNewLabelmapFromPT: {\r\n      commandFn: actions.createNewLabelmapFromPT,\r\n    },\r\n    thresholdSegmentationByRectangleROITool: {\r\n      commandFn: actions.thresholdSegmentationByRectangleROITool,\r\n    },\r\n    getTotalLesionGlycolysis: {\r\n      commandFn: actions.getTotalLesionGlycolysis,\r\n    },\r\n    calculateSuvPeak: {\r\n      commandFn: actions.calculateSuvPeak,\r\n    },\r\n    getLesionStats: {\r\n      commandFn: actions.getLesionStats,\r\n    },\r\n    calculateTMTV: {\r\n      commandFn: actions.calculateTMTV,\r\n    },\r\n    exportTMTVReportCSV: {\r\n      commandFn: actions.exportTMTVReportCSV,\r\n    },\r\n    createTMTVRTReport: {\r\n      commandFn: actions.createTMTVRTReport,\r\n    },\r\n    getSegmentationCSVReport: {\r\n      commandFn: actions.getSegmentationCSVReport,\r\n    },\r\n    exportRTReportForAnnotations: {\r\n      commandFn: actions.exportRTReportForAnnotations,\r\n    },\r\n    setFusionPTColormap: {\r\n      commandFn: actions.setFusionPTColormap,\r\n    },\r\n  };\r\n\r\n  return {\r\n    actions,\r\n    definitions,\r\n    defaultContext: 'TMTV:CORNERSTONE',\r\n  };\r\n};\r\n\r\nexport default commandsModule;\r\n","export default function createAndDownloadTMTVReport(segReport, additionalReportRows, options = {}) {\r\n  const firstReport = segReport[Object.keys(segReport)[0]];\r\n  const columns = Object.keys(firstReport);\r\n  const csv = [columns.join(',')];\r\n\r\n  Object.values(segReport).forEach(segmentation => {\r\n    const row = [];\r\n    columns.forEach(column => {\r\n      // if it is array then we need to replace , with space to avoid csv parsing error\r\n      row.push(\r\n        Array.isArray(segmentation[column]) ? segmentation[column].join(' ') : segmentation[column]\r\n      );\r\n    });\r\n    csv.push(row.join(','));\r\n  });\r\n\r\n  csv.push('');\r\n  csv.push('');\r\n  csv.push('');\r\n\r\n  csv.push(`Patient ID,${firstReport.PatientID}`);\r\n  csv.push(`Study Date,${firstReport.StudyDate}`);\r\n  csv.push('');\r\n  additionalReportRows.forEach(({ key, value: values }) => {\r\n    const temp = [];\r\n    temp.push(`${key}`);\r\n    Object.keys(values).forEach(k => {\r\n      temp.push(`${k}`);\r\n      temp.push(`${values[k]}`);\r\n    });\r\n\r\n    csv.push(temp.join(','));\r\n  });\r\n\r\n  const blob = new Blob([csv.join('\\n')], {\r\n    type: 'text/csv;charset=utf-8',\r\n  });\r\n\r\n  const url = URL.createObjectURL(blob);\r\n\r\n  const a = document.createElement('a');\r\n  a.href = url;\r\n  a.download = options.filename ?? `${firstReport.PatientID}_tmtv.csv`;\r\n  a.click();\r\n}\r\n","import React from 'react';\r\nimport { Input, Label, Select, LegacyButton, LegacyButtonGroup } from '@ohif/ui';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport const ROI_STAT = 'roi_stat';\r\nconst RANGE = 'range';\r\n\r\nconst options = [\r\n  { value: ROI_STAT, label: 'Max', placeHolder: 'Max' },\r\n  { value: RANGE, label: 'Range', placeHolder: 'Range' },\r\n];\r\n\r\nfunction ROIThresholdConfiguration({ config, dispatch, runCommand }) {\r\n  const { t } = useTranslation('ROIThresholdConfiguration');\r\n\r\n  return (\r\n    <div className=\"bg-primary-dark flex flex-col space-y-4\">\r\n      <div className=\"flex items-end space-x-2\">\r\n        <div className=\"flex w-1/2 flex-col\">\r\n          <Select\r\n            label={t('Strategy')}\r\n            closeMenuOnSelect={true}\r\n            className=\"border-primary-main mr-2 bg-black text-white \"\r\n            options={options}\r\n            placeholder={options.find(option => option.value === config.strategy).placeHolder}\r\n            value={config.strategy}\r\n            onChange={({ value }) => {\r\n              dispatch({\r\n                type: 'setStrategy',\r\n                payload: {\r\n                  strategy: value,\r\n                },\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"w-1/2\">\r\n          {/* TODO Revisit design of LegacyButtonGroup later - for now use LegacyButton for its children.*/}\r\n          <LegacyButtonGroup>\r\n            <LegacyButton\r\n              size=\"initial\"\r\n              className=\"px-2 py-2 text-base text-white\"\r\n              color=\"primaryLight\"\r\n              variant=\"outlined\"\r\n              onClick={() => runCommand('setStartSliceForROIThresholdTool')}\r\n            >\r\n              {t('Start')}\r\n            </LegacyButton>\r\n            <LegacyButton\r\n              size=\"initial\"\r\n              color=\"primaryLight\"\r\n              variant=\"outlined\"\r\n              className=\"px-2 py-2 text-base text-white\"\r\n              onClick={() => runCommand('setEndSliceForROIThresholdTool')}\r\n            >\r\n              {t('End')}\r\n            </LegacyButton>\r\n          </LegacyButtonGroup>\r\n        </div>\r\n      </div>\r\n\r\n      {config.strategy === ROI_STAT && (\r\n        <Input\r\n          label={t('Percentage of Max SUV')}\r\n          labelClassName=\"text-[13px] font-inter text-white\"\r\n          className=\"border-primary-main bg-black\"\r\n          type=\"text\"\r\n          containerClassName=\"mr-2\"\r\n          value={config.weight}\r\n          onChange={e => {\r\n            dispatch({\r\n              type: 'setWeight',\r\n              payload: {\r\n                weight: e.target.value,\r\n              },\r\n            });\r\n          }}\r\n        />\r\n      )}\r\n      {config.strategy !== ROI_STAT && (\r\n        <div className=\"mr-2 text-sm\">\r\n          <table>\r\n            <tbody>\r\n              <tr className=\"mt-2\">\r\n                <td\r\n                  className=\"pr-4\"\r\n                  colSpan=\"3\"\r\n                >\r\n                  <Label\r\n                    className=\"font-inter text-[13px] text-white\"\r\n                    text=\"Lower & Upper Ranges\"\r\n                  ></Label>\r\n                </td>\r\n              </tr>\r\n              <tr className=\"mt-2\">\r\n                <td className=\"pr-4 pt-2 text-center\">\r\n                  <Label\r\n                    className=\"text-white\"\r\n                    text=\"CT\"\r\n                  ></Label>\r\n                </td>\r\n                <td>\r\n                  <div className=\"flex justify-between\">\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ctLower}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ctLower: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ctUpper}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ctUpper: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td className=\"pr-4 pt-2 text-center\">\r\n                  <Label\r\n                    className=\"text-white\"\r\n                    text=\"PT\"\r\n                  ></Label>\r\n                </td>\r\n                <td>\r\n                  <div className=\"flex justify-between\">\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ptLower}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ptLower: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                    <Input\r\n                      label={t('')}\r\n                      labelClassName=\"text-white\"\r\n                      className=\"border-primary-main mt-2 bg-black\"\r\n                      type=\"text\"\r\n                      containerClassName=\"mr-2\"\r\n                      value={config.ptUpper}\r\n                      onChange={e => {\r\n                        dispatch({\r\n                          type: 'setThreshold',\r\n                          payload: {\r\n                            ptUpper: e.target.value,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ROIThresholdConfiguration;\r\n","import React, { useState, useCallback, useReducer, useEffect } from 'react';\r\nimport { Button } from '@ohif/ui';\r\nimport ROIThresholdConfiguration, {\r\n  ROI_STAT,\r\n} from './PanelROIThresholdSegmentation/ROIThresholdConfiguration';\r\nimport * as cs3dTools from '@cornerstonejs/tools';\r\n\r\nconst LOWER_CT_THRESHOLD_DEFAULT = -1024;\r\nconst UPPER_CT_THRESHOLD_DEFAULT = 1024;\r\nconst LOWER_PT_THRESHOLD_DEFAULT = 2.5;\r\nconst UPPER_PT_THRESHOLD_DEFAULT = 100;\r\nconst WEIGHT_DEFAULT = 0.41; // a default weight for suv max often used in the literature\r\nconst DEFAULT_STRATEGY = ROI_STAT;\r\n\r\nfunction reducer(state, action) {\r\n  const { payload } = action;\r\n  const { strategy, ctLower, ctUpper, ptLower, ptUpper, weight } = payload;\r\n\r\n  switch (action.type) {\r\n    case 'setStrategy':\r\n      return {\r\n        ...state,\r\n        strategy,\r\n      };\r\n    case 'setThreshold':\r\n      return {\r\n        ...state,\r\n        ctLower: ctLower ? ctLower : state.ctLower,\r\n        ctUpper: ctUpper ? ctUpper : state.ctUpper,\r\n        ptLower: ptLower ? ptLower : state.ptLower,\r\n        ptUpper: ptUpper ? ptUpper : state.ptUpper,\r\n      };\r\n    case 'setWeight':\r\n      return {\r\n        ...state,\r\n        weight,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction RectangleROIOptions({ servicesManager, commandsManager }: withAppTypes) {\r\n  const { segmentationService } = servicesManager.services;\r\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\r\n\r\n  const runCommand = useCallback(\r\n    (commandName, commandOptions = {}) => {\r\n      return commandsManager.runCommand(commandName, commandOptions);\r\n    },\r\n    [commandsManager]\r\n  );\r\n\r\n  const [config, dispatch] = useReducer(reducer, {\r\n    strategy: DEFAULT_STRATEGY,\r\n    ctLower: LOWER_CT_THRESHOLD_DEFAULT,\r\n    ctUpper: UPPER_CT_THRESHOLD_DEFAULT,\r\n    ptLower: LOWER_PT_THRESHOLD_DEFAULT,\r\n    ptUpper: UPPER_PT_THRESHOLD_DEFAULT,\r\n    weight: WEIGHT_DEFAULT,\r\n  });\r\n\r\n  const handleROIThresholding = useCallback(() => {\r\n    const segmentationId = selectedSegmentationId;\r\n    const activeSegmentIndex =\r\n      cs3dTools.segmentation.segmentIndex.getActiveSegmentIndex(segmentationId);\r\n\r\n    // run the threshold based on the active segment index\r\n    // Todo: later find a way to associate each rectangle with a segment (e.g., maybe with color?)\r\n    runCommand('thresholdSegmentationByRectangleROITool', {\r\n      segmentationId,\r\n      config,\r\n      segmentIndex: activeSegmentIndex,\r\n    });\r\n  }, [selectedSegmentationId, config]);\r\n\r\n  useEffect(() => {\r\n    const segmentations = segmentationService.getSegmentationRepresentations();\r\n\r\n    if (!segmentations.length) {\r\n      return;\r\n    }\r\n\r\n    const isActive = segmentations.find(seg => seg.isActive);\r\n    setSelectedSegmentationId(isActive.id);\r\n  }, []);\r\n\r\n  /**\r\n   * Update UI based on segmentation changes (added, removed, updated)\r\n   */\r\n  useEffect(() => {\r\n    // ~~ Subscription\r\n    const updated = segmentationService.EVENTS.SEGMENTATION_MODIFIED;\r\n    const subscriptions = [];\r\n\r\n    [updated].forEach(evt => {\r\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\r\n        const segmentations = segmentationService.getSegmentationRepresentations();\r\n\r\n        if (!segmentations.length) {\r\n          return;\r\n        }\r\n\r\n        const isActive = segmentations.find(seg => seg.isActive);\r\n        setSelectedSegmentationId(isActive.id);\r\n      });\r\n      subscriptions.push(unsubscribe);\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"invisible-scrollbar mb-2 flex flex-col overflow-y-auto overflow-x-hidden\">\r\n      <ROIThresholdConfiguration\r\n        config={config}\r\n        dispatch={dispatch}\r\n        runCommand={runCommand}\r\n      />\r\n      {selectedSegmentationId !== null && (\r\n        <Button\r\n          className=\"mt-2 !h-[26px] !w-[75px]\"\r\n          onClick={handleROIThresholding}\r\n        >\r\n          Run\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RectangleROIOptions;\r\n","import { id } from './id';\r\nimport getHangingProtocolModule from './getHangingProtocolModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport init from './init';\r\nimport commandsModule from './commandsModule';\r\nimport getToolbarModule from './getToolbarModule';\r\n\r\n/**\r\n *\r\n */\r\nconst tmtvExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n  preRegistration({ servicesManager, commandsManager, extensionManager, configuration = {} }) {\r\n    init({ servicesManager, commandsManager, extensionManager, configuration });\r\n  },\r\n  getToolbarModule,\r\n  getPanelModule,\r\n  getHangingProtocolModule,\r\n  getCommandsModule({ servicesManager, commandsManager, extensionManager }) {\r\n    return commandsModule({\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n    });\r\n  },\r\n};\r\n\r\nexport default tmtvExtension;\r\n","import RectangleROIOptions from './Panels/RectangleROIOptions';\r\n\r\nexport default function getToolbarModule({ commandsManager, servicesManager }) {\r\n  return [\r\n    {\r\n      name: 'tmtv.RectangleROIThresholdOptions',\r\n      defaultComponent: () => RectangleROIOptions({ commandsManager, servicesManager }),\r\n    },\r\n  ];\r\n}\r\n"],"names":["id","packageJson","cameraPositionSync","type","source","target","hydrateSegSync","options","matchingRules","ctAXIAL","viewportOptions","viewportId","viewportType","orientation","toolGroupId","initialImageOptions","preset","syncGroups","syncColormap","displaySets","ctSAGITTAL","ctCORONAL","ptAXIAL","background","syncInvertState","voi","custom","voiInverted","ptSAGITTAL","ptCORONAL","fusionAXIAL","colormap","name","opacity","value","fusionSAGITTAL","fusionCORONAL","mipSAGITTAL","customViewportProps","hideOverlays","blendMode","slabThickness","ptCT","locked","createdDate","modifiedDate","availableTo","editableBy","imageLoadStrategy","protocolMatchingRules","attribute","constraint","contains","displaySetSelectors","ctDisplaySet","seriesMatchingRules","equals","required","ptDisplaySet","weight","doesNotContain","stages","viewportStructure","layoutType","properties","rows","columns","layoutOptions","x","y","width","height","viewports","numberOfPriorsReferenced","protocol","DEFAULT_MEATADATA","PatientWeight","PatientSex","SeriesTime","RadiopharmaceuticalInformationSequence","RadionuclideTotalDose","RadionuclideHalfLife","RadiopharmaceuticalStartTime","PanelPetSUV","servicesManager","commandsManager","t","useTranslation","displaySetService","toolGroupService","toolbarService","hangingProtocolService","services","metadata","setMetadata","useState","setPtDisplaySet","handleMetadataChange","prevState","newState","Object","keys","forEach","key","getMatchingPTDisplaySet","viewportMatchDetails","runCommand","useEffect","getActiveDisplaySets","getMatchDetails","length","displaySetInfo","unsubscribe","subscribe","EVENTS","PROTOCOL_CHANGED","React","className","PanelSection","title","Input","containerClassName","label","labelClassName","onChange","e","labelChildren","Button","onClick","Error","DicomMetadataStore","updateMetadataForSeries","StudyInstanceUID","SeriesInstanceUID","setDisplaySetMetadataInvalidated","displaySetInstanceUID","setTimeout","propTypes","PropTypes","measurementService","getMeasurements","isRequired","VALUE_TYPES","handleROIThresholding","async","segmentationId","segmentationService","segmentation","getSegmentation","triggerEvent","eventTarget","Enums","WEB_WORKER_PROGRESS","progress","updatedPerSegmentCachedStats","segmentIndex","segment","entries","segments","numericSegmentIndex","Number","lesionStats","run","cachedStats","suvPeak","lesionGlyoclysisStats","volume","meanValue","updatedSegment","segmentations","getSegmentations","tmtv","updatedSegmentation","addOrUpdateSegmentation","segmentationsWithRepresentations","segmentationsInfo","useActiveViewportSegmentationRepresentations","segmentationIds","map","segmentationInfo","initialRun","debouncedHandleROIThresholding","debounce","eventDetail","dataModifiedSubscription","SEGMENTATION_DATA_MODIFIED","tmtvSegmentation","find","info","undefined","tmtvValue","toFixed","PanelTMTV","extensionManager","configuration","PanelSegmentation","ExportCSV","representations","representation","size","variant","config","Icons","Download","iconName","iconLabel","component","wrappedPanelPetSuv","wrappedPanelTMTV","Toolbox","buttonSectionId","PanelROIThresholdExport","wrappedROIThresholdToolbox","wrappedROIThresholdExport","toAnnotation","measurement","definition","toMeasurement","csToolsEventDetail","cornerstoneViewportService","annotation","data","annotationUID","console","warn","toolName","referencedImageId","FrameOfReferenceUID","SUPPORTED_TOOLS","includes","SOPInstanceUID","getSOPInstanceAttributes","displaySet","getDisplaySetForSOPInstanceUID","getDisplaySetsForSeries","uid","referenceSeriesUID","referenceStudyUID","measurementServiceMappingsFactory","RectangleROIStartEndThreshold","csToolsAnnotation","matchingCriteria","valueType","ROI_THRESHOLD_MANUAL","CircleROIStartEndThreshold","CORNERSTONE_3D_TOOLS_SOURCE_NAME","CORNERSTONE_3D_TOOLS_SOURCE_VERSION","CSExtensionEnums","getRoiStats","referencedVolume","annotations","imageData","values","getPointData","getScalars","getData","fn","baseValue","statistic","Infinity","number","maxValue","_getStrategyFn","boundsIJK","csTools","iMin","iMax","jMin","jMax","kMin","kMax","i","j","k","computeOffsetIndex","annotationUIDs","referencedVolumes","strategy","ptLower","ptUpper","ctLower","ctUpper","datasetToBlob","dcmjs","metadataProvider","classes","MetadataProvider","dataset","adaptersRT","Cornerstone3D","RTSS","generateRTSSFromAnnotations","reportBlob","objectUrl","URL","createObjectURL","window","location","assign","SegmentationRepresentations","ROI_THRESHOLD_MANUAL_TOOL_IDS","workerManager","getWebWorkerManager","maxWorkerInstances","autoTerminateOnIdle","enabled","idleTimeThreshold","workerFn","Worker","getVolumesFromSegmentation","labelmapData","representationData","Labelmap","volumeId","referencedVolumeId","labelmapVolume","cs","getVolume","getLabelmapVolumeFromSegmentation","commandsModule","viewportGridService","uiNotificationService","utilityModule","getModuleEntry","getEnabledElement","exports","_getActiveViewportsEnabledElement","activeViewportId","getState","element","_getAnnotationsSelectedByToolNames","toolNames","reduce","allAnnotationUIDs","concat","actions","viewportDetails","displaySetsInfo","getDisplaySetByUID","Modality","getPTMetadata","firstImageId","getDataSources","getImageIdsForDisplaySet","instance","get","RadiopharmaceuticalStartDateTime","createNewLabelmapFromPT","withPTViewportId","some","error","currentSegmentations","getSegmentationRepresentations","createLabelmapForDisplaySet","active","addSegmentationRepresentation","thresholdSegmentationByRectangleROITool","displaySetMatchDetails","matchDetails","ctVolumeId","segVolumeId","show","message","ctReferencedVolume","enabledElement","viewport","hasVolumeId","getDisplaySetsUIDsForViewport","getVolumes","dimensions","spacing","getThresholdValues","lower","upper","overwrite","calculateSuvPeak","labelmap","registerWorker","labelmapProps","origin","direction","scalarData","voxelManager","getCompleteScalarDataArray","referenceVolumeProps","annotationsToSend","renderingEngine","executeTask","mean","suvMax","max","suvMaxIJK","maxIJK","suvMaxLPS","maxLPS","getLesionStats","segVoxelManager","refVoxelManager","segmentationMax","segmentationMin","segmentationValues","voxelCount","callback","index","refValue","getAtIndex","push","a","b","minValue","stdValue","Math","sqrt","acc","curr","calculateLesionGlycolysis","calculateTMTV","exportTMTVReportCSV","segReport","additionalReportRows","tlg","getTotalLesionGlycolysis","unshift","firstReport","csv","join","row","column","Array","isArray","PatientID","StudyDate","temp","blob","Blob","url","document","createElement","href","download","filename","click","createAndDownloadTMTVReport","ptVolume","ptVolumeProps","setStartSliceForROIThresholdTool","focalPoint","getCamera","startCoordinate","invalidated","render","setEndSliceForROIThresholdTool","focalPointToEnd","endCoordinate","createTMTVRTReport","stateManager","frameOfReferenceUID","forAnnotations","ROIAnnotations","getSegmentationCSVReport","report","subKey","subValue","imageIds","OHIF","PatientName","Alphabetic","exportRTReportForAnnotations","dicomRTAnnotationExport","setFusionPTColormap","toolGroup","getToolGroup","fusionViewportIds","getViewportIds","getCornerstoneViewport","definitions","commandFn","defaultContext","ROI_STAT","placeHolder","dispatch","Select","closeMenuOnSelect","placeholder","option","payload","LegacyButtonGroup","LegacyButton","color","colSpan","Label","text","DEFAULT_STRATEGY","reducer","state","action","selectedSegmentationId","setSelectedSegmentationId","useCallback","commandName","commandOptions","useReducer","activeSegmentIndex","cs3dTools","isActive","seg","updated","SEGMENTATION_MODIFIED","subscriptions","evt","unsub","ROIThresholdConfiguration","tmtvExtension","preRegistration","addTool","RectangleROIStartEndThresholdTool","CircleROIStartEndThresholdTool","csTools3DVer1MeasurementSource","getSource","addMapping","init","getToolbarModule","defaultComponent","RectangleROIOptions","getPanelModule","getHangingProtocolModule","getCommandsModule"],"sourceRoot":""}