{"version":3,"file":"3902.bundle.5fb65159220b0bfb8ad1.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\r\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nexport default createSEGToolGroupAndAddTools;\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  HYDRATE_SEG: 5,\r\n};\r\n\r\nfunction promptHydrateSEG({\r\n  servicesManager,\r\n  segDisplaySet,\r\n  viewportId,\r\n  preHydrateCallbacks,\r\n  hydrateCallback,\r\n}: withAppTypes) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const extensionManager = servicesManager._extensionManager;\r\n  const appConfig = extensionManager._appConfig;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    const promptResult = appConfig?.disableConfirmationPrompts\r\n      ? RESPONSE.HYDRATE_SEG\r\n      : await _askHydrate(uiViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\r\n      preHydrateCallbacks?.forEach(callback => {\r\n        callback();\r\n      });\r\n\r\n      window.setTimeout(async () => {\r\n        const isHydrated = await hydrateCallback({\r\n          segDisplaySet,\r\n          viewportId,\r\n        });\r\n\r\n        resolve(isHydrated);\r\n      }, 0);\r\n    }\r\n  });\r\n}\r\n\r\nfunction _askHydrate(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to open this Segmentation?';\r\n    const actions = [\r\n      {\r\n        id: 'no-hydrate',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'yes-hydrate',\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_SEG,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          onSubmit(RESPONSE.HYDRATE_SEG);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateSEG;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Icon, Tooltip } from '@ohif/ui';\r\n\r\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  switch (isHydrated) {\r\n    case true:\r\n      StatusIcon = () => <Icon name=\"status-alert\" />;\r\n\r\n      ToolTipMessage = () => <div>This Segmentation is loaded in the segmentation panel</div>;\r\n      break;\r\n    case false:\r\n      StatusIcon = () => (\r\n        <Icon\r\n          className=\"text-aqua-pale\"\r\n          name=\"status-untracked\"\r\n        />\r\n      );\r\n\r\n      ToolTipMessage = () => <div>Click LOAD to load segmentation.</div>;\r\n  }\r\n\r\n  const StatusArea = () => {\r\n    const { t } = useTranslation('Common');\r\n    const loadStr = t('LOAD');\r\n\r\n    return (\r\n      <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\r\n        <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\r\n          <StatusIcon />\r\n          <span className=\"ml-1\">SEG</span>\r\n        </div>\r\n        {!isHydrated && (\r\n          <div\r\n            className=\"bg-primary-main hover:bg-primary-light ml-1 cursor-pointer rounded px-1.5 hover:text-black\"\r\n            // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\r\n            onMouseUp={onStatusClick}\r\n          >\r\n            {loadStr}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip\r\n          content={<ToolTipMessage />}\r\n          position=\"bottom-left\"\r\n        >\r\n          <StatusArea />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusArea />}\r\n    </>\r\n  );\r\n}\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LoadingIndicatorTotalPercent, useViewportGrid, ViewportActionArrows } from '@ohif/ui';\r\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\r\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\r\nimport _getStatusComponent from './_getStatusComponent';\r\nimport { usePositionPresentationStore } from '@ohif/extension-cornerstone';\r\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\r\n\r\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\r\n\r\nfunction OHIFCornerstoneSEGViewport(props: withAppTypes) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportOptions,\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  } = props;\r\n\r\n  const { t } = useTranslation('SEGViewport');\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const {\r\n    displaySetService,\r\n    toolGroupService,\r\n    segmentationService,\r\n    customizationService,\r\n    viewportActionCornersService,\r\n  } = servicesManager.services;\r\n\r\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportId}`;\r\n\r\n  // SEG viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SEG viewport should only have a single display set');\r\n  }\r\n\r\n  const segDisplaySet = displaySets[0];\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n\r\n  // States\r\n  const [selectedSegment, setSelectedSegment] = useState(1);\r\n  const { setPositionPresentation } = usePositionPresentationStore();\r\n\r\n  // Hydration means that the SEG is opened and segments are loaded into the\r\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\r\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\r\n  // loading basically means SEG loading over network and bit unpacking of the\r\n  // SEG data.\r\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\r\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\r\n  const [element, setElement] = useState(null);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    percentComplete: null,\r\n    totalSegments: null,\r\n  });\r\n\r\n  // refs\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const { viewports, activeViewportId } = viewportGrid;\r\n\r\n  const referencedDisplaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n    referencedDisplaySetInstanceUID\r\n  );\r\n\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet,\r\n    segDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const onElementDisabled = () => {\r\n    setElement(null);\r\n  };\r\n\r\n  const storePresentationState = useCallback(() => {\r\n    viewportGrid?.viewports.forEach(({ viewportId }) => {\r\n      commandsManager.runCommand('storePresentation', {\r\n        viewportId,\r\n      });\r\n    });\r\n  }, [viewportGrid]);\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    // Todo: jump to the center of the first segment\r\n    return (\r\n      <Component\r\n        {...props}\r\n        displaySets={[segDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: viewportOptions.viewportType,\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n          presentationIds: viewportOptions.presentationIds,\r\n        }}\r\n        onElementEnabled={evt => {\r\n          props.onElementEnabled?.(evt);\r\n          onElementEnabled(evt);\r\n        }}\r\n        onElementDisabled={onElementDisabled}\r\n      ></Component>\r\n    );\r\n  }, [viewportId, segDisplaySet, toolGroupId]);\r\n\r\n  const onSegmentChange = useCallback(\r\n    direction => {\r\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      const { segments } = segmentation;\r\n\r\n      const numberOfSegments = Object.keys(segments).length;\r\n\r\n      let newSelectedSegmentIndex = selectedSegment + direction;\r\n\r\n      // Segment 0 is always background\r\n\r\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\r\n        newSelectedSegmentIndex = 1;\r\n      } else if (newSelectedSegmentIndex === 0) {\r\n        newSelectedSegmentIndex = numberOfSegments - 1;\r\n      }\r\n\r\n      segmentationService.jumpToSegmentCenter(segmentationId, newSelectedSegmentIndex, viewportId);\r\n      setSelectedSegment(newSelectedSegmentIndex);\r\n    },\r\n    [selectedSegment]\r\n  );\r\n\r\n  const hydrateSEG = useCallback(() => {\r\n    // update the previously stored segmentationPresentation with the new viewportId\r\n    // presentation so that when we put the referencedDisplaySet back in the viewport\r\n    // it will have the correct segmentation representation hydrated\r\n    commandsManager.runCommand('updateStoredSegmentationPresentation', {\r\n      displaySet: segDisplaySet,\r\n      type: SegmentationRepresentations.Labelmap,\r\n    });\r\n\r\n    // update the previously stored positionPresentation with the new viewportId\r\n    // presentation so that when we put the referencedDisplaySet back in the viewport\r\n    // it will be in the correct position zoom and pan\r\n    commandsManager.runCommand('updateStoredPositionPresentation', {\r\n      viewportId,\r\n      displaySetInstanceUID: referencedDisplaySet.displaySetInstanceUID,\r\n    });\r\n\r\n    viewportGridService.setDisplaySetsForViewport({\r\n      viewportId,\r\n      displaySetInstanceUIDs: [referencedDisplaySet.displaySetInstanceUID],\r\n    });\r\n  }, [commandsManager, viewportId, referencedDisplaySet, segDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    if (segIsLoading) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateSEG({\r\n      servicesManager,\r\n      viewportId,\r\n      segDisplaySet,\r\n      preHydrateCallbacks: [storePresentationState],\r\n      hydrateCallback: hydrateSEG,\r\n    }).then(isHydrated => {\r\n      if (isHydrated) {\r\n        setIsHydrated(true);\r\n      }\r\n    });\r\n  }, [servicesManager, viewportId, segDisplaySet, segIsLoading, hydrateSEG]);\r\n\r\n  useEffect(() => {\r\n    // on new seg display set, remove all segmentations from all viewports\r\n    segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (evt.segDisplaySet.displaySetInstanceUID === segDisplaySet.displaySetInstanceUID) {\r\n          setSegIsLoading(false);\r\n        }\r\n\r\n        if (segDisplaySet?.firstSegmentedSliceImageId && viewportOptions?.presentationIds) {\r\n          const { firstSegmentedSliceImageId } = segDisplaySet;\r\n          const { presentationIds } = viewportOptions;\r\n\r\n          setPositionPresentation(presentationIds.positionPresentationId, {\r\n            viewReference: {\r\n              referencedImageId: firstSegmentedSliceImageId,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\r\n      ({ percentComplete, numSegments }) => {\r\n        setProcessingProgress({\r\n          percentComplete,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  /**\r\n   Cleanup the SEG viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    // keep the already stored segmentationPresentation for this viewport in memory\r\n    // so that we can restore it after hydrating the SEG\r\n    commandsManager.runCommand('updateStoredSegmentationPresentation', {\r\n      displaySet: segDisplaySet,\r\n      type: SegmentationRepresentations.Labelmap,\r\n    });\r\n\r\n    // always start fresh for this viewport since it is special type of viewport\r\n    // that should only show one segmentation at a time.\r\n    segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n    // This creates a custom tool group which has the lifetime of this view\r\n    // only, and does NOT interfere with currently displayed segmentations.\r\n    toolGroup = createSEGToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      // e.g., another seg displayset is dragged into the viewport\r\n      segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n      // Only destroy the viewport specific implementation\r\n      toolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  const onStatusClick = useCallback(async () => {\r\n    // Before hydrating a SEG and make it added to all viewports in the grid\r\n    // that share the same frameOfReferenceUID, we need to store the viewport grid\r\n    // presentation state, so that we can restore it after hydrating the SEG. This is\r\n    // required if the user has changed the viewport (other viewport than SEG viewport)\r\n    // presentation state (w/l and invert) and then opens the SEG. If we don't store\r\n    // the presentation state, the viewport will be reset to the default presentation\r\n    storePresentationState();\r\n    hydrateSEG();\r\n  }, [storePresentationState, hydrateSEG]);\r\n\r\n  useEffect(() => {\r\n    viewportActionCornersService.addComponents([\r\n      {\r\n        viewportId,\r\n        id: 'viewportStatusComponent',\r\n        component: _getStatusComponent({\r\n          isHydrated,\r\n          onStatusClick,\r\n        }),\r\n        indexPriority: -100,\r\n        location: viewportActionCornersService.LOCATIONS.topLeft,\r\n      },\r\n      {\r\n        viewportId,\r\n        id: 'viewportActionArrowsComponent',\r\n        component: (\r\n          <ViewportActionArrows\r\n            key=\"actionArrows\"\r\n            onArrowsClick={onSegmentChange}\r\n            className={\r\n              viewportId === activeViewportId ? 'visible' : 'invisible group-hover/pane:visible'\r\n            }\r\n          ></ViewportActionArrows>\r\n        ),\r\n        indexPriority: 0,\r\n        location: viewportActionCornersService.LOCATIONS.topRight,\r\n      },\r\n    ]);\r\n  }, [\r\n    activeViewportId,\r\n    isHydrated,\r\n    onSegmentChange,\r\n    onStatusClick,\r\n    viewportActionCornersService,\r\n    viewportId,\r\n  ]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportId,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {segIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"h-full w-full\"\r\n            totalNumbers={processingProgress.totalSegments}\r\n            percentComplete={processingProgress.percentComplete}\r\n            loadingText=\"Loading SEG...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\r\n  const { SharedFunctionalGroupsSequence } = segDisplaySet.instance;\r\n\r\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\r\n    ? SharedFunctionalGroupsSequence[0]\r\n    : SharedFunctionalGroupsSequence;\r\n\r\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\r\n\r\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\r\n    ? PixelMeasuresSequence[0]\r\n    : PixelMeasuresSequence;\r\n\r\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness || SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneSEGViewport;\r\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","servicesManager","segDisplaySet","viewportId","preHydrateCallbacks","hydrateCallback","uiViewportDialogService","services","appConfig","_extensionManager","_appConfig","Promise","async","resolve","reject","promptResult","disableConfirmationPrompts","message","actions","id","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","event","key","_askHydrate","forEach","callback","window","setTimeout","isHydrated","_getStatusComponent","onStatusClick","ToolTipMessage","StatusIcon","React","Icon","name","className","StatusArea","t","useTranslation","loadStr","onMouseUp","Tooltip","content","position","props","children","displaySets","viewportOptions","extensionManager","commandsManager","displaySetService","toolGroupService","segmentationService","viewportActionCornersService","length","Error","viewportGrid","viewportGridService","useViewportGrid","selectedSegment","setSelectedSegment","useState","setPositionPresentation","usePositionPresentationStore","setIsHydrated","segIsLoading","setSegIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySetInstanceUID","referencedDisplaySet","getDisplaySetByUID","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementDisabled","storePresentationState","useCallback","runCommand","getCornerstoneViewport","component","Component","getModuleEntry","_extends","viewportType","orientation","presentationIds","onElementEnabled","evt","detail","onSegmentChange","direction","segmentationId","displaySetInstanceUID","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","hydrateSEG","SegmentationRepresentations","Labelmap","setDisplaySetsForViewport","displaySetInstanceUIDs","useEffect","promptHydrateSEG","then","clearSegmentationRepresentations","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","firstSegmentedSliceImageId","positionPresentationId","viewReference","referencedImageId","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","activeViewport","includes","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","destroyToolGroup","addComponents","indexPriority","location","LOCATIONS","topLeft","ViewportActionArrows","onArrowsClick","topRight","childrenWithProps","map","child","index","LoadingIndicatorTotalPercent","totalNumbers","loadingText"],"sourceRoot":""}