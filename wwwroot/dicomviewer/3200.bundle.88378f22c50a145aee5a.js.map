{"version":3,"file":"3200.bundle.88378f22c50a145aee5a.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.ts","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/constants/actionIcons.ts","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/constants/viewPresets.ts","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { assign } from 'xstate';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nconst machineConfiguration = {\r\n  id: 'measurementTracking',\r\n  initial: 'idle',\r\n  context: {\r\n    activeViewportId: null,\r\n    trackedStudy: '',\r\n    trackedSeries: [],\r\n    ignoredSeries: [],\r\n    //\r\n    prevTrackedStudy: '',\r\n    prevTrackedSeries: [],\r\n    prevIgnoredSeries: [],\r\n    //\r\n    ignoredSRSeriesForHydration: [],\r\n    isDirty: false,\r\n  },\r\n  states: {\r\n    off: {\r\n      type: 'final',\r\n    },\r\n    labellingOnly: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    idle: {\r\n      entry: 'clearContext',\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            actions: ['setPreviousState'],\r\n          },\r\n        ],\r\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\r\n          },\r\n        ],\r\n        PROMPT_HYDRATE_SR: {\r\n          target: 'promptHydrateStructuredReport',\r\n          cond: 'hasNotIgnoredSRSeriesForHydration',\r\n        },\r\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\r\n        HYDRATE_SR: 'hydrateStructuredReport',\r\n        UPDATE_ACTIVE_VIEWPORT_ID: {\r\n          actions: assign({\r\n            activeViewportId: (_, event) => event.activeViewportId,\r\n          }),\r\n        },\r\n      },\r\n    },\r\n    promptBeginTracking: {\r\n      invoke: {\r\n        src: 'promptBeginTracking',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'isLabelOnMeasureAndShouldKillMachine',\r\n          },\r\n          {\r\n            target: 'off',\r\n            cond: 'shouldKillMachine',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    tracking: {\r\n      on: {\r\n        TRACK_SERIES: [\r\n          {\r\n            target: 'promptLabelAnnotation',\r\n            cond: 'isLabelOnMeasure',\r\n            actions: ['setPreviousState'],\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'isNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'isNewSeries',\r\n          },\r\n        ],\r\n        UNTRACK_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['removeTrackedSeries', 'setIsDirty'],\r\n            cond: 'hasRemainingTrackedSeries',\r\n          },\r\n          {\r\n            target: 'idle',\r\n          },\r\n        ],\r\n        SET_TRACKED_SERIES: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setTrackedStudyAndMultipleSeries'],\r\n          },\r\n        ],\r\n        SAVE_REPORT: 'promptSaveReport',\r\n        SET_DIRTY: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['setIsDirty'],\r\n            cond: 'shouldSetDirty',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    promptTrackNewSeries: {\r\n      invoke: {\r\n        src: 'promptTrackNewSeries',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: ['addTrackedSeries', 'setIsDirty'],\r\n            cond: 'shouldAddSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptTrackNewStudy: {\r\n      invoke: {\r\n        src: 'promptTrackNewStudy',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'discardPreviouslyTrackedMeasurements',\r\n              'setTrackedStudyAndSeries',\r\n              'setIsDirty',\r\n            ],\r\n            cond: 'shouldSetStudyAndSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            actions: ['ignoreSeries'],\r\n            cond: 'shouldAddIgnoredSeries',\r\n          },\r\n          {\r\n            target: 'promptSaveReport',\r\n            cond: 'shouldPromptSaveReport',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptSaveReport: {\r\n      invoke: {\r\n        src: 'promptSaveReport',\r\n        onDone: [\r\n          // \"clicked the save button\"\r\n          // - should clear all measurements\r\n          // - show DICOM SR\r\n          {\r\n            target: 'idle',\r\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\r\n            cond: 'shouldSaveAndContinueWithSameReport',\r\n          },\r\n          // \"starting a new report\"\r\n          // - remove \"just saved\" measurements\r\n          // - start tracking a new study + report\r\n          {\r\n            target: 'tracking',\r\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\r\n            cond: 'shouldSaveAndStartNewReport',\r\n          },\r\n          // Cancel, back to tracking\r\n          {\r\n            target: 'tracking',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptHydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'promptHydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n            cond: 'shouldHydrateStructuredReport',\r\n          },\r\n          {\r\n            target: 'idle',\r\n            actions: ['ignoreHydrationForSRSeries'],\r\n            cond: 'shouldIgnoreHydrationForSR',\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    hydrateStructuredReport: {\r\n      invoke: {\r\n        src: 'hydrateStructuredReport',\r\n        onDone: [\r\n          {\r\n            target: 'tracking',\r\n            actions: [\r\n              'setTrackedStudyAndMultipleSeries',\r\n              'jumpToSameImageInActiveViewport',\r\n              'setIsDirtyToClean',\r\n            ],\r\n          },\r\n        ],\r\n        onError: {\r\n          target: 'idle',\r\n        },\r\n      },\r\n    },\r\n    promptLabelAnnotation: {\r\n      invoke: {\r\n        src: 'promptLabelAnnotation',\r\n        onDone: [\r\n          {\r\n            target: 'labellingOnly',\r\n            cond: 'wasLabellingOnly',\r\n          },\r\n          {\r\n            target: 'promptBeginTracking',\r\n            cond: 'wasIdle',\r\n          },\r\n          {\r\n            target: 'promptTrackNewStudy',\r\n            cond: 'wasTrackingAndIsNewStudy',\r\n          },\r\n          {\r\n            target: 'promptTrackNewSeries',\r\n            cond: 'wasTrackingAndIsNewSeries',\r\n          },\r\n          {\r\n            target: 'tracking',\r\n            cond: 'wasTracking',\r\n          },\r\n          {\r\n            target: 'off',\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  },\r\n  strict: true,\r\n};\r\n\r\nconst defaultOptions = {\r\n  services: {\r\n    promptBeginTracking: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewStudy: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n    promptTrackNewSeries: (ctx, evt) => {\r\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\r\n    },\r\n  },\r\n  actions: {\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      console.log('clearAllMeasurements: not implemented');\r\n    },\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\r\n    },\r\n    clearContext: assign({\r\n      trackedStudy: '',\r\n      trackedSeries: [],\r\n      ignoredSeries: [],\r\n      prevTrackedStudy: '',\r\n      prevTrackedSeries: [],\r\n      prevIgnoredSeries: [],\r\n    }),\r\n    // Promise resolves w/ `evt.data.*`\r\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\r\n      prevTrackedStudy: ctx.trackedStudy,\r\n      prevTrackedSeries: ctx.trackedSeries.slice(),\r\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n      //\r\n      trackedStudy: evt.data.StudyInstanceUID,\r\n      trackedSeries: [evt.data.SeriesInstanceUID],\r\n      ignoredSeries: [],\r\n    })),\r\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\r\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\r\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\r\n\r\n      return {\r\n        prevTrackedStudy: ctx.trackedStudy,\r\n        prevTrackedSeries: ctx.trackedSeries.slice(),\r\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\r\n        //\r\n        trackedStudy: studyInstanceUID,\r\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\r\n        ignoredSeries: [],\r\n      };\r\n    }),\r\n    setIsDirtyToClean: assign((ctx, evt) => ({\r\n      isDirty: false,\r\n    })),\r\n    setIsDirty: assign((ctx, evt) => ({\r\n      isDirty: true,\r\n    })),\r\n    ignoreSeries: assign((ctx, evt) => ({\r\n      prevIgnoredSeries: [...ctx.ignoredSeries],\r\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\r\n      ignoredSRSeriesForHydration: [\r\n        ...ctx.ignoredSRSeriesForHydration,\r\n        evt.data.srSeriesInstanceUID,\r\n      ],\r\n    })),\r\n    addTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: [...ctx.trackedSeries],\r\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\r\n    })),\r\n    removeTrackedSeries: assign((ctx, evt) => ({\r\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\r\n    })),\r\n    setPreviousState: assign((ctx, evt, meta) => {\r\n      return {\r\n        prevState: meta.state.value,\r\n      };\r\n    }),\r\n  },\r\n  guards: {\r\n    // We set dirty any time we performan an action that:\r\n    // - Tracks a new study\r\n    // - Tracks a new series\r\n    // - Adds a measurement to an already tracked study/series\r\n    //\r\n    // We set clean any time we restore from an SR\r\n    //\r\n    // This guard/condition is specific to \"new measurements\"\r\n    // to make sure we only track dirty when the new measurement is specific\r\n    // to a series we're already tracking\r\n    //\r\n    // tl;dr\r\n    // Any report change, that is not a hydration of an existing report, should\r\n    // result in a \"dirty\" report\r\n    //\r\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\r\n    // without creating a new SR.\r\n    shouldSetDirty: (ctx, evt) => {\r\n      return (\r\n        // When would this happen?\r\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\r\n      );\r\n    },\r\n    wasLabellingOnly: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'labellingOnly';\r\n    },\r\n    wasIdle: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'idle';\r\n    },\r\n    wasTracking: (ctx, evt, condMeta) => {\r\n      return ctx.prevState === 'tracking';\r\n    },\r\n    wasTrackingAndIsNewStudy: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        ctx.trackedStudy !== evt.data.StudyInstanceUID\r\n      );\r\n    },\r\n    wasTrackingAndIsNewSeries: (ctx, evt, condMeta) => {\r\n      return (\r\n        ctx.prevState === 'tracking' &&\r\n        !ctx.ignoredSeries.includes(evt.data.SeriesInstanceUID) &&\r\n        !ctx.trackedSeries.includes(evt.data.SeriesInstanceUID)\r\n      );\r\n    },\r\n\r\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\r\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\r\n    shouldSetStudyAndSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\r\n    shouldAddIgnoredSeries: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\r\n    shouldPromptSaveReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\r\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\r\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === true,\r\n    shouldSaveAndStartNewReport: (ctx, evt) =>\r\n      evt.data &&\r\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\r\n      evt.data.isBackupSave === false,\r\n    shouldHydrateStructuredReport: (ctx, evt) =>\r\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\r\n    // Has more than 1, or SeriesInstanceUID is not in list\r\n    // --> Post removal would have non-empty trackedSeries array\r\n    hasRemainingTrackedSeries: (ctx, evt) =>\r\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\r\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\r\n    },\r\n    isNewStudy: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      ctx.trackedStudy !== evt.StudyInstanceUID,\r\n    isNewSeries: (ctx, evt) =>\r\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\r\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\r\n  },\r\n};\r\n\r\nexport { defaultOptions, machineConfiguration, RESPONSE };\r\n","import { ButtonEnums } from '@ohif/ui';\r\nimport i18n from 'i18next';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n};\r\n\r\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  const appConfig = extensionManager._appConfig;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = appConfig?.disableConfirmationPrompts\r\n      ? RESPONSE.SET_STUDY_AND_SERIES\r\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\r\n    const actions = [\r\n      {\r\n        id: 'prompt-begin-tracking-cancel',\r\n        type: ButtonEnums.type.secondary,\r\n        text: i18n.t('Common:No'),\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\r\n        type: ButtonEnums.type.secondary,\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NEVER,\r\n      },\r\n      {\r\n        id: 'prompt-begin-tracking-yes',\r\n        type: ButtonEnums.type.primary,\r\n        text: i18n.t('Common:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      id: 'measurement-tracking-prompt-begin-tracking',\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.id === 'prompt-begin-tracking-yes');\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptBeginTracking;\r\n","import { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\r\n  const { UIViewportDialogService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = await _askShouldAddMeasurements(UIViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.CREATE_REPORT) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to add this measurement to the existing report?';\r\n    const actions = [\r\n      {\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'Cancel',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Create new report',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Add to existing report',\r\n        value: RESPONSE.ADD_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message =\r\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'Save',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Discard',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewSeries;\r\n","import i18n from 'i18next';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n};\r\n\r\nfunction promptTrackNewStudy({ servicesManager, extensionManager }: withAppTypes, ctx, evt) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n  // When the state change happens after a promise, the state machine sends the retult in evt.data;\r\n  // In case of direct transition to the state, the state machine sends the data in evt;\r\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt.data || evt;\r\n\r\n  return new Promise(async function (resolve, reject) {\r\n    let promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\r\n      promptResult = ctx.isDirty\r\n        ? await _askSaveDiscardOrCancel(uiViewportDialogService, viewportId)\r\n        : RESPONSE.SET_STUDY_AND_SERIES;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUID,\r\n      viewportId,\r\n      isBackupSave: false,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\r\n    const actions = [\r\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: i18n.t('MeasurementTable:No, do not ask again'),\r\n        value: RESPONSE.NO_NOT_FOR_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: i18n.t('MeasurementTable:Yes'),\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.SET_STUDY_AND_SERIES);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askSaveDiscardOrCancel(\r\n  UIViewportDialogService: AppTypes.UIViewportDialogService,\r\n  viewportId\r\n) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message =\r\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\r\n    const actions = [\r\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\r\n      {\r\n        type: 'secondary',\r\n        text: 'No, discard previously tracked series & measurements',\r\n        value: RESPONSE.SET_STUDY_AND_SERIES,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.CREATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      UIViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    UIViewportDialogService.show({\r\n      viewportId,\r\n      type: 'warning',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        UIViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptTrackNewStudy;\r\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\nimport { ButtonEnums } from '@ohif/ui';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  CREATE_REPORT: 1,\r\n  ADD_SERIES: 2,\r\n  SET_STUDY_AND_SERIES: 3,\r\n  NO_NOT_FOR_SERIES: 4,\r\n  HYDRATE_REPORT: 5,\r\n};\r\n\r\nfunction promptHydrateStructuredReport({ servicesManager, extensionManager, appConfig }, ctx, evt) {\r\n  const { uiViewportDialogService, displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n  return new Promise(async function (resolve, reject) {\r\n    const promptResult = appConfig?.disableConfirmationPrompts\r\n      ? RESPONSE.HYDRATE_REPORT\r\n      : await _askTrackMeasurements(uiViewportDialogService, viewportId);\r\n\r\n    // Need to do action here... So we can set state...\r\n    let StudyInstanceUID, SeriesInstanceUIDs;\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\r\n      console.warn('!! HYDRATING STRUCTURED REPORT');\r\n      const hydrationResult = hydrateStructuredReport(\r\n        { servicesManager, extensionManager, appConfig },\r\n        displaySetInstanceUID\r\n      );\r\n\r\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n    }\r\n\r\n    resolve({\r\n      userResponse: promptResult,\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\r\n  return new Promise(function (resolve, reject) {\r\n    const message = 'Do you want to continue tracking measurements for this study?';\r\n    const actions = [\r\n      {\r\n        id: 'no-hydrate',\r\n        type: ButtonEnums.type.secondary,\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        id: 'yes-hydrate',\r\n        type: ButtonEnums.type.primary,\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_REPORT,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportId,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n      onKeyPress: event => {\r\n        if (event.key === 'Enter') {\r\n          const action = actions.find(action => action.value === RESPONSE.HYDRATE_REPORT);\r\n          onSubmit(action.value);\r\n        }\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateStructuredReport;\r\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\r\n\r\nfunction hydrateStructuredReport(\r\n  { servicesManager, extensionManager, appConfig }: withAppTypes,\r\n  ctx,\r\n  evt\r\n) {\r\n  const { displaySetService } = servicesManager.services;\r\n  const { viewportId, displaySetInstanceUID } = evt;\r\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const hydrationResult = baseHydrateStructuredReport(\r\n      { servicesManager, extensionManager, appConfig },\r\n      displaySetInstanceUID\r\n    );\r\n\r\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\r\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\r\n\r\n    resolve({\r\n      displaySetInstanceUID: evt.displaySetInstanceUID,\r\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\r\n      viewportId,\r\n      StudyInstanceUID,\r\n      SeriesInstanceUIDs,\r\n    });\r\n  });\r\n}\r\n\r\nexport default hydrateStructuredReport;\r\n","import React, { useContext, useEffect, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Machine } from 'xstate';\r\nimport { useMachine } from '@xstate/react';\r\nimport { useViewportGrid } from '@ohif/ui';\r\nimport { promptLabelAnnotation, promptSaveReport } from '@ohif/extension-default';\r\nimport { machineConfiguration, defaultOptions, RESPONSE } from './measurementTrackingMachine';\r\nimport promptBeginTracking from './promptBeginTracking';\r\nimport promptTrackNewSeries from './promptTrackNewSeries';\r\nimport promptTrackNewStudy from './promptTrackNewStudy';\r\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\r\nimport hydrateStructuredReport from './hydrateStructuredReport';\r\nimport { useAppConfig } from '@state';\r\n\r\nconst TrackedMeasurementsContext = React.createContext();\r\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\r\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\r\n\r\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\r\n\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nfunction TrackedMeasurementsContextProvider(\r\n  { servicesManager, commandsManager, extensionManager }: withAppTypes, // Bound by consumer\r\n  { children } // Component props\r\n) {\r\n  const [appConfig] = useAppConfig();\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const { activeViewportId, viewports } = viewportGrid;\r\n  const { measurementService, displaySetService, customizationService } = servicesManager.services;\r\n\r\n  const machineOptions = Object.assign({}, defaultOptions);\r\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\r\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      console.log(\r\n        'jumping to measurement reset viewport',\r\n        activeViewportId,\r\n        trackedMeasurements[0]\r\n      );\r\n\r\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\r\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\r\n\r\n      const referencedImages = referencedDisplaySet.images;\r\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\r\n\r\n      const measurementData = trackedMeasurements[0].data;\r\n\r\n      let imageIndex = 0;\r\n      if (!isVolumeIdReferenced && measurementData) {\r\n        // if it is imageId referenced find the index of the imageId, we don't have\r\n        // support for volumeId referenced images yet\r\n        imageIndex = referencedImages.findIndex(image => {\r\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\r\n          return image.imageId === imageIdToUse;\r\n        });\r\n\r\n        if (imageIndex === -1) {\r\n          console.warn('Could not find image index for tracked measurement, using 0');\r\n          imageIndex = 0;\r\n        }\r\n      }\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            index: imageIndex,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    jumpToSameImageInActiveViewport: (ctx, evt) => {\r\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\r\n      const measurements = measurementService.getMeasurements();\r\n      const trackedMeasurements = measurements.filter(\r\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\r\n      );\r\n\r\n      const trackedMeasurement = trackedMeasurements[0];\r\n      const referencedDisplaySetUID = trackedMeasurement.displaySetInstanceUID;\r\n\r\n      // update the previously stored positionPresentation with the new viewportId\r\n      // presentation so that when we put the referencedDisplaySet back in the viewport\r\n      // it will be in the correct position zoom and pan\r\n      commandsManager.runCommand('updateStoredPositionPresentation', {\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUID: referencedDisplaySetUID,\r\n      });\r\n\r\n      viewportGridService.setDisplaySetsForViewport({\r\n        viewportId: activeViewportId,\r\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\r\n      });\r\n    },\r\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\r\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\r\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\r\n\r\n        viewportGridService.setDisplaySetsForViewport({\r\n          viewportId: evt.data.viewportId,\r\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\r\n        });\r\n      }\r\n    },\r\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const filteredMeasurements = measurements.filter(ms =>\r\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\r\n      );\r\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n    clearAllMeasurements: (ctx, evt) => {\r\n      const measurements = measurementService.getMeasurements();\r\n      const measurementIds = measurements.map(fm => fm.uid);\r\n\r\n      for (let i = 0; i < measurementIds.length; i++) {\r\n        measurementService.remove(measurementIds[i]);\r\n      }\r\n    },\r\n  });\r\n  machineOptions.services = Object.assign({}, machineOptions.services, {\r\n    promptBeginTracking: promptBeginTracking.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptSaveReport: promptSaveReport.bind(null, {\r\n      servicesManager,\r\n      commandsManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n      appConfig,\r\n    }),\r\n    promptLabelAnnotation: promptLabelAnnotation.bind(null, {\r\n      servicesManager,\r\n      extensionManager,\r\n    }),\r\n  });\r\n  machineOptions.guards = Object.assign({}, machineOptions.guards, {\r\n    isLabelOnMeasure: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.get('measurementLabels');\r\n      return labelConfig?.labelOnMeasure;\r\n    },\r\n    isLabelOnMeasureAndShouldKillMachine: (ctx, evt, condMeta) => {\r\n      const labelConfig = customizationService.get('measurementLabels');\r\n      return evt.data && evt.data.userResponse === RESPONSE.NO_NEVER && labelConfig?.labelOnMeasure;\r\n    },\r\n  });\r\n\r\n  // TODO: IMPROVE\r\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\r\n  // - Friendlier transition/api in front of measurementTracking machine?\r\n  // - Blocked: viewport overlay shouldn't clip when resized\r\n  // TODO: PRIORITY\r\n  // - Fix \"ellipses\" series description dynamic truncate length\r\n  // - Fix viewport border resize\r\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\r\n\r\n  const measurementTrackingMachine = useMemo(() => {\r\n    return Machine(machineConfiguration, machineOptions);\r\n  }, []); // Empty dependency array ensures this is only created once\r\n\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\r\n    measurementTrackingMachine\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Update the state machine with the active viewport ID\r\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\r\n      activeViewportId,\r\n    });\r\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\r\n\r\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\r\n  useEffect(() => {\r\n    const triggerPromptHydrateFlow = async () => {\r\n      if (viewports.size > 0) {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n\r\n        if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\r\n          return;\r\n        }\r\n\r\n        // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\r\n        // tracking fusion viewports yet. This should change when we do.\r\n        const { displaySetService } = servicesManager.services;\r\n        const displaySet = displaySetService.getDisplaySetByUID(\r\n          activeViewport.displaySetInstanceUIDs[0]\r\n        );\r\n\r\n        if (!displaySet) {\r\n          return;\r\n        }\r\n\r\n        // If this is an SR produced by our SR SOPClassHandler,\r\n        // and it hasn't been loaded yet, do that now so we\r\n        // can check if it can be rehydrated or not.\r\n        //\r\n        // Note: This happens:\r\n        // - If the viewport is not currently an OHIFCornerstoneSRViewport\r\n        // - If the displaySet has never been hung\r\n        //\r\n        // Otherwise, the displaySet will be loaded by the useEffect handler\r\n        // listening to displaySet changes inside OHIFCornerstoneSRViewport.\r\n        // The issue here is that this handler in TrackedMeasurementsContext\r\n        // ends up occurring before the Viewport is created, so the displaySet\r\n        // is not loaded yet, and isRehydratable is undefined unless we call load().\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          !displaySet.isLoaded &&\r\n          displaySet.load\r\n        ) {\r\n          await displaySet.load();\r\n        }\r\n\r\n        // Magic string\r\n        // load function added by our sopClassHandler module\r\n        if (\r\n          displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\r\n          displaySet.isRehydratable === true\r\n        ) {\r\n          console.log('sending event...', trackedMeasurements);\r\n          sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\r\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n            SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n            viewportId: activeViewportId,\r\n          });\r\n        }\r\n      }\r\n    };\r\n    triggerPromptHydrateFlow();\r\n  }, [\r\n    trackedMeasurements,\r\n    activeViewportId,\r\n    sendTrackedMeasurementsEvent,\r\n    servicesManager.services,\r\n    viewports,\r\n  ]);\r\n\r\n  return (\r\n    <TrackedMeasurementsContext.Provider\r\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\r\n    >\r\n      {children}\r\n    </TrackedMeasurementsContext.Provider>\r\n  );\r\n}\r\n\r\nTrackedMeasurementsContextProvider.propTypes = {\r\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\r\n  servicesManager: PropTypes.object.isRequired,\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  appConfig: PropTypes.object,\r\n};\r\n\r\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\r\n","import {\r\n  TrackedMeasurementsContext,\r\n  TrackedMeasurementsContextProvider,\r\n  useTrackedMeasurements,\r\n} from './contexts';\r\n\r\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\r\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  });\r\n\r\n  return [\r\n    {\r\n      name: 'TrackedMeasurementsContext',\r\n      context: TrackedMeasurementsContext,\r\n      provider: BoundTrackedMeasurementsContextProvider,\r\n    },\r\n  ];\r\n}\r\n\r\nexport { useTrackedMeasurements };\r\nexport default getContextModule;\r\n","import type { actionIcon } from '../PanelStudyBrowserTracking/types/actionsIcon';\r\n\r\nconst defaultActionIcons = [\r\n  {\r\n    id: 'settings',\r\n    iconName: 'Settings',\r\n    value: false,\r\n  },\r\n] as actionIcon[];\r\n\r\nexport { defaultActionIcons };\r\n","import type { viewPreset } from '../PanelStudyBrowserTracking/types/viewPreset';\r\n\r\nconst defaultViewPresets = [\r\n  {\r\n    id: 'list',\r\n    iconName: 'ListView',\r\n    selected: false,\r\n  },\r\n  {\r\n    id: 'thumbnails',\r\n    iconName: 'ThumbnailView',\r\n    selected: true,\r\n  },\r\n] as viewPreset[];\r\n\r\nexport { defaultViewPresets };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport PropTypes from 'prop-types';\r\nimport { utils } from '@ohif/core';\r\nimport { useImageViewer, useViewportGrid, Dialog, ButtonEnums } from '@ohif/ui';\r\nimport { StudyBrowser } from '@ohif/ui-next';\r\n\r\nimport { useTrackedMeasurements } from '../../getContextModule';\r\nimport { Separator } from '@ohif/ui-next';\r\nimport { PanelStudyBrowserHeader } from '@ohif/extension-default';\r\nimport { useAppConfig } from '@state';\r\nimport { defaultActionIcons, defaultViewPresets } from './constants';\r\n\r\nconst { formatDate, createStudyBrowserTabs } = utils;\r\nconst thumbnailNoImageModalities = [\r\n  'SR',\r\n  'SEG',\r\n  'SM',\r\n  'RTSTRUCT',\r\n  'RTPLAN',\r\n  'RTDOSE',\r\n  'DOC',\r\n  'OT',\r\n  'PMAP',\r\n];\r\n/**\r\n *\r\n * @param {*} param0\r\n */\r\nexport default function PanelStudyBrowserTracking({\r\n  servicesManager,\r\n  getImageSrc,\r\n  getStudiesForPatientByMRN,\r\n  requestDisplaySetCreationForStudy,\r\n  dataSource,\r\n  commandsManager,\r\n}: withAppTypes) {\r\n  const {\r\n    displaySetService,\r\n    uiDialogService,\r\n    hangingProtocolService,\r\n    uiNotificationService,\r\n    measurementService,\r\n    studyPrefetcherService,\r\n    customizationService,\r\n  } = servicesManager.services;\r\n  const navigate = useNavigate();\r\n  const { mode: studyMode } = customizationService.getCustomization('PanelStudyBrowser.studyMode', {\r\n    id: 'default',\r\n    mode: 'all',\r\n  });\r\n\r\n  const { t } = useTranslation('Common');\r\n\r\n  // Normally you nest the components so the tree isn't so deep, and the data\r\n  // doesn't have to have such an intense shape. This works well enough for now.\r\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\r\n  const { StudyInstanceUIDs } = useImageViewer();\r\n  const [{ activeViewportId, viewports, isHangingProtocolLayout }, viewportGridService] =\r\n    useViewportGrid();\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n\r\n  const [activeTabName, setActiveTabName] = useState(studyMode);\r\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\r\n    ...StudyInstanceUIDs,\r\n  ]);\r\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\r\n  const [hasLoadedViewports, setHasLoadedViewports] = useState(false);\r\n  const [displaySets, setDisplaySets] = useState([]);\r\n  const [displaySetsLoadingState, setDisplaySetsLoadingState] = useState({});\r\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\r\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\r\n\r\n  const [viewPresets, setViewPresets] = useState(\r\n    customizationService.getCustomization('studyBrowser.viewPresets')?.value || defaultViewPresets\r\n  );\r\n\r\n  const [actionIcons, setActionIcons] = useState(defaultActionIcons);\r\n\r\n  const updateActionIconValue = actionIcon => {\r\n    actionIcon.value = !actionIcon.value;\r\n    const newActionIcons = [...actionIcons];\r\n    setActionIcons(newActionIcons);\r\n  };\r\n\r\n  const updateViewPresetValue = viewPreset => {\r\n    if (!viewPreset) {\r\n      return;\r\n    }\r\n    const newViewPresets = viewPresets.map(preset => {\r\n      preset.selected = preset.id === viewPreset.id;\r\n      return preset;\r\n    });\r\n    setViewPresets(newViewPresets);\r\n  };\r\n\r\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\r\n    let updatedViewports = [];\r\n    const viewportId = activeViewportId;\r\n    try {\r\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n        viewportId,\r\n        displaySetInstanceUID,\r\n        isHangingProtocolLayout\r\n      );\r\n    } catch (error) {\r\n      console.warn(error);\r\n      uiNotificationService.show({\r\n        title: 'Thumbnail Double Click',\r\n        message:\r\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\r\n        type: 'error',\r\n        duration: 3000,\r\n      });\r\n    }\r\n\r\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n  };\r\n\r\n  const activeViewportDisplaySetInstanceUIDs =\r\n    viewports.get(activeViewportId)?.displaySetInstanceUIDs;\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  useEffect(() => {\r\n    setActiveTabName(studyMode);\r\n  }, [studyMode]);\r\n\r\n  // ~~ studyDisplayList\r\n  useEffect(() => {\r\n    // Fetch all studies for the patient in each primary study\r\n    async function fetchStudiesForPatient(StudyInstanceUID) {\r\n      // current study qido\r\n      const qidoForStudyUID = await dataSource.query.studies.search({\r\n        studyInstanceUid: StudyInstanceUID,\r\n      });\r\n\r\n      if (!qidoForStudyUID?.length) {\r\n        navigate('/notfoundstudy', '_self');\r\n        throw new Error('Invalid study URL');\r\n      }\r\n\r\n      let qidoStudiesForPatient = qidoForStudyUID;\r\n\r\n      // try to fetch the prior studies based on the patientID if the\r\n      // server can respond.\r\n      try {\r\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\r\n      } catch (error) {\r\n        console.warn(error);\r\n      }\r\n\r\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\r\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\r\n        return {\r\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\r\n          date: formatDate(qidoStudy.StudyDate) || t('NoStudyDate'),\r\n          description: qidoStudy.StudyDescription,\r\n          modalities: qidoStudy.ModalitiesInStudy,\r\n          numInstances: qidoStudy.NumInstances,\r\n        };\r\n      });\r\n\r\n      setStudyDisplayList(prevArray => {\r\n        const ret = [...prevArray];\r\n        for (const study of actuallyMappedStudies) {\r\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\r\n            ret.push(study);\r\n          }\r\n        }\r\n        return ret;\r\n      });\r\n    }\r\n\r\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\r\n\r\n  // ~~ Initial Thumbnails\r\n  useEffect(() => {\r\n    if (!hasLoadedViewports) {\r\n      if (activeViewportId) {\r\n        // Once there is an active viewport id, it means the layout is ready\r\n        // so wait a bit of time to allow the viewports preferential loading\r\n        // which improves user experience of responsiveness significantly on slower\r\n        // systems.\r\n        window.setTimeout(() => setHasLoadedViewports(true), 250);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    let currentDisplaySets = displaySetService.activeDisplaySets;\r\n    // filter non based on the list of modalities that are supported by cornerstone\r\n    currentDisplaySets = currentDisplaySets.filter(\r\n      ds => !thumbnailNoImageModalities.includes(ds.Modality)\r\n    );\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    currentDisplaySets.forEach(async dSet => {\r\n      const newImageSrcEntry = {};\r\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\r\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n\r\n      const imageId = getImageIdForThumbnail(displaySet, imageIds);\r\n\r\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\r\n      if (!imageId || displaySet?.unsupported) {\r\n        return;\r\n      }\r\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\r\n\r\n      setThumbnailImageSrcMap(prevState => {\r\n        return { ...prevState, ...newImageSrcEntry };\r\n      });\r\n    });\r\n  }, [displaySetService, dataSource, getImageSrc, activeViewportId, hasLoadedViewports]);\r\n\r\n  // ~~ displaySets\r\n  useEffect(() => {\r\n    const currentDisplaySets = displaySetService.activeDisplaySets;\r\n\r\n    if (!currentDisplaySets.length) {\r\n      return;\r\n    }\r\n\r\n    const mappedDisplaySets = _mapDisplaySets(\r\n      currentDisplaySets,\r\n      displaySetsLoadingState,\r\n      thumbnailImageSrcMap,\r\n      trackedSeries,\r\n      viewports,\r\n      viewportGridService,\r\n      dataSource,\r\n      displaySetService,\r\n      uiDialogService,\r\n      uiNotificationService\r\n    );\r\n\r\n    setDisplaySets(mappedDisplaySets);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    displaySetService.activeDisplaySets,\r\n    displaySetsLoadingState,\r\n    trackedSeries,\r\n    viewports,\r\n    dataSource,\r\n    thumbnailImageSrcMap,\r\n  ]);\r\n\r\n  // -- displaySetsLoadingState\r\n  useEffect(() => {\r\n    const { unsubscribe } = studyPrefetcherService.subscribe(\r\n      studyPrefetcherService.EVENTS.DISPLAYSET_LOAD_PROGRESS,\r\n      updatedDisplaySetLoadingState => {\r\n        const { displaySetInstanceUID, loadingProgress } = updatedDisplaySetLoadingState;\r\n\r\n        setDisplaySetsLoadingState(prevState => ({\r\n          ...prevState,\r\n          [displaySetInstanceUID]: loadingProgress,\r\n        }));\r\n      }\r\n    );\r\n\r\n    return () => unsubscribe();\r\n  }, [studyPrefetcherService]);\r\n\r\n  // ~~ subscriptions --> displaySets\r\n  useEffect(() => {\r\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\r\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\r\n      data => {\r\n        if (!hasLoadedViewports) {\r\n          return;\r\n        }\r\n        const { displaySetsAdded, options } = data;\r\n        displaySetsAdded.forEach(async dSet => {\r\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\r\n\r\n          const newImageSrcEntry = {};\r\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n          if (displaySet?.unsupported) {\r\n            return;\r\n          }\r\n\r\n          if (options.madeInClient) {\r\n            setJumpToDisplaySet(displaySetInstanceUID);\r\n          }\r\n\r\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\r\n          const imageId = getImageIdForThumbnail(displaySet, imageIds);\r\n\r\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\r\n          if (!imageId) {\r\n            return;\r\n          }\r\n\r\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\r\n          newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(imageId);\r\n          setThumbnailImageSrcMap(prevState => {\r\n            return { ...prevState, ...newImageSrcEntry };\r\n          });\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsAdded.unsubscribe();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [displaySetService, dataSource, getImageSrc, thumbnailImageSrcMap, trackedSeries, viewports]);\r\n\r\n  useEffect(() => {\r\n    // TODO: Will this always hold _all_ the displaySets we care about?\r\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\r\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\r\n      changedDisplaySets => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          changedDisplaySets,\r\n          displaySetsLoadingState,\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\r\n      () => {\r\n        const mappedDisplaySets = _mapDisplaySets(\r\n          displaySetService.getActiveDisplaySets(),\r\n          displaySetsLoadingState,\r\n          thumbnailImageSrcMap,\r\n          trackedSeries,\r\n          viewports,\r\n          viewportGridService,\r\n          dataSource,\r\n          displaySetService,\r\n          uiDialogService,\r\n          uiNotificationService\r\n        );\r\n\r\n        setDisplaySets(mappedDisplaySets);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      SubscriptionDisplaySetsChanged.unsubscribe();\r\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\r\n    };\r\n  }, [\r\n    displaySetsLoadingState,\r\n    thumbnailImageSrcMap,\r\n    trackedSeries,\r\n    viewports,\r\n    dataSource,\r\n    displaySetService,\r\n  ]);\r\n\r\n  const tabs = createStudyBrowserTabs(StudyInstanceUIDs, studyDisplayList, displaySets);\r\n\r\n  // TODO: Should not fire this on \"close\"\r\n  function _handleStudyClick(StudyInstanceUID) {\r\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\r\n      ? [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\r\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n\r\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n\r\n    if (!shouldCollapseStudy) {\r\n      const madeInClient = true;\r\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (jumpToDisplaySet) {\r\n      // Get element by displaySetInstanceUID\r\n      const displaySetInstanceUID = jumpToDisplaySet;\r\n      const element = document.getElementById(`thumbnail-${displaySetInstanceUID}`);\r\n\r\n      if (element && typeof element.scrollIntoView === 'function') {\r\n        // TODO: Any way to support IE here?\r\n        element.scrollIntoView({ behavior: 'smooth' });\r\n\r\n        setJumpToDisplaySet(null);\r\n      }\r\n    }\r\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\r\n\r\n  useEffect(() => {\r\n    if (!jumpToDisplaySet) {\r\n      return;\r\n    }\r\n\r\n    const displaySetInstanceUID = jumpToDisplaySet;\r\n    // Set the activeTabName and expand the study\r\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs);\r\n    if (!thumbnailLocation) {\r\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\r\n\r\n      return;\r\n    }\r\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\r\n    setActiveTabName(tabName);\r\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\r\n    if (!studyExpanded) {\r\n      const updatedExpandedStudyInstanceUIDs = [...expandedStudyInstanceUIDs, StudyInstanceUID];\r\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\r\n    }\r\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\r\n\r\n  const onClickUntrack = displaySetInstanceUID => {\r\n    const onConfirm = () => {\r\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\r\n      sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\r\n        SeriesInstanceUID: displaySet.SeriesInstanceUID,\r\n      });\r\n      const measurements = measurementService.getMeasurements();\r\n      measurements.forEach(m => {\r\n        if (m.referenceSeriesUID === displaySet.SeriesInstanceUID) {\r\n          measurementService.remove(m.uid);\r\n        }\r\n      });\r\n    };\r\n\r\n    uiDialogService.create({\r\n      id: 'untrack-series',\r\n      centralize: true,\r\n      isDraggable: false,\r\n      showOverlay: true,\r\n      content: Dialog,\r\n      contentProps: {\r\n        title: 'Untrack Series',\r\n        body: () => (\r\n          <div className=\"bg-primary-dark p-4 text-white\">\r\n            <p>Are you sure you want to untrack this series?</p>\r\n            <p className=\"mt-2\">\r\n              This action cannot be undone and will delete all your existing measurements.\r\n            </p>\r\n          </div>\r\n        ),\r\n        actions: [\r\n          {\r\n            id: 'cancel',\r\n            text: 'Cancel',\r\n            type: ButtonEnums.type.secondary,\r\n          },\r\n          {\r\n            id: 'yes',\r\n            text: 'Yes',\r\n            type: ButtonEnums.type.primary,\r\n            classes: ['untrack-yes-button'],\r\n          },\r\n        ],\r\n        onClose: () => uiDialogService.dismiss({ id: 'untrack-series' }),\r\n        onSubmit: async ({ action }) => {\r\n          switch (action.id) {\r\n            case 'yes':\r\n              onConfirm();\r\n              uiDialogService.dismiss({ id: 'untrack-series' });\r\n              break;\r\n            case 'cancel':\r\n              uiDialogService.dismiss({ id: 'untrack-series' });\r\n              break;\r\n          }\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const onThumbnailContextMenu = (commandName, options) => {\r\n    commandsManager.runCommand(commandName, options);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <>\r\n        <PanelStudyBrowserHeader\r\n          viewPresets={viewPresets}\r\n          updateViewPresetValue={updateViewPresetValue}\r\n          actionIcons={actionIcons}\r\n          updateActionIconValue={updateActionIconValue}\r\n        />\r\n        <Separator\r\n          orientation=\"horizontal\"\r\n          className=\"bg-black\"\r\n          thickness=\"2px\"\r\n        />\r\n      </>\r\n\r\n      <StudyBrowser\r\n        tabs={tabs}\r\n        servicesManager={servicesManager}\r\n        activeTabName={activeTabName}\r\n        expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\r\n        onClickStudy={_handleStudyClick}\r\n        onClickTab={clickedTabName => {\r\n          setActiveTabName(clickedTabName);\r\n        }}\r\n        onClickUntrack={displaySetInstanceUID => {\r\n          onClickUntrack(displaySetInstanceUID);\r\n        }}\r\n        onClickThumbnail={() => {}}\r\n        onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\r\n        activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\r\n        showSettings={actionIcons.find(icon => icon.id === 'settings').value}\r\n        viewPresets={viewPresets}\r\n        onThumbnailContextMenu={onThumbnailContextMenu}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nPanelStudyBrowserTracking.propTypes = {\r\n  servicesManager: PropTypes.object.isRequired,\r\n  dataSource: PropTypes.shape({\r\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  getImageSrc: PropTypes.func.isRequired,\r\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\r\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction getImageIdForThumbnail(displaySet: any, imageIds: any) {\r\n  let imageId;\r\n  if (displaySet.isDynamicVolume) {\r\n    const timePoints = displaySet.dynamicVolumeInfo.timePoints;\r\n    const middleIndex = Math.floor(timePoints.length / 2);\r\n    const middleTimePointImageIds = timePoints[middleIndex];\r\n    imageId = middleTimePointImageIds[Math.floor(middleTimePointImageIds.length / 2)];\r\n  } else {\r\n    imageId = imageIds[Math.floor(imageIds.length / 2)];\r\n  }\r\n  return imageId;\r\n}\r\n\r\n/**\r\n * Maps from the DataSource's format to a naturalized object\r\n *\r\n * @param {*} studies\r\n */\r\nfunction _mapDataSourceStudies(studies) {\r\n  return studies.map(study => {\r\n    // TODO: Why does the data source return in this format?\r\n    return {\r\n      AccessionNumber: study.accession,\r\n      StudyDate: study.date,\r\n      StudyDescription: study.description,\r\n      NumInstances: study.instances,\r\n      ModalitiesInStudy: study.modalities,\r\n      PatientID: study.mrn,\r\n      PatientName: study.patientName,\r\n      StudyInstanceUID: study.studyInstanceUid,\r\n      StudyTime: study.time,\r\n    };\r\n  });\r\n}\r\n\r\nfunction _mapDisplaySets(\r\n  displaySets,\r\n  displaySetLoadingState,\r\n  thumbnailImageSrcMap,\r\n  trackedSeriesInstanceUIDs,\r\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\r\n  viewportGridService,\r\n  dataSource,\r\n  displaySetService,\r\n  uiDialogService,\r\n  uiNotificationService\r\n) {\r\n  const thumbnailDisplaySets = [];\r\n  const thumbnailNoImageDisplaySets = [];\r\n  displaySets\r\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\r\n    .forEach(ds => {\r\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\r\n      const componentType = _getComponentType(ds);\r\n      const numPanes = viewportGridService.getNumViewportPanes();\r\n\r\n      const array =\r\n        componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\r\n\r\n      const { displaySetInstanceUID } = ds;\r\n      const loadingProgress = displaySetLoadingState?.[displaySetInstanceUID];\r\n\r\n      const thumbnailProps = {\r\n        displaySetInstanceUID,\r\n        description: ds.SeriesDescription,\r\n        seriesNumber: ds.SeriesNumber,\r\n        modality: ds.Modality,\r\n        seriesDate: formatDate(ds.SeriesDate),\r\n        numInstances: ds.numImageFrames,\r\n        loadingProgress,\r\n        countIcon: ds.countIcon,\r\n        messages: ds.messages,\r\n        StudyInstanceUID: ds.StudyInstanceUID,\r\n        componentType,\r\n        imageSrc,\r\n        dragData: {\r\n          type: 'displayset',\r\n          displaySetInstanceUID,\r\n          // .. Any other data to pass\r\n        },\r\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\r\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\r\n      };\r\n\r\n      if (componentType === 'thumbnailNoImage') {\r\n        if (dataSource.reject && dataSource.reject.series) {\r\n          thumbnailProps.canReject = !ds?.unsupported;\r\n          thumbnailProps.onReject = () => {\r\n            uiDialogService.create({\r\n              id: 'ds-reject-sr',\r\n              centralize: true,\r\n              isDraggable: false,\r\n              showOverlay: true,\r\n              content: Dialog,\r\n              contentProps: {\r\n                title: 'Delete Report',\r\n                body: () => (\r\n                  <div className=\"bg-primary-dark p-4 text-white\">\r\n                    <p>Are you sure you want to delete this report?</p>\r\n                    <p className=\"mt-2\">This action cannot be undone.</p>\r\n                  </div>\r\n                ),\r\n                actions: [\r\n                  {\r\n                    id: 'cancel',\r\n                    text: 'Cancel',\r\n                    type: ButtonEnums.type.secondary,\r\n                  },\r\n                  {\r\n                    id: 'yes',\r\n                    text: 'Yes',\r\n                    type: ButtonEnums.type.primary,\r\n                    classes: ['reject-yes-button'],\r\n                  },\r\n                ],\r\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\r\n                onShow: () => {\r\n                  const yesButton = document.querySelector('.reject-yes-button');\r\n\r\n                  yesButton.focus();\r\n                },\r\n                onSubmit: async ({ action }) => {\r\n                  switch (action.id) {\r\n                    case 'yes':\r\n                      try {\r\n                        await dataSource.reject.series(ds.StudyInstanceUID, ds.SeriesInstanceUID);\r\n                        displaySetService.deleteDisplaySet(displaySetInstanceUID);\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Report deleted successfully',\r\n                          type: 'success',\r\n                        });\r\n                      } catch (error) {\r\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                        uiNotificationService.show({\r\n                          title: 'Delete Report',\r\n                          message: 'Failed to delete report',\r\n                          type: 'error',\r\n                        });\r\n                      }\r\n                      break;\r\n                    case 'cancel':\r\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\r\n                      break;\r\n                  }\r\n                },\r\n              },\r\n            });\r\n          };\r\n        } else {\r\n          thumbnailProps.canReject = false;\r\n        }\r\n      }\r\n\r\n      array.push(thumbnailProps);\r\n    });\r\n\r\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\r\n}\r\n\r\nfunction _getComponentType(ds) {\r\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\r\n    return 'thumbnailNoImage';\r\n  }\r\n\r\n  return 'thumbnailTracked';\r\n}\r\n\r\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\r\n  for (let t = 0; t < tabs.length; t++) {\r\n    const { studies } = tabs[t];\r\n\r\n    for (let s = 0; s < studies.length; s++) {\r\n      const { displaySets } = studies[s];\r\n\r\n      for (let d = 0; d < displaySets.length; d++) {\r\n        const displaySet = displaySets[d];\r\n\r\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\r\n          return {\r\n            tabName: tabs[t].name,\r\n            StudyInstanceUID: studies[s].studyInstanceUid,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @param {*} cornerstone\r\n * @param {*} imageId\r\n */\r\nfunction getImageSrcFromImageId(cornerstone, imageId) {\r\n  return new Promise((resolve, reject) => {\r\n    const canvas = document.createElement('canvas');\r\n    cornerstone.utilities\r\n      .loadImageToCanvas({ canvas, imageId, thumbnail: true })\r\n      .then(imageId => {\r\n        resolve(canvas.toDataURL());\r\n      })\r\n      .catch(reject);\r\n  });\r\n}\r\n\r\nexport default getImageSrcFromImageId;\r\n","function requestDisplaySetCreationForStudy(\r\n  dataSource,\r\n  displaySetService,\r\n  StudyInstanceUID,\r\n  madeInClient\r\n) {\r\n  if (\r\n    displaySetService.activeDisplaySets.some(\r\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\r\n    )\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\r\n}\r\n\r\nexport default requestDisplaySetCreationForStudy;\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//\r\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\r\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\r\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\r\n\r\nfunction _getStudyForPatientUtility(extensionManager) {\r\n  const utilityModule = extensionManager.getModuleEntry(\r\n    '@ohif/extension-default.utilityModule.common'\r\n  );\r\n\r\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\r\n  return getStudiesForPatientByMRN;\r\n}\r\n\r\n/**\r\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\r\n *\r\n * @param {object} params\r\n * @param {object} commandsManager\r\n * @param {object} extensionManager\r\n */\r\nfunction WrappedPanelStudyBrowserTracking({\r\n  commandsManager,\r\n  extensionManager,\r\n  servicesManager,\r\n}: withAppTypes) {\r\n  const dataSource = extensionManager.getActiveDataSource()[0];\r\n\r\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\r\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\r\n  const _getImageSrcFromImageId = useCallback(\r\n    _createGetImageSrcFromImageIdFn(extensionManager),\r\n    []\r\n  );\r\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\r\n    null,\r\n    dataSource\r\n  );\r\n\r\n  return (\r\n    <PanelStudyBrowserTracking\r\n      servicesManager={servicesManager}\r\n      commandsManager={commandsManager}\r\n      dataSource={dataSource}\r\n      getImageSrc={_getImageSrcFromImageId}\r\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\r\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * Grabs cornerstone library reference using a dependent command from\r\n * the @ohif/extension-cornerstone extension. Then creates a helper function\r\n * that can take an imageId and return an image src.\r\n *\r\n * @param {func} getCommand - CommandManager's getCommand method\r\n * @returns {func} getImageSrcFromImageId - A utility function powered by\r\n * cornerstone\r\n */\r\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\r\n  const utilities = extensionManager.getModuleEntry(\r\n    '@ohif/extension-cornerstone.utilityModule.common'\r\n  );\r\n\r\n  try {\r\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\r\n    return getImageSrcFromImageId.bind(null, cornerstone);\r\n  } catch (ex) {\r\n    throw new Error('Required command not found');\r\n  }\r\n}\r\n\r\nWrappedPanelStudyBrowserTracking.propTypes = {\r\n  commandsManager: PropTypes.object.isRequired,\r\n  extensionManager: PropTypes.object.isRequired,\r\n  servicesManager: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default WrappedPanelStudyBrowserTracking;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { PanelMeasurement } from '@ohif/extension-cornerstone';\r\nimport { useViewportGrid, ButtonEnums, Dialog } from '@ohif/ui';\r\nimport { StudySummary } from '@ohif/ui-next';\r\nimport { Button, Icons } from '@ohif/ui-next';\r\nimport { DicomMetadataStore, utils } from '@ohif/core';\r\nimport { useTrackedMeasurements } from '../getContextModule';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst { downloadCSVReport, formatDate } = utils;\r\n\r\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\r\n  key: undefined, //\r\n  date: '', // '07-Sep-2010',\r\n  modality: '', // 'CT',\r\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\r\n};\r\n\r\nfunction PanelMeasurementTableTracking({\r\n  servicesManager,\r\n  extensionManager,\r\n  commandsManager,\r\n}: withAppTypes) {\r\n  const [viewportGrid] = useViewportGrid();\r\n  const { t } = useTranslation('MeasurementTable');\r\n  const { measurementService, customizationService, uiDialogService } = servicesManager.services;\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\r\n  const [displayStudySummary, setDisplayStudySummary] = useState(\r\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\r\n  );\r\n\r\n  useEffect(() => {\r\n    const updateDisplayStudySummary = async () => {\r\n      if (trackedMeasurements.matches('tracking') && trackedStudy) {\r\n        const studyMeta = DicomMetadataStore.getStudy(trackedStudy);\r\n        if (!studyMeta || !studyMeta.series || studyMeta.series.length === 0) {\r\n          console.debug('Study metadata not available');\r\n          return;\r\n        }\r\n\r\n        const instanceMeta = studyMeta.series[0].instances[0];\r\n        const { StudyDate, StudyDescription } = instanceMeta;\r\n\r\n        const modalities = new Set();\r\n        studyMeta.series.forEach(series => {\r\n          if (trackedSeries.includes(series.SeriesInstanceUID)) {\r\n            modalities.add(series.instances[0].Modality);\r\n          }\r\n        });\r\n        const modality = Array.from(modalities).join('/');\r\n\r\n        setDisplayStudySummary(prevSummary => {\r\n          if (prevSummary.key !== trackedStudy) {\r\n            return {\r\n              key: trackedStudy,\r\n              date: StudyDate,\r\n              modality,\r\n              description: StudyDescription,\r\n            };\r\n          }\r\n          return prevSummary;\r\n        });\r\n      } else if (!trackedStudy) {\r\n        setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\r\n      }\r\n    };\r\n\r\n    updateDisplayStudySummary();\r\n  }, [trackedMeasurements, trackedStudy, trackedSeries]);\r\n\r\n  const { disableEditing } = customizationService.getCustomization(\r\n    'PanelMeasurement.disableEditing',\r\n    {\r\n      id: 'default.disableEditing',\r\n      disableEditing: false,\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {displayStudySummary.key && (\r\n        <StudySummary\r\n          date={formatDate(displayStudySummary.date)}\r\n          description={displayStudySummary.description}\r\n        />\r\n      )}\r\n      <PanelMeasurement\r\n        servicesManager={servicesManager}\r\n        extensionManager={extensionManager}\r\n        commandsManager={commandsManager}\r\n        measurementFilter={measurement =>\r\n          trackedStudy === measurement.referenceStudyUID &&\r\n          trackedSeries.includes(measurement.referenceSeriesUID)\r\n        }\r\n        customHeader={({ additionalFindings, measurements }) => {\r\n          const disabled = additionalFindings.length === 0 && measurements.length === 0;\r\n\r\n          if (disableEditing || disabled) {\r\n            return null;\r\n          }\r\n\r\n          return (\r\n            <div className=\"bg-background flex h-9 w-full items-center rounded pr-0.5\">\r\n              <div className=\"flex space-x-1\">\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"ghost\"\r\n                  className=\"pl-1.5\"\r\n                  onClick={() => {\r\n                    const measurements = measurementService.getMeasurements();\r\n                    const trackedMeasurements = measurements.filter(\r\n                      m =>\r\n                        trackedStudy === m.referenceStudyUID &&\r\n                        trackedSeries.includes(m.referenceSeriesUID)\r\n                    );\r\n\r\n                    downloadCSVReport(trackedMeasurements);\r\n                  }}\r\n                >\r\n                  <Icons.Download className=\"h-5 w-5\" />\r\n                  <span className=\"pl-1\">CSV</span>\r\n                </Button>\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"ghost\"\r\n                  className=\"pl-0.5\"\r\n                  onClick={() => {\r\n                    sendTrackedMeasurementsEvent('SAVE_REPORT', {\r\n                      viewportId: viewportGrid.activeViewportId,\r\n                      isBackupSave: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  <Icons.Add />\r\n                  Create SR\r\n                </Button>\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"ghost\"\r\n                  className=\"pl-0.5\"\r\n                  onClick={() => {\r\n                    uiDialogService.create({\r\n                      id: 'delete-all-measurements',\r\n                      centralize: true,\r\n                      isDraggable: false,\r\n                      showOverlay: true,\r\n                      content: Dialog,\r\n                      contentProps: {\r\n                        title: 'Delete All Measurements',\r\n                        body: () => (\r\n                          <div className=\"bg-primary-dark text-white\">\r\n                            <p>Are you sure you want to delete all measurements?</p>\r\n                            <p className=\"mt-2\">This action cannot be undone.</p>\r\n                          </div>\r\n                        ),\r\n                        actions: [\r\n                          {\r\n                            id: 'cancel',\r\n                            text: 'Cancel',\r\n                            type: ButtonEnums.type.secondary,\r\n                          },\r\n                          {\r\n                            id: 'yes',\r\n                            text: 'Delete All',\r\n                            type: ButtonEnums.type.primary,\r\n                            classes: ['delete-all-yes-button'],\r\n                          },\r\n                        ],\r\n                        onClose: () => uiDialogService.dismiss({ id: 'delete-all-measurements' }),\r\n                        onSubmit: async ({ action }) => {\r\n                          switch (action.id) {\r\n                            case 'yes':\r\n                              measurementService.clearMeasurements();\r\n                              uiDialogService.dismiss({ id: 'delete-all-measurements' });\r\n                              break;\r\n                            case 'cancel':\r\n                              uiDialogService.dismiss({ id: 'delete-all-measurements' });\r\n                              break;\r\n                          }\r\n                        },\r\n                      },\r\n                    });\r\n                  }}\r\n                >\r\n                  <Icons.Delete />\r\n                  Delete All\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      ></PanelMeasurement>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PanelMeasurementTableTracking;\r\n","import { Types } from '@ohif/core';\r\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\r\nimport i18n from 'i18next';\r\nimport React from 'react';\r\n\r\n// TODO:\r\n// - No loading UI exists yet\r\n// - cancel promises when component is destroyed\r\n// - show errors in UI for thumbnails if promise fails\r\n\r\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\r\n  return [\r\n    {\r\n      name: 'seriesList',\r\n      iconName: 'tab-studies',\r\n      iconLabel: 'Studies',\r\n      label: i18n.t('SidePanel:Studies'),\r\n      component: props => (\r\n        <PanelStudyBrowserTracking\r\n          {...props}\r\n          commandsManager={commandsManager}\r\n          extensionManager={extensionManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      name: 'trackedMeasurements',\r\n      iconName: 'tab-linear',\r\n      iconLabel: 'Measure',\r\n      label: i18n.t('SidePanel:Measurements'),\r\n      component: props => (\r\n        <PanelMeasurementTableTracking\r\n          {...props}\r\n          commandsManager={commandsManager}\r\n          extensionManager={extensionManager}\r\n          servicesManager={servicesManager}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getPanelModule;\r\n","import React from 'react';\r\n\r\nconst Component = React.lazy(() => {\r\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\r\n});\r\n\r\nconst OHIFCornerstoneViewport = props => {\r\n  return (\r\n    <React.Suspense fallback={<div>Loading...</div>}>\r\n      <Component {...props} />\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\r\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        servicesManager={servicesManager}\r\n        commandsManager={commandsManager}\r\n        extensionManager={extensionManager}\r\n        {...props}\r\n      />\r\n    );\r\n  };\r\n\r\n  return [\r\n    {\r\n      name: 'cornerstone-tracked',\r\n      component: ExtendedOHIFCornerstoneTrackingViewport,\r\n    },\r\n  ];\r\n}\r\n\r\nexport default getViewportModule;\r\n","import getContextModule from './getContextModule';\r\nimport getPanelModule from './getPanelModule';\r\nimport getViewportModule from './getViewportModule';\r\nimport { id } from './id.js';\r\n\r\nconst measurementTrackingExtension = {\r\n  /**\r\n   * Only required property. Should be a unique value across all extensions.\r\n   */\r\n  id,\r\n\r\n  getContextModule,\r\n  getPanelModule,\r\n  getViewportModule,\r\n};\r\n\r\nexport default measurementTrackingExtension;\r\n","import packageJson from '../package.json';\r\n\r\nconst id = packageJson.name;\r\n\r\nexport { id };\r\n"],"names":["RESPONSE","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","NO_NOT_FOR_SERIES","HYDRATE_REPORT","machineConfiguration","id","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","labellingOnly","on","TRACK_SERIES","target","actions","idle","entry","cond","SET_TRACKED_SERIES","PROMPT_HYDRATE_SR","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","event","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","promptLabelAnnotation","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","setPreviousState","meta","prevState","state","value","guards","shouldSetDirty","undefined","includes","wasLabellingOnly","condMeta","wasIdle","wasTracking","wasTrackingAndIsNewStudy","wasTrackingAndIsNewSeries","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","servicesManager","extensionManager","uiViewportDialogService","appConfig","_appConfig","viewportId","Promise","async","resolve","reject","promptResult","disableConfirmationPrompts","message","i18n","t","ButtonEnums","secondary","text","primary","onSubmit","result","hide","show","onOutsideClick","onKeyPress","key","action","find","_askTrackMeasurements","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","displaySetService","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","commandsManager","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","measurementService","customizationService","machineOptions","Object","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","measurementData","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","displaySetInstanceUIDs","viewportOptions","initialImageOptions","index","jumpToSameImageInActiveViewport","runCommand","createdDisplaySetInstanceUIDs","StructuredReportDisplaySetInstanceUID","measurementIds","ms","map","fm","i","remove","uid","bind","isLabelOnMeasure","labelConfig","get","labelOnMeasure","isLabelOnMeasureAndShouldKillMachine","measurementTrackingMachine","useMemo","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","size","activeViewport","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","triggerPromptHydrateFlow","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","defaultActionIcons","iconName","defaultViewPresets","selected","formatDate","createStudyBrowserTabs","utils","thumbnailNoImageModalities","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","dataSource","uiDialogService","hangingProtocolService","uiNotificationService","studyPrefetcherService","navigate","useNavigate","mode","studyMode","getCustomization","useTranslation","StudyInstanceUIDs","useImageViewer","isHangingProtocolLayout","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","hasLoadedViewports","setHasLoadedViewports","displaySets","setDisplaySets","displaySetsLoadingState","setDisplaySetsLoadingState","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","viewPresets","setViewPresets","actionIcons","setActionIcons","activeViewportDisplaySetInstanceUIDs","forEach","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","Error","qidoStudiesForPatient","error","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","it","push","fetchStudiesForPatient","window","setTimeout","currentDisplaySets","activeDisplaySets","ds","Modality","newImageSrcEntry","dSet","getImageIdForThumbnail","getImageIdsForDisplaySet","unsupported","mappedDisplaySets","_mapDisplaySets","unsubscribe","subscribe","EVENTS","DISPLAYSET_LOAD_PROGRESS","updatedDisplaySetLoadingState","loadingProgress","SubscriptionDisplaySetsAdded","DISPLAY_SETS_ADDED","displaySetsAdded","options","madeInClient","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","getActiveDisplaySets","tabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","onClickUntrack","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","body","className","classes","onClose","dismiss","onConfirm","PanelStudyBrowserHeader","updateViewPresetValue","viewPreset","newViewPresets","preset","updateActionIconValue","actionIcon","newActionIcons","Separator","orientation","thickness","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","showSettings","icon","onThumbnailContextMenu","commandName","imageIds","isDynamicVolume","timePoints","dynamicVolumeInfo","middleTimePointImageIds","Math","floor","displaySetLoadingState","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","_getComponentType","array","getNumViewportPanes","thumbnailProps","SeriesDescription","seriesNumber","SeriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","messages","dragData","isTracked","isHydratedForDerivedDisplaySet","isHydrated","series","canReject","onReject","onShow","querySelector","focus","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","thumbnail","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","useCallback","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","displayStudySummary","setDisplayStudySummary","matches","studyMeta","DicomMetadataStore","getStudy","debug","instanceMeta","Set","add","Array","from","join","prevSummary","updateDisplayStudySummary","disableEditing","StudySummary","PanelMeasurement","measurementFilter","measurement","customHeader","additionalFindings","measurements","disabled","Button","variant","onClick","Icons","Download","Add","clearMeasurements","Delete","iconLabel","label","component","props","_extends","PanelMeasurementTableTracking","Component","OHIFCornerstoneViewport","fallback","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}